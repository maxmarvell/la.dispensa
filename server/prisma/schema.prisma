generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  username      String          @unique
  password      String
  salt          String
  image         String?
  connectedWith Connection[]    @relation("connectedWith")
  connectedBy   Connection[]    @relation("connectedBy")
  ratings       Rating[]
  recipes       Recipe[]
  recipeEditors RecipeEditors[]
  reviews       Review[]
}

model Recipe {
  id            String             @id @default(uuid())
  createdOn     DateTime?          @default(now())
  updatedAt     DateTime?          @updatedAt
  title         String             @db.VarChar(255)
  authorId      String
  image         String?
  description   String?            @db.VarChar(255)
  public        Boolean?           @default(false)
  parentRecipes Component[]        @relation("parentRecipes")
  components    Component[]        @relation("components")
  instructions  Instruction[]
  iterations    Iteration[]
  ratings       Rating[]
  author        User               @relation(fields: [authorId], references: [id], onDelete: Cascade)
  editors       RecipeEditors[]
  ingredients   RecipeIngredient[]
  reviews       Review[]
  tags          Tag[]
}

model Ingredient {
  id         String                @id @default(uuid())
  name       String                @unique
  iterations IngredientIteration[]
  recipes    RecipeIngredient[]
}

model Connection {
  connectedWithId String
  connectedById   String
  accepted        Boolean   @default(false)
  connectedBy     User      @relation("connectedWith", fields: [connectedById], references: [id], onDelete: Cascade)
  connectedWith   User      @relation("connectedBy", fields: [connectedWithId], references: [id], onDelete: Cascade)
  createdOn       DateTime? @default(now())

  @@id([connectedWithId, connectedById], name: "ConnectionId")
}

model Tag {
  recipeId String
  name     String @db.VarChar(20)
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([recipeId, name])
}

model RecipeEditors {
  recipeId String
  userId   String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([recipeId, userId], name: "EditorId")
}

model Rating {
  recipeId String
  userId   String
  value    Int
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([recipeId, userId], name: "RatingId")
}

model Review {
  recipeId  String
  userId    String
  text      String    @db.VarChar(620)
  createdOn DateTime? @default(now())
  recipe    Recipe    @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([recipeId, userId], name: "ReviewId")
}

model Instruction {
  description        String              @db.VarChar(255)
  recipeId           String
  step               Int
  recipe             Recipe              @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  timeAndTemperature TimeAndTemperature?

  @@id([recipeId, step], name: "InstructionId")
}

model TimeAndTemperature {
  recipeId    String
  step        Int
  hours       Int?
  minutes     Int?
  temperature Int
  unit        TemperatureUnit? @default(C)
  instruction Instruction      @relation(fields: [recipeId, step], references: [recipeId, step], onDelete: Cascade)

  @@unique([recipeId, step])
}

model RecipeIngredient {
  recipeId     String
  ingredientId String
  quantity     Int
  unit         IngredientUnit?
  ingredient   Ingredient      @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  recipe       Recipe          @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@id([recipeId, ingredientId], name: "RecipeIngredientId")
}

model Component {
  recipeId    String
  componentId String
  amount      Float
  component   Recipe @relation("parentRecipes", fields: [componentId], references: [id], onDelete: Cascade)
  recipe      Recipe @relation("components", fields: [recipeId], references: [id], onDelete: Cascade)

  @@id([recipeId, componentId], name: "RecipeComponentId")
}

model Iteration {
  id           String                 @id @default(uuid())
  recipeId     String
  createdOn    DateTime?              @default(now())
  updatedAt    DateTime?              @updatedAt
  parentId     String?
  tag          String?                @db.VarChar(255)
  ingredients  IngredientIteration[]
  instructions InstructionIteration[]
  parent       Iteration?             @relation("IterationHistory", fields: [parentId], references: [id], onDelete: Cascade)
  children     Iteration[]            @relation("IterationHistory")
  recipe       Recipe                 @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model IngredientIteration {
  ingredientId String
  quantity     Int
  iterationId  String
  unit         IngredientUnit?
  ingredient   Ingredient      @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  recipe       Iteration       @relation(fields: [iterationId], references: [id], onDelete: Cascade)

  @@id([iterationId, ingredientId], name: "RecipeIngredientId")
}

model InstructionIteration {
  description        String                       @db.VarChar(255)
  step               Int
  iterationId        String
  recipe             Iteration                    @relation(fields: [iterationId], references: [id], onDelete: Cascade)
  timeAndTemperature TimeAndTemperatureIteration?

  @@id([iterationId, step], name: "InstructionId")
}

model TimeAndTemperatureIteration {
  iterationId     String
  instructionStep Int
  hours           Int?
  minutes         Int?
  temperature     Int
  unit            TemperatureUnit?     @default(C)
  instruction     InstructionIteration @relation(fields: [iterationId, instructionStep], references: [iterationId, step], onDelete: Cascade)

  @@unique([iterationId, instructionStep])
}

enum TemperatureUnit {
  C
  K
}

enum IngredientUnit {
  G
  KG
  CUP
  ML
  L
  OZ
}
