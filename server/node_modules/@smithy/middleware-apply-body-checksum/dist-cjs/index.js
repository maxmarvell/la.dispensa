var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  applyMd5BodyChecksumMiddleware: () => applyMd5BodyChecksumMiddleware,
  applyMd5BodyChecksumMiddlewareOptions: () => applyMd5BodyChecksumMiddlewareOptions,
  getApplyMd5BodyChecksumPlugin: () => getApplyMd5BodyChecksumPlugin,
  resolveMd5BodyChecksumConfig: () => resolveMd5BodyChecksumConfig
});
module.exports = __toCommonJS(src_exports);

// src/applyMd5BodyChecksumMiddleware.ts
var import_is_array_buffer = require("@smithy/is-array-buffer");
var import_protocol_http = require("@smithy/protocol-http");
var applyMd5BodyChecksumMiddleware = /* @__PURE__ */ __name((options) => (next) => async (args) => {
  let { request } = args;
  if (import_protocol_http.HttpRequest.isInstance(request)) {
    const { body, headers } = request;
    if (!hasHeader("content-md5", headers)) {
      let digest;
      if (body === void 0 || typeof body === "string" || ArrayBuffer.isView(body) || (0, import_is_array_buffer.isArrayBuffer)(body)) {
        const hash = new options.md5();
        hash.update(body || "");
        digest = hash.digest();
      } else {
        digest = options.streamHasher(options.md5, body);
      }
      request = {
        ...request,
        headers: {
          ...headers,
          "content-md5": options.base64Encoder(await digest)
        }
      };
    }
  }
  return next({
    ...args,
    request
  });
}, "applyMd5BodyChecksumMiddleware");
var applyMd5BodyChecksumMiddlewareOptions = {
  name: "applyMd5BodyChecksumMiddleware",
  step: "build",
  tags: ["SET_CONTENT_MD5", "BODY_CHECKSUM"],
  override: true
};
var getApplyMd5BodyChecksumPlugin = /* @__PURE__ */ __name((config) => ({
  applyToStack: (clientStack) => {
    clientStack.add(applyMd5BodyChecksumMiddleware(config), applyMd5BodyChecksumMiddlewareOptions);
  }
}), "getApplyMd5BodyChecksumPlugin");
var hasHeader = /* @__PURE__ */ __name((soughtHeader, headers) => {
  soughtHeader = soughtHeader.toLowerCase();
  for (const headerName of Object.keys(headers)) {
    if (soughtHeader === headerName.toLowerCase()) {
      return true;
    }
  }
  return false;
}, "hasHeader");

// src/md5Configuration.ts
var resolveMd5BodyChecksumConfig = /* @__PURE__ */ __name((input) => input, "resolveMd5BodyChecksumConfig");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  applyMd5BodyChecksumMiddleware,
  applyMd5BodyChecksumMiddlewareOptions,
  getApplyMd5BodyChecksumPlugin,
  resolveMd5BodyChecksumConfig
});

