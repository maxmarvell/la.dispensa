
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Recipe
 * 
 */
export type Recipe = $Result.DefaultSelection<Prisma.$RecipePayload>
/**
 * Model Ingredient
 * 
 */
export type Ingredient = $Result.DefaultSelection<Prisma.$IngredientPayload>
/**
 * Model RecipeIngredient
 * 
 */
export type RecipeIngredient = $Result.DefaultSelection<Prisma.$RecipeIngredientPayload>
/**
 * Model Connection
 * 
 */
export type Connection = $Result.DefaultSelection<Prisma.$ConnectionPayload>
/**
 * Model RecipePermission
 * 
 */
export type RecipePermission = $Result.DefaultSelection<Prisma.$RecipePermissionPayload>
/**
 * Model Instruction
 * 
 */
export type Instruction = $Result.DefaultSelection<Prisma.$InstructionPayload>
/**
 * Model Time
 * 
 */
export type Time = $Result.DefaultSelection<Prisma.$TimePayload>
/**
 * Model Temperature
 * 
 */
export type Temperature = $Result.DefaultSelection<Prisma.$TemperaturePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const IngreidentUnit: {
  G: 'G',
  KG: 'KG',
  CUP: 'CUP',
  ML: 'ML',
  L: 'L',
  OZ: 'OZ'
};

export type IngreidentUnit = (typeof IngreidentUnit)[keyof typeof IngreidentUnit]


export const Role: {
  VIEWER: 'VIEWER',
  CONTRIBUTOR: 'CONTRIBUTOR',
  EDITOR: 'EDITOR',
  AUTHOR: 'AUTHOR'
};

export type Role = (typeof Role)[keyof typeof Role]


export const TemperatureUnit: {
  C: 'C',
  K: 'K'
};

export type TemperatureUnit = (typeof TemperatureUnit)[keyof typeof TemperatureUnit]

}

export type IngreidentUnit = $Enums.IngreidentUnit

export const IngreidentUnit: typeof $Enums.IngreidentUnit

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type TemperatureUnit = $Enums.TemperatureUnit

export const TemperatureUnit: typeof $Enums.TemperatureUnit

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.recipe`: Exposes CRUD operations for the **Recipe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recipes
    * const recipes = await prisma.recipe.findMany()
    * ```
    */
  get recipe(): Prisma.RecipeDelegate<ExtArgs>;

  /**
   * `prisma.ingredient`: Exposes CRUD operations for the **Ingredient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ingredients
    * const ingredients = await prisma.ingredient.findMany()
    * ```
    */
  get ingredient(): Prisma.IngredientDelegate<ExtArgs>;

  /**
   * `prisma.recipeIngredient`: Exposes CRUD operations for the **RecipeIngredient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RecipeIngredients
    * const recipeIngredients = await prisma.recipeIngredient.findMany()
    * ```
    */
  get recipeIngredient(): Prisma.RecipeIngredientDelegate<ExtArgs>;

  /**
   * `prisma.connection`: Exposes CRUD operations for the **Connection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Connections
    * const connections = await prisma.connection.findMany()
    * ```
    */
  get connection(): Prisma.ConnectionDelegate<ExtArgs>;

  /**
   * `prisma.recipePermission`: Exposes CRUD operations for the **RecipePermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RecipePermissions
    * const recipePermissions = await prisma.recipePermission.findMany()
    * ```
    */
  get recipePermission(): Prisma.RecipePermissionDelegate<ExtArgs>;

  /**
   * `prisma.instruction`: Exposes CRUD operations for the **Instruction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Instructions
    * const instructions = await prisma.instruction.findMany()
    * ```
    */
  get instruction(): Prisma.InstructionDelegate<ExtArgs>;

  /**
   * `prisma.time`: Exposes CRUD operations for the **Time** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Times
    * const times = await prisma.time.findMany()
    * ```
    */
  get time(): Prisma.TimeDelegate<ExtArgs>;

  /**
   * `prisma.temperature`: Exposes CRUD operations for the **Temperature** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Temperatures
    * const temperatures = await prisma.temperature.findMany()
    * ```
    */
  get temperature(): Prisma.TemperatureDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.8.1
   * Query Engine version: 78caf6feeaed953168c64e15a249c3e9a033ebe2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Recipe: 'Recipe',
    Ingredient: 'Ingredient',
    RecipeIngredient: 'RecipeIngredient',
    Connection: 'Connection',
    RecipePermission: 'RecipePermission',
    Instruction: 'Instruction',
    Time: 'Time',
    Temperature: 'Temperature'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'recipe' | 'ingredient' | 'recipeIngredient' | 'connection' | 'recipePermission' | 'instruction' | 'time' | 'temperature'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Recipe: {
        payload: Prisma.$RecipePayload<ExtArgs>
        fields: Prisma.RecipeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecipeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecipeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          findFirst: {
            args: Prisma.RecipeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecipeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          findMany: {
            args: Prisma.RecipeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>[]
          }
          create: {
            args: Prisma.RecipeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          createMany: {
            args: Prisma.RecipeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RecipeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          update: {
            args: Prisma.RecipeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          deleteMany: {
            args: Prisma.RecipeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RecipeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RecipeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipePayload>
          }
          aggregate: {
            args: Prisma.RecipeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRecipe>
          }
          groupBy: {
            args: Prisma.RecipeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RecipeGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecipeCountArgs<ExtArgs>,
            result: $Utils.Optional<RecipeCountAggregateOutputType> | number
          }
        }
      }
      Ingredient: {
        payload: Prisma.$IngredientPayload<ExtArgs>
        fields: Prisma.IngredientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IngredientFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IngredientFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>
          }
          findFirst: {
            args: Prisma.IngredientFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IngredientFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>
          }
          findMany: {
            args: Prisma.IngredientFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>[]
          }
          create: {
            args: Prisma.IngredientCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>
          }
          createMany: {
            args: Prisma.IngredientCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.IngredientDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>
          }
          update: {
            args: Prisma.IngredientUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>
          }
          deleteMany: {
            args: Prisma.IngredientDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.IngredientUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.IngredientUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>
          }
          aggregate: {
            args: Prisma.IngredientAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateIngredient>
          }
          groupBy: {
            args: Prisma.IngredientGroupByArgs<ExtArgs>,
            result: $Utils.Optional<IngredientGroupByOutputType>[]
          }
          count: {
            args: Prisma.IngredientCountArgs<ExtArgs>,
            result: $Utils.Optional<IngredientCountAggregateOutputType> | number
          }
        }
      }
      RecipeIngredient: {
        payload: Prisma.$RecipeIngredientPayload<ExtArgs>
        fields: Prisma.RecipeIngredientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecipeIngredientFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecipeIngredientFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>
          }
          findFirst: {
            args: Prisma.RecipeIngredientFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecipeIngredientFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>
          }
          findMany: {
            args: Prisma.RecipeIngredientFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>[]
          }
          create: {
            args: Prisma.RecipeIngredientCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>
          }
          createMany: {
            args: Prisma.RecipeIngredientCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RecipeIngredientDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>
          }
          update: {
            args: Prisma.RecipeIngredientUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>
          }
          deleteMany: {
            args: Prisma.RecipeIngredientDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RecipeIngredientUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RecipeIngredientUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipeIngredientPayload>
          }
          aggregate: {
            args: Prisma.RecipeIngredientAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRecipeIngredient>
          }
          groupBy: {
            args: Prisma.RecipeIngredientGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RecipeIngredientGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecipeIngredientCountArgs<ExtArgs>,
            result: $Utils.Optional<RecipeIngredientCountAggregateOutputType> | number
          }
        }
      }
      Connection: {
        payload: Prisma.$ConnectionPayload<ExtArgs>
        fields: Prisma.ConnectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConnectionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConnectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConnectionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConnectionPayload>
          }
          findFirst: {
            args: Prisma.ConnectionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConnectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConnectionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConnectionPayload>
          }
          findMany: {
            args: Prisma.ConnectionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConnectionPayload>[]
          }
          create: {
            args: Prisma.ConnectionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConnectionPayload>
          }
          createMany: {
            args: Prisma.ConnectionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ConnectionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConnectionPayload>
          }
          update: {
            args: Prisma.ConnectionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConnectionPayload>
          }
          deleteMany: {
            args: Prisma.ConnectionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ConnectionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ConnectionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConnectionPayload>
          }
          aggregate: {
            args: Prisma.ConnectionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateConnection>
          }
          groupBy: {
            args: Prisma.ConnectionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ConnectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConnectionCountArgs<ExtArgs>,
            result: $Utils.Optional<ConnectionCountAggregateOutputType> | number
          }
        }
      }
      RecipePermission: {
        payload: Prisma.$RecipePermissionPayload<ExtArgs>
        fields: Prisma.RecipePermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecipePermissionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipePermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecipePermissionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipePermissionPayload>
          }
          findFirst: {
            args: Prisma.RecipePermissionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipePermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecipePermissionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipePermissionPayload>
          }
          findMany: {
            args: Prisma.RecipePermissionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipePermissionPayload>[]
          }
          create: {
            args: Prisma.RecipePermissionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipePermissionPayload>
          }
          createMany: {
            args: Prisma.RecipePermissionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RecipePermissionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipePermissionPayload>
          }
          update: {
            args: Prisma.RecipePermissionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipePermissionPayload>
          }
          deleteMany: {
            args: Prisma.RecipePermissionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RecipePermissionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RecipePermissionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipePermissionPayload>
          }
          aggregate: {
            args: Prisma.RecipePermissionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRecipePermission>
          }
          groupBy: {
            args: Prisma.RecipePermissionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RecipePermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecipePermissionCountArgs<ExtArgs>,
            result: $Utils.Optional<RecipePermissionCountAggregateOutputType> | number
          }
        }
      }
      Instruction: {
        payload: Prisma.$InstructionPayload<ExtArgs>
        fields: Prisma.InstructionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InstructionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstructionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InstructionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstructionPayload>
          }
          findFirst: {
            args: Prisma.InstructionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstructionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InstructionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstructionPayload>
          }
          findMany: {
            args: Prisma.InstructionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstructionPayload>[]
          }
          create: {
            args: Prisma.InstructionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstructionPayload>
          }
          createMany: {
            args: Prisma.InstructionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.InstructionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstructionPayload>
          }
          update: {
            args: Prisma.InstructionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstructionPayload>
          }
          deleteMany: {
            args: Prisma.InstructionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.InstructionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.InstructionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstructionPayload>
          }
          aggregate: {
            args: Prisma.InstructionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateInstruction>
          }
          groupBy: {
            args: Prisma.InstructionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<InstructionGroupByOutputType>[]
          }
          count: {
            args: Prisma.InstructionCountArgs<ExtArgs>,
            result: $Utils.Optional<InstructionCountAggregateOutputType> | number
          }
        }
      }
      Time: {
        payload: Prisma.$TimePayload<ExtArgs>
        fields: Prisma.TimeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TimeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TimePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TimeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TimePayload>
          }
          findFirst: {
            args: Prisma.TimeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TimePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TimeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TimePayload>
          }
          findMany: {
            args: Prisma.TimeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TimePayload>[]
          }
          create: {
            args: Prisma.TimeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TimePayload>
          }
          createMany: {
            args: Prisma.TimeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TimeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TimePayload>
          }
          update: {
            args: Prisma.TimeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TimePayload>
          }
          deleteMany: {
            args: Prisma.TimeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TimeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TimeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TimePayload>
          }
          aggregate: {
            args: Prisma.TimeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTime>
          }
          groupBy: {
            args: Prisma.TimeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TimeGroupByOutputType>[]
          }
          count: {
            args: Prisma.TimeCountArgs<ExtArgs>,
            result: $Utils.Optional<TimeCountAggregateOutputType> | number
          }
        }
      }
      Temperature: {
        payload: Prisma.$TemperaturePayload<ExtArgs>
        fields: Prisma.TemperatureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TemperatureFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TemperaturePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TemperatureFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TemperaturePayload>
          }
          findFirst: {
            args: Prisma.TemperatureFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TemperaturePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TemperatureFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TemperaturePayload>
          }
          findMany: {
            args: Prisma.TemperatureFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TemperaturePayload>[]
          }
          create: {
            args: Prisma.TemperatureCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TemperaturePayload>
          }
          createMany: {
            args: Prisma.TemperatureCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TemperatureDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TemperaturePayload>
          }
          update: {
            args: Prisma.TemperatureUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TemperaturePayload>
          }
          deleteMany: {
            args: Prisma.TemperatureDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TemperatureUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TemperatureUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TemperaturePayload>
          }
          aggregate: {
            args: Prisma.TemperatureAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTemperature>
          }
          groupBy: {
            args: Prisma.TemperatureGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TemperatureGroupByOutputType>[]
          }
          count: {
            args: Prisma.TemperatureCountArgs<ExtArgs>,
            result: $Utils.Optional<TemperatureCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    recipes: number
    connectedWith: number
    connectedBy: number
    permissions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipes?: boolean | UserCountOutputTypeCountRecipesArgs
    connectedWith?: boolean | UserCountOutputTypeCountConnectedWithArgs
    connectedBy?: boolean | UserCountOutputTypeCountConnectedByArgs
    permissions?: boolean | UserCountOutputTypeCountPermissionsArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRecipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountConnectedWithArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConnectionWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountConnectedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConnectionWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipePermissionWhereInput
  }



  /**
   * Count Type RecipeCountOutputType
   */

  export type RecipeCountOutputType = {
    ingredients: number
    permissions: number
    instructions: number
  }

  export type RecipeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ingredients?: boolean | RecipeCountOutputTypeCountIngredientsArgs
    permissions?: boolean | RecipeCountOutputTypeCountPermissionsArgs
    instructions?: boolean | RecipeCountOutputTypeCountInstructionsArgs
  }

  // Custom InputTypes

  /**
   * RecipeCountOutputType without action
   */
  export type RecipeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeCountOutputType
     */
    select?: RecipeCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * RecipeCountOutputType without action
   */
  export type RecipeCountOutputTypeCountIngredientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeIngredientWhereInput
  }


  /**
   * RecipeCountOutputType without action
   */
  export type RecipeCountOutputTypeCountPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipePermissionWhereInput
  }


  /**
   * RecipeCountOutputType without action
   */
  export type RecipeCountOutputTypeCountInstructionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InstructionWhereInput
  }



  /**
   * Count Type IngredientCountOutputType
   */

  export type IngredientCountOutputType = {
    recipes: number
  }

  export type IngredientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipes?: boolean | IngredientCountOutputTypeCountRecipesArgs
  }

  // Custom InputTypes

  /**
   * IngredientCountOutputType without action
   */
  export type IngredientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IngredientCountOutputType
     */
    select?: IngredientCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * IngredientCountOutputType without action
   */
  export type IngredientCountOutputTypeCountRecipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeIngredientWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    password: string | null
    salt: string | null
    image: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    password: string | null
    salt: string | null
    image: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    username: number
    password: number
    salt: number
    image: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    salt?: true
    image?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    salt?: true
    image?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    salt?: true
    image?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    username: string
    password: string
    salt: string
    image: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    salt?: boolean
    image?: boolean
    recipes?: boolean | User$recipesArgs<ExtArgs>
    connectedWith?: boolean | User$connectedWithArgs<ExtArgs>
    connectedBy?: boolean | User$connectedByArgs<ExtArgs>
    permissions?: boolean | User$permissionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    salt?: boolean
    image?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipes?: boolean | User$recipesArgs<ExtArgs>
    connectedWith?: boolean | User$connectedWithArgs<ExtArgs>
    connectedBy?: boolean | User$connectedByArgs<ExtArgs>
    permissions?: boolean | User$permissionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      recipes: Prisma.$RecipePayload<ExtArgs>[]
      connectedWith: Prisma.$ConnectionPayload<ExtArgs>[]
      connectedBy: Prisma.$ConnectionPayload<ExtArgs>[]
      permissions: Prisma.$RecipePermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      username: string
      password: string
      salt: string
      image: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    recipes<T extends User$recipesArgs<ExtArgs> = {}>(args?: Subset<T, User$recipesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, 'findMany'> | Null>;

    connectedWith<T extends User$connectedWithArgs<ExtArgs> = {}>(args?: Subset<T, User$connectedWithArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, 'findMany'> | Null>;

    connectedBy<T extends User$connectedByArgs<ExtArgs> = {}>(args?: Subset<T, User$connectedByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, 'findMany'> | Null>;

    permissions<T extends User$permissionsArgs<ExtArgs> = {}>(args?: Subset<T, User$permissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipePermissionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly salt: FieldRef<"User", 'String'>
    readonly image: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.recipes
   */
  export type User$recipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipeInclude<ExtArgs> | null
    where?: RecipeWhereInput
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    cursor?: RecipeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecipeScalarFieldEnum | RecipeScalarFieldEnum[]
  }


  /**
   * User.connectedWith
   */
  export type User$connectedWithArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConnectionInclude<ExtArgs> | null
    where?: ConnectionWhereInput
    orderBy?: ConnectionOrderByWithRelationInput | ConnectionOrderByWithRelationInput[]
    cursor?: ConnectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConnectionScalarFieldEnum | ConnectionScalarFieldEnum[]
  }


  /**
   * User.connectedBy
   */
  export type User$connectedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConnectionInclude<ExtArgs> | null
    where?: ConnectionWhereInput
    orderBy?: ConnectionOrderByWithRelationInput | ConnectionOrderByWithRelationInput[]
    cursor?: ConnectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConnectionScalarFieldEnum | ConnectionScalarFieldEnum[]
  }


  /**
   * User.permissions
   */
  export type User$permissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipePermission
     */
    select?: RecipePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipePermissionInclude<ExtArgs> | null
    where?: RecipePermissionWhereInput
    orderBy?: RecipePermissionOrderByWithRelationInput | RecipePermissionOrderByWithRelationInput[]
    cursor?: RecipePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecipePermissionScalarFieldEnum | RecipePermissionScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Recipe
   */

  export type AggregateRecipe = {
    _count: RecipeCountAggregateOutputType | null
    _min: RecipeMinAggregateOutputType | null
    _max: RecipeMaxAggregateOutputType | null
  }

  export type RecipeMinAggregateOutputType = {
    id: string | null
    createdOn: Date | null
    updatedAt: Date | null
    title: string | null
    authorId: string | null
    description: string | null
    image: string | null
  }

  export type RecipeMaxAggregateOutputType = {
    id: string | null
    createdOn: Date | null
    updatedAt: Date | null
    title: string | null
    authorId: string | null
    description: string | null
    image: string | null
  }

  export type RecipeCountAggregateOutputType = {
    id: number
    createdOn: number
    updatedAt: number
    title: number
    authorId: number
    description: number
    image: number
    _all: number
  }


  export type RecipeMinAggregateInputType = {
    id?: true
    createdOn?: true
    updatedAt?: true
    title?: true
    authorId?: true
    description?: true
    image?: true
  }

  export type RecipeMaxAggregateInputType = {
    id?: true
    createdOn?: true
    updatedAt?: true
    title?: true
    authorId?: true
    description?: true
    image?: true
  }

  export type RecipeCountAggregateInputType = {
    id?: true
    createdOn?: true
    updatedAt?: true
    title?: true
    authorId?: true
    description?: true
    image?: true
    _all?: true
  }

  export type RecipeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recipe to aggregate.
     */
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recipes
    **/
    _count?: true | RecipeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecipeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecipeMaxAggregateInputType
  }

  export type GetRecipeAggregateType<T extends RecipeAggregateArgs> = {
        [P in keyof T & keyof AggregateRecipe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecipe[P]>
      : GetScalarType<T[P], AggregateRecipe[P]>
  }




  export type RecipeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeWhereInput
    orderBy?: RecipeOrderByWithAggregationInput | RecipeOrderByWithAggregationInput[]
    by: RecipeScalarFieldEnum[] | RecipeScalarFieldEnum
    having?: RecipeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecipeCountAggregateInputType | true
    _min?: RecipeMinAggregateInputType
    _max?: RecipeMaxAggregateInputType
  }

  export type RecipeGroupByOutputType = {
    id: string
    createdOn: Date | null
    updatedAt: Date | null
    title: string
    authorId: string
    description: string | null
    image: string | null
    _count: RecipeCountAggregateOutputType | null
    _min: RecipeMinAggregateOutputType | null
    _max: RecipeMaxAggregateOutputType | null
  }

  type GetRecipeGroupByPayload<T extends RecipeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecipeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecipeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecipeGroupByOutputType[P]>
            : GetScalarType<T[P], RecipeGroupByOutputType[P]>
        }
      >
    >


  export type RecipeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdOn?: boolean
    updatedAt?: boolean
    title?: boolean
    authorId?: boolean
    description?: boolean
    image?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    ingredients?: boolean | Recipe$ingredientsArgs<ExtArgs>
    permissions?: boolean | Recipe$permissionsArgs<ExtArgs>
    instructions?: boolean | Recipe$instructionsArgs<ExtArgs>
    _count?: boolean | RecipeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recipe"]>

  export type RecipeSelectScalar = {
    id?: boolean
    createdOn?: boolean
    updatedAt?: boolean
    title?: boolean
    authorId?: boolean
    description?: boolean
    image?: boolean
  }

  export type RecipeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    ingredients?: boolean | Recipe$ingredientsArgs<ExtArgs>
    permissions?: boolean | Recipe$permissionsArgs<ExtArgs>
    instructions?: boolean | Recipe$instructionsArgs<ExtArgs>
    _count?: boolean | RecipeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $RecipePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Recipe"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
      ingredients: Prisma.$RecipeIngredientPayload<ExtArgs>[]
      permissions: Prisma.$RecipePermissionPayload<ExtArgs>[]
      instructions: Prisma.$InstructionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdOn: Date | null
      updatedAt: Date | null
      title: string
      authorId: string
      description: string | null
      image: string | null
    }, ExtArgs["result"]["recipe"]>
    composites: {}
  }


  type RecipeGetPayload<S extends boolean | null | undefined | RecipeDefaultArgs> = $Result.GetResult<Prisma.$RecipePayload, S>

  type RecipeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RecipeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RecipeCountAggregateInputType | true
    }

  export interface RecipeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Recipe'], meta: { name: 'Recipe' } }
    /**
     * Find zero or one Recipe that matches the filter.
     * @param {RecipeFindUniqueArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RecipeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RecipeFindUniqueArgs<ExtArgs>>
    ): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Recipe that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RecipeFindUniqueOrThrowArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RecipeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RecipeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Recipe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeFindFirstArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RecipeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RecipeFindFirstArgs<ExtArgs>>
    ): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Recipe that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeFindFirstOrThrowArgs} args - Arguments to find a Recipe
     * @example
     * // Get one Recipe
     * const recipe = await prisma.recipe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RecipeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RecipeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Recipes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recipes
     * const recipes = await prisma.recipe.findMany()
     * 
     * // Get first 10 Recipes
     * const recipes = await prisma.recipe.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recipeWithIdOnly = await prisma.recipe.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RecipeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RecipeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Recipe.
     * @param {RecipeCreateArgs} args - Arguments to create a Recipe.
     * @example
     * // Create one Recipe
     * const Recipe = await prisma.recipe.create({
     *   data: {
     *     // ... data to create a Recipe
     *   }
     * })
     * 
    **/
    create<T extends RecipeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RecipeCreateArgs<ExtArgs>>
    ): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Recipes.
     *     @param {RecipeCreateManyArgs} args - Arguments to create many Recipes.
     *     @example
     *     // Create many Recipes
     *     const recipe = await prisma.recipe.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RecipeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RecipeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Recipe.
     * @param {RecipeDeleteArgs} args - Arguments to delete one Recipe.
     * @example
     * // Delete one Recipe
     * const Recipe = await prisma.recipe.delete({
     *   where: {
     *     // ... filter to delete one Recipe
     *   }
     * })
     * 
    **/
    delete<T extends RecipeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RecipeDeleteArgs<ExtArgs>>
    ): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Recipe.
     * @param {RecipeUpdateArgs} args - Arguments to update one Recipe.
     * @example
     * // Update one Recipe
     * const recipe = await prisma.recipe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RecipeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RecipeUpdateArgs<ExtArgs>>
    ): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Recipes.
     * @param {RecipeDeleteManyArgs} args - Arguments to filter Recipes to delete.
     * @example
     * // Delete a few Recipes
     * const { count } = await prisma.recipe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RecipeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RecipeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recipes
     * const recipe = await prisma.recipe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RecipeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RecipeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Recipe.
     * @param {RecipeUpsertArgs} args - Arguments to update or create a Recipe.
     * @example
     * // Update or create a Recipe
     * const recipe = await prisma.recipe.upsert({
     *   create: {
     *     // ... data to create a Recipe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recipe we want to update
     *   }
     * })
    **/
    upsert<T extends RecipeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RecipeUpsertArgs<ExtArgs>>
    ): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Recipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeCountArgs} args - Arguments to filter Recipes to count.
     * @example
     * // Count the number of Recipes
     * const count = await prisma.recipe.count({
     *   where: {
     *     // ... the filter for the Recipes we want to count
     *   }
     * })
    **/
    count<T extends RecipeCountArgs>(
      args?: Subset<T, RecipeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecipeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecipeAggregateArgs>(args: Subset<T, RecipeAggregateArgs>): Prisma.PrismaPromise<GetRecipeAggregateType<T>>

    /**
     * Group by Recipe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecipeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecipeGroupByArgs['orderBy'] }
        : { orderBy?: RecipeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecipeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecipeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Recipe model
   */
  readonly fields: RecipeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Recipe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecipeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    ingredients<T extends Recipe$ingredientsArgs<ExtArgs> = {}>(args?: Subset<T, Recipe$ingredientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, 'findMany'> | Null>;

    permissions<T extends Recipe$permissionsArgs<ExtArgs> = {}>(args?: Subset<T, Recipe$permissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipePermissionPayload<ExtArgs>, T, 'findMany'> | Null>;

    instructions<T extends Recipe$instructionsArgs<ExtArgs> = {}>(args?: Subset<T, Recipe$instructionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstructionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Recipe model
   */ 
  interface RecipeFieldRefs {
    readonly id: FieldRef<"Recipe", 'String'>
    readonly createdOn: FieldRef<"Recipe", 'DateTime'>
    readonly updatedAt: FieldRef<"Recipe", 'DateTime'>
    readonly title: FieldRef<"Recipe", 'String'>
    readonly authorId: FieldRef<"Recipe", 'String'>
    readonly description: FieldRef<"Recipe", 'String'>
    readonly image: FieldRef<"Recipe", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Recipe findUnique
   */
  export type RecipeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipe to fetch.
     */
    where: RecipeWhereUniqueInput
  }


  /**
   * Recipe findUniqueOrThrow
   */
  export type RecipeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipe to fetch.
     */
    where: RecipeWhereUniqueInput
  }


  /**
   * Recipe findFirst
   */
  export type RecipeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipe to fetch.
     */
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recipes.
     */
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recipes.
     */
    distinct?: RecipeScalarFieldEnum | RecipeScalarFieldEnum[]
  }


  /**
   * Recipe findFirstOrThrow
   */
  export type RecipeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipe to fetch.
     */
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recipes.
     */
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recipes.
     */
    distinct?: RecipeScalarFieldEnum | RecipeScalarFieldEnum[]
  }


  /**
   * Recipe findMany
   */
  export type RecipeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter, which Recipes to fetch.
     */
    where?: RecipeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipeOrderByWithRelationInput | RecipeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recipes.
     */
    cursor?: RecipeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    distinct?: RecipeScalarFieldEnum | RecipeScalarFieldEnum[]
  }


  /**
   * Recipe create
   */
  export type RecipeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * The data needed to create a Recipe.
     */
    data: XOR<RecipeCreateInput, RecipeUncheckedCreateInput>
  }


  /**
   * Recipe createMany
   */
  export type RecipeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Recipes.
     */
    data: RecipeCreateManyInput | RecipeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Recipe update
   */
  export type RecipeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * The data needed to update a Recipe.
     */
    data: XOR<RecipeUpdateInput, RecipeUncheckedUpdateInput>
    /**
     * Choose, which Recipe to update.
     */
    where: RecipeWhereUniqueInput
  }


  /**
   * Recipe updateMany
   */
  export type RecipeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Recipes.
     */
    data: XOR<RecipeUpdateManyMutationInput, RecipeUncheckedUpdateManyInput>
    /**
     * Filter which Recipes to update
     */
    where?: RecipeWhereInput
  }


  /**
   * Recipe upsert
   */
  export type RecipeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * The filter to search for the Recipe to update in case it exists.
     */
    where: RecipeWhereUniqueInput
    /**
     * In case the Recipe found by the `where` argument doesn't exist, create a new Recipe with this data.
     */
    create: XOR<RecipeCreateInput, RecipeUncheckedCreateInput>
    /**
     * In case the Recipe was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecipeUpdateInput, RecipeUncheckedUpdateInput>
  }


  /**
   * Recipe delete
   */
  export type RecipeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipeInclude<ExtArgs> | null
    /**
     * Filter which Recipe to delete.
     */
    where: RecipeWhereUniqueInput
  }


  /**
   * Recipe deleteMany
   */
  export type RecipeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recipes to delete
     */
    where?: RecipeWhereInput
  }


  /**
   * Recipe.ingredients
   */
  export type Recipe$ingredientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    where?: RecipeIngredientWhereInput
    orderBy?: RecipeIngredientOrderByWithRelationInput | RecipeIngredientOrderByWithRelationInput[]
    cursor?: RecipeIngredientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecipeIngredientScalarFieldEnum | RecipeIngredientScalarFieldEnum[]
  }


  /**
   * Recipe.permissions
   */
  export type Recipe$permissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipePermission
     */
    select?: RecipePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipePermissionInclude<ExtArgs> | null
    where?: RecipePermissionWhereInput
    orderBy?: RecipePermissionOrderByWithRelationInput | RecipePermissionOrderByWithRelationInput[]
    cursor?: RecipePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecipePermissionScalarFieldEnum | RecipePermissionScalarFieldEnum[]
  }


  /**
   * Recipe.instructions
   */
  export type Recipe$instructionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instruction
     */
    select?: InstructionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstructionInclude<ExtArgs> | null
    where?: InstructionWhereInput
    orderBy?: InstructionOrderByWithRelationInput | InstructionOrderByWithRelationInput[]
    cursor?: InstructionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InstructionScalarFieldEnum | InstructionScalarFieldEnum[]
  }


  /**
   * Recipe without action
   */
  export type RecipeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipe
     */
    select?: RecipeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipeInclude<ExtArgs> | null
  }



  /**
   * Model Ingredient
   */

  export type AggregateIngredient = {
    _count: IngredientCountAggregateOutputType | null
    _min: IngredientMinAggregateOutputType | null
    _max: IngredientMaxAggregateOutputType | null
  }

  export type IngredientMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type IngredientMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type IngredientCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type IngredientMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type IngredientMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type IngredientCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type IngredientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ingredient to aggregate.
     */
    where?: IngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     */
    orderBy?: IngredientOrderByWithRelationInput | IngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ingredients
    **/
    _count?: true | IngredientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IngredientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IngredientMaxAggregateInputType
  }

  export type GetIngredientAggregateType<T extends IngredientAggregateArgs> = {
        [P in keyof T & keyof AggregateIngredient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIngredient[P]>
      : GetScalarType<T[P], AggregateIngredient[P]>
  }




  export type IngredientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IngredientWhereInput
    orderBy?: IngredientOrderByWithAggregationInput | IngredientOrderByWithAggregationInput[]
    by: IngredientScalarFieldEnum[] | IngredientScalarFieldEnum
    having?: IngredientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IngredientCountAggregateInputType | true
    _min?: IngredientMinAggregateInputType
    _max?: IngredientMaxAggregateInputType
  }

  export type IngredientGroupByOutputType = {
    id: string
    name: string
    _count: IngredientCountAggregateOutputType | null
    _min: IngredientMinAggregateOutputType | null
    _max: IngredientMaxAggregateOutputType | null
  }

  type GetIngredientGroupByPayload<T extends IngredientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IngredientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IngredientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IngredientGroupByOutputType[P]>
            : GetScalarType<T[P], IngredientGroupByOutputType[P]>
        }
      >
    >


  export type IngredientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    recipes?: boolean | Ingredient$recipesArgs<ExtArgs>
    _count?: boolean | IngredientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ingredient"]>

  export type IngredientSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type IngredientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipes?: boolean | Ingredient$recipesArgs<ExtArgs>
    _count?: boolean | IngredientCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $IngredientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ingredient"
    objects: {
      recipes: Prisma.$RecipeIngredientPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
    }, ExtArgs["result"]["ingredient"]>
    composites: {}
  }


  type IngredientGetPayload<S extends boolean | null | undefined | IngredientDefaultArgs> = $Result.GetResult<Prisma.$IngredientPayload, S>

  type IngredientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<IngredientFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: IngredientCountAggregateInputType | true
    }

  export interface IngredientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ingredient'], meta: { name: 'Ingredient' } }
    /**
     * Find zero or one Ingredient that matches the filter.
     * @param {IngredientFindUniqueArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends IngredientFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, IngredientFindUniqueArgs<ExtArgs>>
    ): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Ingredient that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {IngredientFindUniqueOrThrowArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends IngredientFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, IngredientFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Ingredient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientFindFirstArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends IngredientFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, IngredientFindFirstArgs<ExtArgs>>
    ): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Ingredient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientFindFirstOrThrowArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends IngredientFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, IngredientFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Ingredients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ingredients
     * const ingredients = await prisma.ingredient.findMany()
     * 
     * // Get first 10 Ingredients
     * const ingredients = await prisma.ingredient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ingredientWithIdOnly = await prisma.ingredient.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends IngredientFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, IngredientFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Ingredient.
     * @param {IngredientCreateArgs} args - Arguments to create a Ingredient.
     * @example
     * // Create one Ingredient
     * const Ingredient = await prisma.ingredient.create({
     *   data: {
     *     // ... data to create a Ingredient
     *   }
     * })
     * 
    **/
    create<T extends IngredientCreateArgs<ExtArgs>>(
      args: SelectSubset<T, IngredientCreateArgs<ExtArgs>>
    ): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Ingredients.
     *     @param {IngredientCreateManyArgs} args - Arguments to create many Ingredients.
     *     @example
     *     // Create many Ingredients
     *     const ingredient = await prisma.ingredient.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends IngredientCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, IngredientCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Ingredient.
     * @param {IngredientDeleteArgs} args - Arguments to delete one Ingredient.
     * @example
     * // Delete one Ingredient
     * const Ingredient = await prisma.ingredient.delete({
     *   where: {
     *     // ... filter to delete one Ingredient
     *   }
     * })
     * 
    **/
    delete<T extends IngredientDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, IngredientDeleteArgs<ExtArgs>>
    ): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Ingredient.
     * @param {IngredientUpdateArgs} args - Arguments to update one Ingredient.
     * @example
     * // Update one Ingredient
     * const ingredient = await prisma.ingredient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends IngredientUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, IngredientUpdateArgs<ExtArgs>>
    ): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Ingredients.
     * @param {IngredientDeleteManyArgs} args - Arguments to filter Ingredients to delete.
     * @example
     * // Delete a few Ingredients
     * const { count } = await prisma.ingredient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends IngredientDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, IngredientDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ingredients
     * const ingredient = await prisma.ingredient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends IngredientUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, IngredientUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ingredient.
     * @param {IngredientUpsertArgs} args - Arguments to update or create a Ingredient.
     * @example
     * // Update or create a Ingredient
     * const ingredient = await prisma.ingredient.upsert({
     *   create: {
     *     // ... data to create a Ingredient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ingredient we want to update
     *   }
     * })
    **/
    upsert<T extends IngredientUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, IngredientUpsertArgs<ExtArgs>>
    ): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientCountArgs} args - Arguments to filter Ingredients to count.
     * @example
     * // Count the number of Ingredients
     * const count = await prisma.ingredient.count({
     *   where: {
     *     // ... the filter for the Ingredients we want to count
     *   }
     * })
    **/
    count<T extends IngredientCountArgs>(
      args?: Subset<T, IngredientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IngredientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ingredient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IngredientAggregateArgs>(args: Subset<T, IngredientAggregateArgs>): Prisma.PrismaPromise<GetIngredientAggregateType<T>>

    /**
     * Group by Ingredient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IngredientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IngredientGroupByArgs['orderBy'] }
        : { orderBy?: IngredientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IngredientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIngredientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ingredient model
   */
  readonly fields: IngredientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ingredient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IngredientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    recipes<T extends Ingredient$recipesArgs<ExtArgs> = {}>(args?: Subset<T, Ingredient$recipesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Ingredient model
   */ 
  interface IngredientFieldRefs {
    readonly id: FieldRef<"Ingredient", 'String'>
    readonly name: FieldRef<"Ingredient", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Ingredient findUnique
   */
  export type IngredientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * Filter, which Ingredient to fetch.
     */
    where: IngredientWhereUniqueInput
  }


  /**
   * Ingredient findUniqueOrThrow
   */
  export type IngredientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * Filter, which Ingredient to fetch.
     */
    where: IngredientWhereUniqueInput
  }


  /**
   * Ingredient findFirst
   */
  export type IngredientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * Filter, which Ingredient to fetch.
     */
    where?: IngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     */
    orderBy?: IngredientOrderByWithRelationInput | IngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ingredients.
     */
    cursor?: IngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ingredients.
     */
    distinct?: IngredientScalarFieldEnum | IngredientScalarFieldEnum[]
  }


  /**
   * Ingredient findFirstOrThrow
   */
  export type IngredientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * Filter, which Ingredient to fetch.
     */
    where?: IngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     */
    orderBy?: IngredientOrderByWithRelationInput | IngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ingredients.
     */
    cursor?: IngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ingredients.
     */
    distinct?: IngredientScalarFieldEnum | IngredientScalarFieldEnum[]
  }


  /**
   * Ingredient findMany
   */
  export type IngredientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * Filter, which Ingredients to fetch.
     */
    where?: IngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     */
    orderBy?: IngredientOrderByWithRelationInput | IngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ingredients.
     */
    cursor?: IngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     */
    skip?: number
    distinct?: IngredientScalarFieldEnum | IngredientScalarFieldEnum[]
  }


  /**
   * Ingredient create
   */
  export type IngredientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * The data needed to create a Ingredient.
     */
    data: XOR<IngredientCreateInput, IngredientUncheckedCreateInput>
  }


  /**
   * Ingredient createMany
   */
  export type IngredientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ingredients.
     */
    data: IngredientCreateManyInput | IngredientCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Ingredient update
   */
  export type IngredientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * The data needed to update a Ingredient.
     */
    data: XOR<IngredientUpdateInput, IngredientUncheckedUpdateInput>
    /**
     * Choose, which Ingredient to update.
     */
    where: IngredientWhereUniqueInput
  }


  /**
   * Ingredient updateMany
   */
  export type IngredientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ingredients.
     */
    data: XOR<IngredientUpdateManyMutationInput, IngredientUncheckedUpdateManyInput>
    /**
     * Filter which Ingredients to update
     */
    where?: IngredientWhereInput
  }


  /**
   * Ingredient upsert
   */
  export type IngredientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * The filter to search for the Ingredient to update in case it exists.
     */
    where: IngredientWhereUniqueInput
    /**
     * In case the Ingredient found by the `where` argument doesn't exist, create a new Ingredient with this data.
     */
    create: XOR<IngredientCreateInput, IngredientUncheckedCreateInput>
    /**
     * In case the Ingredient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IngredientUpdateInput, IngredientUncheckedUpdateInput>
  }


  /**
   * Ingredient delete
   */
  export type IngredientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * Filter which Ingredient to delete.
     */
    where: IngredientWhereUniqueInput
  }


  /**
   * Ingredient deleteMany
   */
  export type IngredientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ingredients to delete
     */
    where?: IngredientWhereInput
  }


  /**
   * Ingredient.recipes
   */
  export type Ingredient$recipesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    where?: RecipeIngredientWhereInput
    orderBy?: RecipeIngredientOrderByWithRelationInput | RecipeIngredientOrderByWithRelationInput[]
    cursor?: RecipeIngredientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecipeIngredientScalarFieldEnum | RecipeIngredientScalarFieldEnum[]
  }


  /**
   * Ingredient without action
   */
  export type IngredientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: IngredientInclude<ExtArgs> | null
  }



  /**
   * Model RecipeIngredient
   */

  export type AggregateRecipeIngredient = {
    _count: RecipeIngredientCountAggregateOutputType | null
    _avg: RecipeIngredientAvgAggregateOutputType | null
    _sum: RecipeIngredientSumAggregateOutputType | null
    _min: RecipeIngredientMinAggregateOutputType | null
    _max: RecipeIngredientMaxAggregateOutputType | null
  }

  export type RecipeIngredientAvgAggregateOutputType = {
    quantity: number | null
  }

  export type RecipeIngredientSumAggregateOutputType = {
    quantity: number | null
  }

  export type RecipeIngredientMinAggregateOutputType = {
    recipeId: string | null
    ingredientId: string | null
    quantity: number | null
    unit: $Enums.IngreidentUnit | null
  }

  export type RecipeIngredientMaxAggregateOutputType = {
    recipeId: string | null
    ingredientId: string | null
    quantity: number | null
    unit: $Enums.IngreidentUnit | null
  }

  export type RecipeIngredientCountAggregateOutputType = {
    recipeId: number
    ingredientId: number
    quantity: number
    unit: number
    _all: number
  }


  export type RecipeIngredientAvgAggregateInputType = {
    quantity?: true
  }

  export type RecipeIngredientSumAggregateInputType = {
    quantity?: true
  }

  export type RecipeIngredientMinAggregateInputType = {
    recipeId?: true
    ingredientId?: true
    quantity?: true
    unit?: true
  }

  export type RecipeIngredientMaxAggregateInputType = {
    recipeId?: true
    ingredientId?: true
    quantity?: true
    unit?: true
  }

  export type RecipeIngredientCountAggregateInputType = {
    recipeId?: true
    ingredientId?: true
    quantity?: true
    unit?: true
    _all?: true
  }

  export type RecipeIngredientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RecipeIngredient to aggregate.
     */
    where?: RecipeIngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeIngredients to fetch.
     */
    orderBy?: RecipeIngredientOrderByWithRelationInput | RecipeIngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecipeIngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeIngredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeIngredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RecipeIngredients
    **/
    _count?: true | RecipeIngredientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecipeIngredientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecipeIngredientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecipeIngredientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecipeIngredientMaxAggregateInputType
  }

  export type GetRecipeIngredientAggregateType<T extends RecipeIngredientAggregateArgs> = {
        [P in keyof T & keyof AggregateRecipeIngredient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecipeIngredient[P]>
      : GetScalarType<T[P], AggregateRecipeIngredient[P]>
  }




  export type RecipeIngredientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipeIngredientWhereInput
    orderBy?: RecipeIngredientOrderByWithAggregationInput | RecipeIngredientOrderByWithAggregationInput[]
    by: RecipeIngredientScalarFieldEnum[] | RecipeIngredientScalarFieldEnum
    having?: RecipeIngredientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecipeIngredientCountAggregateInputType | true
    _avg?: RecipeIngredientAvgAggregateInputType
    _sum?: RecipeIngredientSumAggregateInputType
    _min?: RecipeIngredientMinAggregateInputType
    _max?: RecipeIngredientMaxAggregateInputType
  }

  export type RecipeIngredientGroupByOutputType = {
    recipeId: string
    ingredientId: string
    quantity: number
    unit: $Enums.IngreidentUnit | null
    _count: RecipeIngredientCountAggregateOutputType | null
    _avg: RecipeIngredientAvgAggregateOutputType | null
    _sum: RecipeIngredientSumAggregateOutputType | null
    _min: RecipeIngredientMinAggregateOutputType | null
    _max: RecipeIngredientMaxAggregateOutputType | null
  }

  type GetRecipeIngredientGroupByPayload<T extends RecipeIngredientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecipeIngredientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecipeIngredientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecipeIngredientGroupByOutputType[P]>
            : GetScalarType<T[P], RecipeIngredientGroupByOutputType[P]>
        }
      >
    >


  export type RecipeIngredientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    recipeId?: boolean
    ingredientId?: boolean
    quantity?: boolean
    unit?: boolean
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    ingredient?: boolean | IngredientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recipeIngredient"]>

  export type RecipeIngredientSelectScalar = {
    recipeId?: boolean
    ingredientId?: boolean
    quantity?: boolean
    unit?: boolean
  }

  export type RecipeIngredientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    ingredient?: boolean | IngredientDefaultArgs<ExtArgs>
  }


  export type $RecipeIngredientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RecipeIngredient"
    objects: {
      recipe: Prisma.$RecipePayload<ExtArgs>
      ingredient: Prisma.$IngredientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      recipeId: string
      ingredientId: string
      quantity: number
      unit: $Enums.IngreidentUnit | null
    }, ExtArgs["result"]["recipeIngredient"]>
    composites: {}
  }


  type RecipeIngredientGetPayload<S extends boolean | null | undefined | RecipeIngredientDefaultArgs> = $Result.GetResult<Prisma.$RecipeIngredientPayload, S>

  type RecipeIngredientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RecipeIngredientFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RecipeIngredientCountAggregateInputType | true
    }

  export interface RecipeIngredientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RecipeIngredient'], meta: { name: 'RecipeIngredient' } }
    /**
     * Find zero or one RecipeIngredient that matches the filter.
     * @param {RecipeIngredientFindUniqueArgs} args - Arguments to find a RecipeIngredient
     * @example
     * // Get one RecipeIngredient
     * const recipeIngredient = await prisma.recipeIngredient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RecipeIngredientFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RecipeIngredientFindUniqueArgs<ExtArgs>>
    ): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one RecipeIngredient that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RecipeIngredientFindUniqueOrThrowArgs} args - Arguments to find a RecipeIngredient
     * @example
     * // Get one RecipeIngredient
     * const recipeIngredient = await prisma.recipeIngredient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RecipeIngredientFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RecipeIngredientFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first RecipeIngredient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeIngredientFindFirstArgs} args - Arguments to find a RecipeIngredient
     * @example
     * // Get one RecipeIngredient
     * const recipeIngredient = await prisma.recipeIngredient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RecipeIngredientFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RecipeIngredientFindFirstArgs<ExtArgs>>
    ): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first RecipeIngredient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeIngredientFindFirstOrThrowArgs} args - Arguments to find a RecipeIngredient
     * @example
     * // Get one RecipeIngredient
     * const recipeIngredient = await prisma.recipeIngredient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RecipeIngredientFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RecipeIngredientFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more RecipeIngredients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeIngredientFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RecipeIngredients
     * const recipeIngredients = await prisma.recipeIngredient.findMany()
     * 
     * // Get first 10 RecipeIngredients
     * const recipeIngredients = await prisma.recipeIngredient.findMany({ take: 10 })
     * 
     * // Only select the `recipeId`
     * const recipeIngredientWithRecipeIdOnly = await prisma.recipeIngredient.findMany({ select: { recipeId: true } })
     * 
    **/
    findMany<T extends RecipeIngredientFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RecipeIngredientFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a RecipeIngredient.
     * @param {RecipeIngredientCreateArgs} args - Arguments to create a RecipeIngredient.
     * @example
     * // Create one RecipeIngredient
     * const RecipeIngredient = await prisma.recipeIngredient.create({
     *   data: {
     *     // ... data to create a RecipeIngredient
     *   }
     * })
     * 
    **/
    create<T extends RecipeIngredientCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RecipeIngredientCreateArgs<ExtArgs>>
    ): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many RecipeIngredients.
     *     @param {RecipeIngredientCreateManyArgs} args - Arguments to create many RecipeIngredients.
     *     @example
     *     // Create many RecipeIngredients
     *     const recipeIngredient = await prisma.recipeIngredient.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RecipeIngredientCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RecipeIngredientCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RecipeIngredient.
     * @param {RecipeIngredientDeleteArgs} args - Arguments to delete one RecipeIngredient.
     * @example
     * // Delete one RecipeIngredient
     * const RecipeIngredient = await prisma.recipeIngredient.delete({
     *   where: {
     *     // ... filter to delete one RecipeIngredient
     *   }
     * })
     * 
    **/
    delete<T extends RecipeIngredientDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RecipeIngredientDeleteArgs<ExtArgs>>
    ): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one RecipeIngredient.
     * @param {RecipeIngredientUpdateArgs} args - Arguments to update one RecipeIngredient.
     * @example
     * // Update one RecipeIngredient
     * const recipeIngredient = await prisma.recipeIngredient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RecipeIngredientUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RecipeIngredientUpdateArgs<ExtArgs>>
    ): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more RecipeIngredients.
     * @param {RecipeIngredientDeleteManyArgs} args - Arguments to filter RecipeIngredients to delete.
     * @example
     * // Delete a few RecipeIngredients
     * const { count } = await prisma.recipeIngredient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RecipeIngredientDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RecipeIngredientDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RecipeIngredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeIngredientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RecipeIngredients
     * const recipeIngredient = await prisma.recipeIngredient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RecipeIngredientUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RecipeIngredientUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RecipeIngredient.
     * @param {RecipeIngredientUpsertArgs} args - Arguments to update or create a RecipeIngredient.
     * @example
     * // Update or create a RecipeIngredient
     * const recipeIngredient = await prisma.recipeIngredient.upsert({
     *   create: {
     *     // ... data to create a RecipeIngredient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RecipeIngredient we want to update
     *   }
     * })
    **/
    upsert<T extends RecipeIngredientUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RecipeIngredientUpsertArgs<ExtArgs>>
    ): Prisma__RecipeIngredientClient<$Result.GetResult<Prisma.$RecipeIngredientPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of RecipeIngredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeIngredientCountArgs} args - Arguments to filter RecipeIngredients to count.
     * @example
     * // Count the number of RecipeIngredients
     * const count = await prisma.recipeIngredient.count({
     *   where: {
     *     // ... the filter for the RecipeIngredients we want to count
     *   }
     * })
    **/
    count<T extends RecipeIngredientCountArgs>(
      args?: Subset<T, RecipeIngredientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecipeIngredientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RecipeIngredient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeIngredientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecipeIngredientAggregateArgs>(args: Subset<T, RecipeIngredientAggregateArgs>): Prisma.PrismaPromise<GetRecipeIngredientAggregateType<T>>

    /**
     * Group by RecipeIngredient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeIngredientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecipeIngredientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecipeIngredientGroupByArgs['orderBy'] }
        : { orderBy?: RecipeIngredientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecipeIngredientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecipeIngredientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RecipeIngredient model
   */
  readonly fields: RecipeIngredientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RecipeIngredient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecipeIngredientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    recipe<T extends RecipeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RecipeDefaultArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    ingredient<T extends IngredientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, IngredientDefaultArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the RecipeIngredient model
   */ 
  interface RecipeIngredientFieldRefs {
    readonly recipeId: FieldRef<"RecipeIngredient", 'String'>
    readonly ingredientId: FieldRef<"RecipeIngredient", 'String'>
    readonly quantity: FieldRef<"RecipeIngredient", 'Int'>
    readonly unit: FieldRef<"RecipeIngredient", 'IngreidentUnit'>
  }
    

  // Custom InputTypes

  /**
   * RecipeIngredient findUnique
   */
  export type RecipeIngredientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * Filter, which RecipeIngredient to fetch.
     */
    where: RecipeIngredientWhereUniqueInput
  }


  /**
   * RecipeIngredient findUniqueOrThrow
   */
  export type RecipeIngredientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * Filter, which RecipeIngredient to fetch.
     */
    where: RecipeIngredientWhereUniqueInput
  }


  /**
   * RecipeIngredient findFirst
   */
  export type RecipeIngredientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * Filter, which RecipeIngredient to fetch.
     */
    where?: RecipeIngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeIngredients to fetch.
     */
    orderBy?: RecipeIngredientOrderByWithRelationInput | RecipeIngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RecipeIngredients.
     */
    cursor?: RecipeIngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeIngredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeIngredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RecipeIngredients.
     */
    distinct?: RecipeIngredientScalarFieldEnum | RecipeIngredientScalarFieldEnum[]
  }


  /**
   * RecipeIngredient findFirstOrThrow
   */
  export type RecipeIngredientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * Filter, which RecipeIngredient to fetch.
     */
    where?: RecipeIngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeIngredients to fetch.
     */
    orderBy?: RecipeIngredientOrderByWithRelationInput | RecipeIngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RecipeIngredients.
     */
    cursor?: RecipeIngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeIngredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeIngredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RecipeIngredients.
     */
    distinct?: RecipeIngredientScalarFieldEnum | RecipeIngredientScalarFieldEnum[]
  }


  /**
   * RecipeIngredient findMany
   */
  export type RecipeIngredientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * Filter, which RecipeIngredients to fetch.
     */
    where?: RecipeIngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipeIngredients to fetch.
     */
    orderBy?: RecipeIngredientOrderByWithRelationInput | RecipeIngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RecipeIngredients.
     */
    cursor?: RecipeIngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipeIngredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipeIngredients.
     */
    skip?: number
    distinct?: RecipeIngredientScalarFieldEnum | RecipeIngredientScalarFieldEnum[]
  }


  /**
   * RecipeIngredient create
   */
  export type RecipeIngredientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * The data needed to create a RecipeIngredient.
     */
    data: XOR<RecipeIngredientCreateInput, RecipeIngredientUncheckedCreateInput>
  }


  /**
   * RecipeIngredient createMany
   */
  export type RecipeIngredientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RecipeIngredients.
     */
    data: RecipeIngredientCreateManyInput | RecipeIngredientCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * RecipeIngredient update
   */
  export type RecipeIngredientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * The data needed to update a RecipeIngredient.
     */
    data: XOR<RecipeIngredientUpdateInput, RecipeIngredientUncheckedUpdateInput>
    /**
     * Choose, which RecipeIngredient to update.
     */
    where: RecipeIngredientWhereUniqueInput
  }


  /**
   * RecipeIngredient updateMany
   */
  export type RecipeIngredientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RecipeIngredients.
     */
    data: XOR<RecipeIngredientUpdateManyMutationInput, RecipeIngredientUncheckedUpdateManyInput>
    /**
     * Filter which RecipeIngredients to update
     */
    where?: RecipeIngredientWhereInput
  }


  /**
   * RecipeIngredient upsert
   */
  export type RecipeIngredientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * The filter to search for the RecipeIngredient to update in case it exists.
     */
    where: RecipeIngredientWhereUniqueInput
    /**
     * In case the RecipeIngredient found by the `where` argument doesn't exist, create a new RecipeIngredient with this data.
     */
    create: XOR<RecipeIngredientCreateInput, RecipeIngredientUncheckedCreateInput>
    /**
     * In case the RecipeIngredient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecipeIngredientUpdateInput, RecipeIngredientUncheckedUpdateInput>
  }


  /**
   * RecipeIngredient delete
   */
  export type RecipeIngredientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
    /**
     * Filter which RecipeIngredient to delete.
     */
    where: RecipeIngredientWhereUniqueInput
  }


  /**
   * RecipeIngredient deleteMany
   */
  export type RecipeIngredientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RecipeIngredients to delete
     */
    where?: RecipeIngredientWhereInput
  }


  /**
   * RecipeIngredient without action
   */
  export type RecipeIngredientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipeIngredient
     */
    select?: RecipeIngredientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipeIngredientInclude<ExtArgs> | null
  }



  /**
   * Model Connection
   */

  export type AggregateConnection = {
    _count: ConnectionCountAggregateOutputType | null
    _min: ConnectionMinAggregateOutputType | null
    _max: ConnectionMaxAggregateOutputType | null
  }

  export type ConnectionMinAggregateOutputType = {
    connectedWithId: string | null
    connectedById: string | null
    accepted: boolean | null
  }

  export type ConnectionMaxAggregateOutputType = {
    connectedWithId: string | null
    connectedById: string | null
    accepted: boolean | null
  }

  export type ConnectionCountAggregateOutputType = {
    connectedWithId: number
    connectedById: number
    accepted: number
    _all: number
  }


  export type ConnectionMinAggregateInputType = {
    connectedWithId?: true
    connectedById?: true
    accepted?: true
  }

  export type ConnectionMaxAggregateInputType = {
    connectedWithId?: true
    connectedById?: true
    accepted?: true
  }

  export type ConnectionCountAggregateInputType = {
    connectedWithId?: true
    connectedById?: true
    accepted?: true
    _all?: true
  }

  export type ConnectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Connection to aggregate.
     */
    where?: ConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Connections to fetch.
     */
    orderBy?: ConnectionOrderByWithRelationInput | ConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Connections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Connections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Connections
    **/
    _count?: true | ConnectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConnectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConnectionMaxAggregateInputType
  }

  export type GetConnectionAggregateType<T extends ConnectionAggregateArgs> = {
        [P in keyof T & keyof AggregateConnection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConnection[P]>
      : GetScalarType<T[P], AggregateConnection[P]>
  }




  export type ConnectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConnectionWhereInput
    orderBy?: ConnectionOrderByWithAggregationInput | ConnectionOrderByWithAggregationInput[]
    by: ConnectionScalarFieldEnum[] | ConnectionScalarFieldEnum
    having?: ConnectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConnectionCountAggregateInputType | true
    _min?: ConnectionMinAggregateInputType
    _max?: ConnectionMaxAggregateInputType
  }

  export type ConnectionGroupByOutputType = {
    connectedWithId: string
    connectedById: string
    accepted: boolean
    _count: ConnectionCountAggregateOutputType | null
    _min: ConnectionMinAggregateOutputType | null
    _max: ConnectionMaxAggregateOutputType | null
  }

  type GetConnectionGroupByPayload<T extends ConnectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConnectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConnectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConnectionGroupByOutputType[P]>
            : GetScalarType<T[P], ConnectionGroupByOutputType[P]>
        }
      >
    >


  export type ConnectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    connectedWithId?: boolean
    connectedById?: boolean
    accepted?: boolean
    connectedWith?: boolean | UserDefaultArgs<ExtArgs>
    connectedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["connection"]>

  export type ConnectionSelectScalar = {
    connectedWithId?: boolean
    connectedById?: boolean
    accepted?: boolean
  }

  export type ConnectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    connectedWith?: boolean | UserDefaultArgs<ExtArgs>
    connectedBy?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $ConnectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Connection"
    objects: {
      connectedWith: Prisma.$UserPayload<ExtArgs>
      connectedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      connectedWithId: string
      connectedById: string
      accepted: boolean
    }, ExtArgs["result"]["connection"]>
    composites: {}
  }


  type ConnectionGetPayload<S extends boolean | null | undefined | ConnectionDefaultArgs> = $Result.GetResult<Prisma.$ConnectionPayload, S>

  type ConnectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ConnectionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ConnectionCountAggregateInputType | true
    }

  export interface ConnectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Connection'], meta: { name: 'Connection' } }
    /**
     * Find zero or one Connection that matches the filter.
     * @param {ConnectionFindUniqueArgs} args - Arguments to find a Connection
     * @example
     * // Get one Connection
     * const connection = await prisma.connection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ConnectionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ConnectionFindUniqueArgs<ExtArgs>>
    ): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Connection that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ConnectionFindUniqueOrThrowArgs} args - Arguments to find a Connection
     * @example
     * // Get one Connection
     * const connection = await prisma.connection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ConnectionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ConnectionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Connection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnectionFindFirstArgs} args - Arguments to find a Connection
     * @example
     * // Get one Connection
     * const connection = await prisma.connection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ConnectionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ConnectionFindFirstArgs<ExtArgs>>
    ): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Connection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnectionFindFirstOrThrowArgs} args - Arguments to find a Connection
     * @example
     * // Get one Connection
     * const connection = await prisma.connection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ConnectionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ConnectionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Connections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnectionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Connections
     * const connections = await prisma.connection.findMany()
     * 
     * // Get first 10 Connections
     * const connections = await prisma.connection.findMany({ take: 10 })
     * 
     * // Only select the `connectedWithId`
     * const connectionWithConnectedWithIdOnly = await prisma.connection.findMany({ select: { connectedWithId: true } })
     * 
    **/
    findMany<T extends ConnectionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConnectionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Connection.
     * @param {ConnectionCreateArgs} args - Arguments to create a Connection.
     * @example
     * // Create one Connection
     * const Connection = await prisma.connection.create({
     *   data: {
     *     // ... data to create a Connection
     *   }
     * })
     * 
    **/
    create<T extends ConnectionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ConnectionCreateArgs<ExtArgs>>
    ): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Connections.
     *     @param {ConnectionCreateManyArgs} args - Arguments to create many Connections.
     *     @example
     *     // Create many Connections
     *     const connection = await prisma.connection.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ConnectionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConnectionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Connection.
     * @param {ConnectionDeleteArgs} args - Arguments to delete one Connection.
     * @example
     * // Delete one Connection
     * const Connection = await prisma.connection.delete({
     *   where: {
     *     // ... filter to delete one Connection
     *   }
     * })
     * 
    **/
    delete<T extends ConnectionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ConnectionDeleteArgs<ExtArgs>>
    ): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Connection.
     * @param {ConnectionUpdateArgs} args - Arguments to update one Connection.
     * @example
     * // Update one Connection
     * const connection = await prisma.connection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ConnectionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ConnectionUpdateArgs<ExtArgs>>
    ): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Connections.
     * @param {ConnectionDeleteManyArgs} args - Arguments to filter Connections to delete.
     * @example
     * // Delete a few Connections
     * const { count } = await prisma.connection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ConnectionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConnectionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Connections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Connections
     * const connection = await prisma.connection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ConnectionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ConnectionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Connection.
     * @param {ConnectionUpsertArgs} args - Arguments to update or create a Connection.
     * @example
     * // Update or create a Connection
     * const connection = await prisma.connection.upsert({
     *   create: {
     *     // ... data to create a Connection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Connection we want to update
     *   }
     * })
    **/
    upsert<T extends ConnectionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ConnectionUpsertArgs<ExtArgs>>
    ): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Connections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnectionCountArgs} args - Arguments to filter Connections to count.
     * @example
     * // Count the number of Connections
     * const count = await prisma.connection.count({
     *   where: {
     *     // ... the filter for the Connections we want to count
     *   }
     * })
    **/
    count<T extends ConnectionCountArgs>(
      args?: Subset<T, ConnectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConnectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Connection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConnectionAggregateArgs>(args: Subset<T, ConnectionAggregateArgs>): Prisma.PrismaPromise<GetConnectionAggregateType<T>>

    /**
     * Group by Connection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConnectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConnectionGroupByArgs['orderBy'] }
        : { orderBy?: ConnectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConnectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConnectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Connection model
   */
  readonly fields: ConnectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Connection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConnectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    connectedWith<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    connectedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Connection model
   */ 
  interface ConnectionFieldRefs {
    readonly connectedWithId: FieldRef<"Connection", 'String'>
    readonly connectedById: FieldRef<"Connection", 'String'>
    readonly accepted: FieldRef<"Connection", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Connection findUnique
   */
  export type ConnectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConnectionInclude<ExtArgs> | null
    /**
     * Filter, which Connection to fetch.
     */
    where: ConnectionWhereUniqueInput
  }


  /**
   * Connection findUniqueOrThrow
   */
  export type ConnectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConnectionInclude<ExtArgs> | null
    /**
     * Filter, which Connection to fetch.
     */
    where: ConnectionWhereUniqueInput
  }


  /**
   * Connection findFirst
   */
  export type ConnectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConnectionInclude<ExtArgs> | null
    /**
     * Filter, which Connection to fetch.
     */
    where?: ConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Connections to fetch.
     */
    orderBy?: ConnectionOrderByWithRelationInput | ConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Connections.
     */
    cursor?: ConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Connections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Connections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Connections.
     */
    distinct?: ConnectionScalarFieldEnum | ConnectionScalarFieldEnum[]
  }


  /**
   * Connection findFirstOrThrow
   */
  export type ConnectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConnectionInclude<ExtArgs> | null
    /**
     * Filter, which Connection to fetch.
     */
    where?: ConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Connections to fetch.
     */
    orderBy?: ConnectionOrderByWithRelationInput | ConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Connections.
     */
    cursor?: ConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Connections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Connections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Connections.
     */
    distinct?: ConnectionScalarFieldEnum | ConnectionScalarFieldEnum[]
  }


  /**
   * Connection findMany
   */
  export type ConnectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConnectionInclude<ExtArgs> | null
    /**
     * Filter, which Connections to fetch.
     */
    where?: ConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Connections to fetch.
     */
    orderBy?: ConnectionOrderByWithRelationInput | ConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Connections.
     */
    cursor?: ConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Connections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Connections.
     */
    skip?: number
    distinct?: ConnectionScalarFieldEnum | ConnectionScalarFieldEnum[]
  }


  /**
   * Connection create
   */
  export type ConnectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConnectionInclude<ExtArgs> | null
    /**
     * The data needed to create a Connection.
     */
    data: XOR<ConnectionCreateInput, ConnectionUncheckedCreateInput>
  }


  /**
   * Connection createMany
   */
  export type ConnectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Connections.
     */
    data: ConnectionCreateManyInput | ConnectionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Connection update
   */
  export type ConnectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConnectionInclude<ExtArgs> | null
    /**
     * The data needed to update a Connection.
     */
    data: XOR<ConnectionUpdateInput, ConnectionUncheckedUpdateInput>
    /**
     * Choose, which Connection to update.
     */
    where: ConnectionWhereUniqueInput
  }


  /**
   * Connection updateMany
   */
  export type ConnectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Connections.
     */
    data: XOR<ConnectionUpdateManyMutationInput, ConnectionUncheckedUpdateManyInput>
    /**
     * Filter which Connections to update
     */
    where?: ConnectionWhereInput
  }


  /**
   * Connection upsert
   */
  export type ConnectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConnectionInclude<ExtArgs> | null
    /**
     * The filter to search for the Connection to update in case it exists.
     */
    where: ConnectionWhereUniqueInput
    /**
     * In case the Connection found by the `where` argument doesn't exist, create a new Connection with this data.
     */
    create: XOR<ConnectionCreateInput, ConnectionUncheckedCreateInput>
    /**
     * In case the Connection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConnectionUpdateInput, ConnectionUncheckedUpdateInput>
  }


  /**
   * Connection delete
   */
  export type ConnectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConnectionInclude<ExtArgs> | null
    /**
     * Filter which Connection to delete.
     */
    where: ConnectionWhereUniqueInput
  }


  /**
   * Connection deleteMany
   */
  export type ConnectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Connections to delete
     */
    where?: ConnectionWhereInput
  }


  /**
   * Connection without action
   */
  export type ConnectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConnectionInclude<ExtArgs> | null
  }



  /**
   * Model RecipePermission
   */

  export type AggregateRecipePermission = {
    _count: RecipePermissionCountAggregateOutputType | null
    _min: RecipePermissionMinAggregateOutputType | null
    _max: RecipePermissionMaxAggregateOutputType | null
  }

  export type RecipePermissionMinAggregateOutputType = {
    recipeId: string | null
    userId: string | null
    permission: $Enums.Role | null
  }

  export type RecipePermissionMaxAggregateOutputType = {
    recipeId: string | null
    userId: string | null
    permission: $Enums.Role | null
  }

  export type RecipePermissionCountAggregateOutputType = {
    recipeId: number
    userId: number
    permission: number
    _all: number
  }


  export type RecipePermissionMinAggregateInputType = {
    recipeId?: true
    userId?: true
    permission?: true
  }

  export type RecipePermissionMaxAggregateInputType = {
    recipeId?: true
    userId?: true
    permission?: true
  }

  export type RecipePermissionCountAggregateInputType = {
    recipeId?: true
    userId?: true
    permission?: true
    _all?: true
  }

  export type RecipePermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RecipePermission to aggregate.
     */
    where?: RecipePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipePermissions to fetch.
     */
    orderBy?: RecipePermissionOrderByWithRelationInput | RecipePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecipePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RecipePermissions
    **/
    _count?: true | RecipePermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecipePermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecipePermissionMaxAggregateInputType
  }

  export type GetRecipePermissionAggregateType<T extends RecipePermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateRecipePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecipePermission[P]>
      : GetScalarType<T[P], AggregateRecipePermission[P]>
  }




  export type RecipePermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecipePermissionWhereInput
    orderBy?: RecipePermissionOrderByWithAggregationInput | RecipePermissionOrderByWithAggregationInput[]
    by: RecipePermissionScalarFieldEnum[] | RecipePermissionScalarFieldEnum
    having?: RecipePermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecipePermissionCountAggregateInputType | true
    _min?: RecipePermissionMinAggregateInputType
    _max?: RecipePermissionMaxAggregateInputType
  }

  export type RecipePermissionGroupByOutputType = {
    recipeId: string
    userId: string
    permission: $Enums.Role
    _count: RecipePermissionCountAggregateOutputType | null
    _min: RecipePermissionMinAggregateOutputType | null
    _max: RecipePermissionMaxAggregateOutputType | null
  }

  type GetRecipePermissionGroupByPayload<T extends RecipePermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecipePermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecipePermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecipePermissionGroupByOutputType[P]>
            : GetScalarType<T[P], RecipePermissionGroupByOutputType[P]>
        }
      >
    >


  export type RecipePermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    recipeId?: boolean
    userId?: boolean
    permission?: boolean
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recipePermission"]>

  export type RecipePermissionSelectScalar = {
    recipeId?: boolean
    userId?: boolean
    permission?: boolean
  }

  export type RecipePermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $RecipePermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RecipePermission"
    objects: {
      recipe: Prisma.$RecipePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      recipeId: string
      userId: string
      permission: $Enums.Role
    }, ExtArgs["result"]["recipePermission"]>
    composites: {}
  }


  type RecipePermissionGetPayload<S extends boolean | null | undefined | RecipePermissionDefaultArgs> = $Result.GetResult<Prisma.$RecipePermissionPayload, S>

  type RecipePermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RecipePermissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RecipePermissionCountAggregateInputType | true
    }

  export interface RecipePermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RecipePermission'], meta: { name: 'RecipePermission' } }
    /**
     * Find zero or one RecipePermission that matches the filter.
     * @param {RecipePermissionFindUniqueArgs} args - Arguments to find a RecipePermission
     * @example
     * // Get one RecipePermission
     * const recipePermission = await prisma.recipePermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RecipePermissionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RecipePermissionFindUniqueArgs<ExtArgs>>
    ): Prisma__RecipePermissionClient<$Result.GetResult<Prisma.$RecipePermissionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one RecipePermission that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RecipePermissionFindUniqueOrThrowArgs} args - Arguments to find a RecipePermission
     * @example
     * // Get one RecipePermission
     * const recipePermission = await prisma.recipePermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RecipePermissionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RecipePermissionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RecipePermissionClient<$Result.GetResult<Prisma.$RecipePermissionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first RecipePermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipePermissionFindFirstArgs} args - Arguments to find a RecipePermission
     * @example
     * // Get one RecipePermission
     * const recipePermission = await prisma.recipePermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RecipePermissionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RecipePermissionFindFirstArgs<ExtArgs>>
    ): Prisma__RecipePermissionClient<$Result.GetResult<Prisma.$RecipePermissionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first RecipePermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipePermissionFindFirstOrThrowArgs} args - Arguments to find a RecipePermission
     * @example
     * // Get one RecipePermission
     * const recipePermission = await prisma.recipePermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RecipePermissionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RecipePermissionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RecipePermissionClient<$Result.GetResult<Prisma.$RecipePermissionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more RecipePermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipePermissionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RecipePermissions
     * const recipePermissions = await prisma.recipePermission.findMany()
     * 
     * // Get first 10 RecipePermissions
     * const recipePermissions = await prisma.recipePermission.findMany({ take: 10 })
     * 
     * // Only select the `recipeId`
     * const recipePermissionWithRecipeIdOnly = await prisma.recipePermission.findMany({ select: { recipeId: true } })
     * 
    **/
    findMany<T extends RecipePermissionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RecipePermissionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipePermissionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a RecipePermission.
     * @param {RecipePermissionCreateArgs} args - Arguments to create a RecipePermission.
     * @example
     * // Create one RecipePermission
     * const RecipePermission = await prisma.recipePermission.create({
     *   data: {
     *     // ... data to create a RecipePermission
     *   }
     * })
     * 
    **/
    create<T extends RecipePermissionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RecipePermissionCreateArgs<ExtArgs>>
    ): Prisma__RecipePermissionClient<$Result.GetResult<Prisma.$RecipePermissionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many RecipePermissions.
     *     @param {RecipePermissionCreateManyArgs} args - Arguments to create many RecipePermissions.
     *     @example
     *     // Create many RecipePermissions
     *     const recipePermission = await prisma.recipePermission.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RecipePermissionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RecipePermissionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RecipePermission.
     * @param {RecipePermissionDeleteArgs} args - Arguments to delete one RecipePermission.
     * @example
     * // Delete one RecipePermission
     * const RecipePermission = await prisma.recipePermission.delete({
     *   where: {
     *     // ... filter to delete one RecipePermission
     *   }
     * })
     * 
    **/
    delete<T extends RecipePermissionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RecipePermissionDeleteArgs<ExtArgs>>
    ): Prisma__RecipePermissionClient<$Result.GetResult<Prisma.$RecipePermissionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one RecipePermission.
     * @param {RecipePermissionUpdateArgs} args - Arguments to update one RecipePermission.
     * @example
     * // Update one RecipePermission
     * const recipePermission = await prisma.recipePermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RecipePermissionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RecipePermissionUpdateArgs<ExtArgs>>
    ): Prisma__RecipePermissionClient<$Result.GetResult<Prisma.$RecipePermissionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more RecipePermissions.
     * @param {RecipePermissionDeleteManyArgs} args - Arguments to filter RecipePermissions to delete.
     * @example
     * // Delete a few RecipePermissions
     * const { count } = await prisma.recipePermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RecipePermissionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RecipePermissionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RecipePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipePermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RecipePermissions
     * const recipePermission = await prisma.recipePermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RecipePermissionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RecipePermissionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RecipePermission.
     * @param {RecipePermissionUpsertArgs} args - Arguments to update or create a RecipePermission.
     * @example
     * // Update or create a RecipePermission
     * const recipePermission = await prisma.recipePermission.upsert({
     *   create: {
     *     // ... data to create a RecipePermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RecipePermission we want to update
     *   }
     * })
    **/
    upsert<T extends RecipePermissionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RecipePermissionUpsertArgs<ExtArgs>>
    ): Prisma__RecipePermissionClient<$Result.GetResult<Prisma.$RecipePermissionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of RecipePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipePermissionCountArgs} args - Arguments to filter RecipePermissions to count.
     * @example
     * // Count the number of RecipePermissions
     * const count = await prisma.recipePermission.count({
     *   where: {
     *     // ... the filter for the RecipePermissions we want to count
     *   }
     * })
    **/
    count<T extends RecipePermissionCountArgs>(
      args?: Subset<T, RecipePermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecipePermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RecipePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipePermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecipePermissionAggregateArgs>(args: Subset<T, RecipePermissionAggregateArgs>): Prisma.PrismaPromise<GetRecipePermissionAggregateType<T>>

    /**
     * Group by RecipePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipePermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecipePermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecipePermissionGroupByArgs['orderBy'] }
        : { orderBy?: RecipePermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecipePermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecipePermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RecipePermission model
   */
  readonly fields: RecipePermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RecipePermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecipePermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    recipe<T extends RecipeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RecipeDefaultArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the RecipePermission model
   */ 
  interface RecipePermissionFieldRefs {
    readonly recipeId: FieldRef<"RecipePermission", 'String'>
    readonly userId: FieldRef<"RecipePermission", 'String'>
    readonly permission: FieldRef<"RecipePermission", 'Role'>
  }
    

  // Custom InputTypes

  /**
   * RecipePermission findUnique
   */
  export type RecipePermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipePermission
     */
    select?: RecipePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RecipePermission to fetch.
     */
    where: RecipePermissionWhereUniqueInput
  }


  /**
   * RecipePermission findUniqueOrThrow
   */
  export type RecipePermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipePermission
     */
    select?: RecipePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RecipePermission to fetch.
     */
    where: RecipePermissionWhereUniqueInput
  }


  /**
   * RecipePermission findFirst
   */
  export type RecipePermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipePermission
     */
    select?: RecipePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RecipePermission to fetch.
     */
    where?: RecipePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipePermissions to fetch.
     */
    orderBy?: RecipePermissionOrderByWithRelationInput | RecipePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RecipePermissions.
     */
    cursor?: RecipePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RecipePermissions.
     */
    distinct?: RecipePermissionScalarFieldEnum | RecipePermissionScalarFieldEnum[]
  }


  /**
   * RecipePermission findFirstOrThrow
   */
  export type RecipePermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipePermission
     */
    select?: RecipePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RecipePermission to fetch.
     */
    where?: RecipePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipePermissions to fetch.
     */
    orderBy?: RecipePermissionOrderByWithRelationInput | RecipePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RecipePermissions.
     */
    cursor?: RecipePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RecipePermissions.
     */
    distinct?: RecipePermissionScalarFieldEnum | RecipePermissionScalarFieldEnum[]
  }


  /**
   * RecipePermission findMany
   */
  export type RecipePermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipePermission
     */
    select?: RecipePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RecipePermissions to fetch.
     */
    where?: RecipePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RecipePermissions to fetch.
     */
    orderBy?: RecipePermissionOrderByWithRelationInput | RecipePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RecipePermissions.
     */
    cursor?: RecipePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RecipePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RecipePermissions.
     */
    skip?: number
    distinct?: RecipePermissionScalarFieldEnum | RecipePermissionScalarFieldEnum[]
  }


  /**
   * RecipePermission create
   */
  export type RecipePermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipePermission
     */
    select?: RecipePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipePermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a RecipePermission.
     */
    data: XOR<RecipePermissionCreateInput, RecipePermissionUncheckedCreateInput>
  }


  /**
   * RecipePermission createMany
   */
  export type RecipePermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RecipePermissions.
     */
    data: RecipePermissionCreateManyInput | RecipePermissionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * RecipePermission update
   */
  export type RecipePermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipePermission
     */
    select?: RecipePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipePermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a RecipePermission.
     */
    data: XOR<RecipePermissionUpdateInput, RecipePermissionUncheckedUpdateInput>
    /**
     * Choose, which RecipePermission to update.
     */
    where: RecipePermissionWhereUniqueInput
  }


  /**
   * RecipePermission updateMany
   */
  export type RecipePermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RecipePermissions.
     */
    data: XOR<RecipePermissionUpdateManyMutationInput, RecipePermissionUncheckedUpdateManyInput>
    /**
     * Filter which RecipePermissions to update
     */
    where?: RecipePermissionWhereInput
  }


  /**
   * RecipePermission upsert
   */
  export type RecipePermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipePermission
     */
    select?: RecipePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipePermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the RecipePermission to update in case it exists.
     */
    where: RecipePermissionWhereUniqueInput
    /**
     * In case the RecipePermission found by the `where` argument doesn't exist, create a new RecipePermission with this data.
     */
    create: XOR<RecipePermissionCreateInput, RecipePermissionUncheckedCreateInput>
    /**
     * In case the RecipePermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecipePermissionUpdateInput, RecipePermissionUncheckedUpdateInput>
  }


  /**
   * RecipePermission delete
   */
  export type RecipePermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipePermission
     */
    select?: RecipePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipePermissionInclude<ExtArgs> | null
    /**
     * Filter which RecipePermission to delete.
     */
    where: RecipePermissionWhereUniqueInput
  }


  /**
   * RecipePermission deleteMany
   */
  export type RecipePermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RecipePermissions to delete
     */
    where?: RecipePermissionWhereInput
  }


  /**
   * RecipePermission without action
   */
  export type RecipePermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecipePermission
     */
    select?: RecipePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecipePermissionInclude<ExtArgs> | null
  }



  /**
   * Model Instruction
   */

  export type AggregateInstruction = {
    _count: InstructionCountAggregateOutputType | null
    _avg: InstructionAvgAggregateOutputType | null
    _sum: InstructionSumAggregateOutputType | null
    _min: InstructionMinAggregateOutputType | null
    _max: InstructionMaxAggregateOutputType | null
  }

  export type InstructionAvgAggregateOutputType = {
    step: number | null
  }

  export type InstructionSumAggregateOutputType = {
    step: number | null
  }

  export type InstructionMinAggregateOutputType = {
    id: string | null
    description: string | null
    recipeId: string | null
    step: number | null
  }

  export type InstructionMaxAggregateOutputType = {
    id: string | null
    description: string | null
    recipeId: string | null
    step: number | null
  }

  export type InstructionCountAggregateOutputType = {
    id: number
    description: number
    recipeId: number
    step: number
    _all: number
  }


  export type InstructionAvgAggregateInputType = {
    step?: true
  }

  export type InstructionSumAggregateInputType = {
    step?: true
  }

  export type InstructionMinAggregateInputType = {
    id?: true
    description?: true
    recipeId?: true
    step?: true
  }

  export type InstructionMaxAggregateInputType = {
    id?: true
    description?: true
    recipeId?: true
    step?: true
  }

  export type InstructionCountAggregateInputType = {
    id?: true
    description?: true
    recipeId?: true
    step?: true
    _all?: true
  }

  export type InstructionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Instruction to aggregate.
     */
    where?: InstructionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instructions to fetch.
     */
    orderBy?: InstructionOrderByWithRelationInput | InstructionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InstructionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instructions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instructions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Instructions
    **/
    _count?: true | InstructionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InstructionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InstructionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InstructionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InstructionMaxAggregateInputType
  }

  export type GetInstructionAggregateType<T extends InstructionAggregateArgs> = {
        [P in keyof T & keyof AggregateInstruction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInstruction[P]>
      : GetScalarType<T[P], AggregateInstruction[P]>
  }




  export type InstructionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InstructionWhereInput
    orderBy?: InstructionOrderByWithAggregationInput | InstructionOrderByWithAggregationInput[]
    by: InstructionScalarFieldEnum[] | InstructionScalarFieldEnum
    having?: InstructionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InstructionCountAggregateInputType | true
    _avg?: InstructionAvgAggregateInputType
    _sum?: InstructionSumAggregateInputType
    _min?: InstructionMinAggregateInputType
    _max?: InstructionMaxAggregateInputType
  }

  export type InstructionGroupByOutputType = {
    id: string
    description: string
    recipeId: string
    step: number
    _count: InstructionCountAggregateOutputType | null
    _avg: InstructionAvgAggregateOutputType | null
    _sum: InstructionSumAggregateOutputType | null
    _min: InstructionMinAggregateOutputType | null
    _max: InstructionMaxAggregateOutputType | null
  }

  type GetInstructionGroupByPayload<T extends InstructionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InstructionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InstructionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InstructionGroupByOutputType[P]>
            : GetScalarType<T[P], InstructionGroupByOutputType[P]>
        }
      >
    >


  export type InstructionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    recipeId?: boolean
    step?: boolean
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    time?: boolean | Instruction$timeArgs<ExtArgs>
    temperature?: boolean | Instruction$temperatureArgs<ExtArgs>
  }, ExtArgs["result"]["instruction"]>

  export type InstructionSelectScalar = {
    id?: boolean
    description?: boolean
    recipeId?: boolean
    step?: boolean
  }

  export type InstructionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipe?: boolean | RecipeDefaultArgs<ExtArgs>
    time?: boolean | Instruction$timeArgs<ExtArgs>
    temperature?: boolean | Instruction$temperatureArgs<ExtArgs>
  }


  export type $InstructionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Instruction"
    objects: {
      recipe: Prisma.$RecipePayload<ExtArgs>
      time: Prisma.$TimePayload<ExtArgs> | null
      temperature: Prisma.$TemperaturePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      description: string
      recipeId: string
      step: number
    }, ExtArgs["result"]["instruction"]>
    composites: {}
  }


  type InstructionGetPayload<S extends boolean | null | undefined | InstructionDefaultArgs> = $Result.GetResult<Prisma.$InstructionPayload, S>

  type InstructionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InstructionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InstructionCountAggregateInputType | true
    }

  export interface InstructionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Instruction'], meta: { name: 'Instruction' } }
    /**
     * Find zero or one Instruction that matches the filter.
     * @param {InstructionFindUniqueArgs} args - Arguments to find a Instruction
     * @example
     * // Get one Instruction
     * const instruction = await prisma.instruction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InstructionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, InstructionFindUniqueArgs<ExtArgs>>
    ): Prisma__InstructionClient<$Result.GetResult<Prisma.$InstructionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Instruction that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {InstructionFindUniqueOrThrowArgs} args - Arguments to find a Instruction
     * @example
     * // Get one Instruction
     * const instruction = await prisma.instruction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends InstructionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InstructionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__InstructionClient<$Result.GetResult<Prisma.$InstructionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Instruction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstructionFindFirstArgs} args - Arguments to find a Instruction
     * @example
     * // Get one Instruction
     * const instruction = await prisma.instruction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InstructionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, InstructionFindFirstArgs<ExtArgs>>
    ): Prisma__InstructionClient<$Result.GetResult<Prisma.$InstructionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Instruction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstructionFindFirstOrThrowArgs} args - Arguments to find a Instruction
     * @example
     * // Get one Instruction
     * const instruction = await prisma.instruction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends InstructionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InstructionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__InstructionClient<$Result.GetResult<Prisma.$InstructionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Instructions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstructionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Instructions
     * const instructions = await prisma.instruction.findMany()
     * 
     * // Get first 10 Instructions
     * const instructions = await prisma.instruction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const instructionWithIdOnly = await prisma.instruction.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InstructionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InstructionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstructionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Instruction.
     * @param {InstructionCreateArgs} args - Arguments to create a Instruction.
     * @example
     * // Create one Instruction
     * const Instruction = await prisma.instruction.create({
     *   data: {
     *     // ... data to create a Instruction
     *   }
     * })
     * 
    **/
    create<T extends InstructionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, InstructionCreateArgs<ExtArgs>>
    ): Prisma__InstructionClient<$Result.GetResult<Prisma.$InstructionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Instructions.
     *     @param {InstructionCreateManyArgs} args - Arguments to create many Instructions.
     *     @example
     *     // Create many Instructions
     *     const instruction = await prisma.instruction.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InstructionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InstructionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Instruction.
     * @param {InstructionDeleteArgs} args - Arguments to delete one Instruction.
     * @example
     * // Delete one Instruction
     * const Instruction = await prisma.instruction.delete({
     *   where: {
     *     // ... filter to delete one Instruction
     *   }
     * })
     * 
    **/
    delete<T extends InstructionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, InstructionDeleteArgs<ExtArgs>>
    ): Prisma__InstructionClient<$Result.GetResult<Prisma.$InstructionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Instruction.
     * @param {InstructionUpdateArgs} args - Arguments to update one Instruction.
     * @example
     * // Update one Instruction
     * const instruction = await prisma.instruction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InstructionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, InstructionUpdateArgs<ExtArgs>>
    ): Prisma__InstructionClient<$Result.GetResult<Prisma.$InstructionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Instructions.
     * @param {InstructionDeleteManyArgs} args - Arguments to filter Instructions to delete.
     * @example
     * // Delete a few Instructions
     * const { count } = await prisma.instruction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InstructionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InstructionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Instructions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstructionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Instructions
     * const instruction = await prisma.instruction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InstructionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, InstructionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Instruction.
     * @param {InstructionUpsertArgs} args - Arguments to update or create a Instruction.
     * @example
     * // Update or create a Instruction
     * const instruction = await prisma.instruction.upsert({
     *   create: {
     *     // ... data to create a Instruction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Instruction we want to update
     *   }
     * })
    **/
    upsert<T extends InstructionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, InstructionUpsertArgs<ExtArgs>>
    ): Prisma__InstructionClient<$Result.GetResult<Prisma.$InstructionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Instructions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstructionCountArgs} args - Arguments to filter Instructions to count.
     * @example
     * // Count the number of Instructions
     * const count = await prisma.instruction.count({
     *   where: {
     *     // ... the filter for the Instructions we want to count
     *   }
     * })
    **/
    count<T extends InstructionCountArgs>(
      args?: Subset<T, InstructionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InstructionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Instruction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstructionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InstructionAggregateArgs>(args: Subset<T, InstructionAggregateArgs>): Prisma.PrismaPromise<GetInstructionAggregateType<T>>

    /**
     * Group by Instruction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstructionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InstructionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InstructionGroupByArgs['orderBy'] }
        : { orderBy?: InstructionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InstructionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInstructionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Instruction model
   */
  readonly fields: InstructionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Instruction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InstructionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    recipe<T extends RecipeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RecipeDefaultArgs<ExtArgs>>): Prisma__RecipeClient<$Result.GetResult<Prisma.$RecipePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    time<T extends Instruction$timeArgs<ExtArgs> = {}>(args?: Subset<T, Instruction$timeArgs<ExtArgs>>): Prisma__TimeClient<$Result.GetResult<Prisma.$TimePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    temperature<T extends Instruction$temperatureArgs<ExtArgs> = {}>(args?: Subset<T, Instruction$temperatureArgs<ExtArgs>>): Prisma__TemperatureClient<$Result.GetResult<Prisma.$TemperaturePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Instruction model
   */ 
  interface InstructionFieldRefs {
    readonly id: FieldRef<"Instruction", 'String'>
    readonly description: FieldRef<"Instruction", 'String'>
    readonly recipeId: FieldRef<"Instruction", 'String'>
    readonly step: FieldRef<"Instruction", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Instruction findUnique
   */
  export type InstructionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instruction
     */
    select?: InstructionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstructionInclude<ExtArgs> | null
    /**
     * Filter, which Instruction to fetch.
     */
    where: InstructionWhereUniqueInput
  }


  /**
   * Instruction findUniqueOrThrow
   */
  export type InstructionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instruction
     */
    select?: InstructionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstructionInclude<ExtArgs> | null
    /**
     * Filter, which Instruction to fetch.
     */
    where: InstructionWhereUniqueInput
  }


  /**
   * Instruction findFirst
   */
  export type InstructionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instruction
     */
    select?: InstructionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstructionInclude<ExtArgs> | null
    /**
     * Filter, which Instruction to fetch.
     */
    where?: InstructionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instructions to fetch.
     */
    orderBy?: InstructionOrderByWithRelationInput | InstructionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Instructions.
     */
    cursor?: InstructionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instructions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instructions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Instructions.
     */
    distinct?: InstructionScalarFieldEnum | InstructionScalarFieldEnum[]
  }


  /**
   * Instruction findFirstOrThrow
   */
  export type InstructionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instruction
     */
    select?: InstructionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstructionInclude<ExtArgs> | null
    /**
     * Filter, which Instruction to fetch.
     */
    where?: InstructionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instructions to fetch.
     */
    orderBy?: InstructionOrderByWithRelationInput | InstructionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Instructions.
     */
    cursor?: InstructionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instructions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instructions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Instructions.
     */
    distinct?: InstructionScalarFieldEnum | InstructionScalarFieldEnum[]
  }


  /**
   * Instruction findMany
   */
  export type InstructionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instruction
     */
    select?: InstructionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstructionInclude<ExtArgs> | null
    /**
     * Filter, which Instructions to fetch.
     */
    where?: InstructionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instructions to fetch.
     */
    orderBy?: InstructionOrderByWithRelationInput | InstructionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Instructions.
     */
    cursor?: InstructionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instructions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instructions.
     */
    skip?: number
    distinct?: InstructionScalarFieldEnum | InstructionScalarFieldEnum[]
  }


  /**
   * Instruction create
   */
  export type InstructionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instruction
     */
    select?: InstructionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstructionInclude<ExtArgs> | null
    /**
     * The data needed to create a Instruction.
     */
    data: XOR<InstructionCreateInput, InstructionUncheckedCreateInput>
  }


  /**
   * Instruction createMany
   */
  export type InstructionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Instructions.
     */
    data: InstructionCreateManyInput | InstructionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Instruction update
   */
  export type InstructionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instruction
     */
    select?: InstructionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstructionInclude<ExtArgs> | null
    /**
     * The data needed to update a Instruction.
     */
    data: XOR<InstructionUpdateInput, InstructionUncheckedUpdateInput>
    /**
     * Choose, which Instruction to update.
     */
    where: InstructionWhereUniqueInput
  }


  /**
   * Instruction updateMany
   */
  export type InstructionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Instructions.
     */
    data: XOR<InstructionUpdateManyMutationInput, InstructionUncheckedUpdateManyInput>
    /**
     * Filter which Instructions to update
     */
    where?: InstructionWhereInput
  }


  /**
   * Instruction upsert
   */
  export type InstructionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instruction
     */
    select?: InstructionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstructionInclude<ExtArgs> | null
    /**
     * The filter to search for the Instruction to update in case it exists.
     */
    where: InstructionWhereUniqueInput
    /**
     * In case the Instruction found by the `where` argument doesn't exist, create a new Instruction with this data.
     */
    create: XOR<InstructionCreateInput, InstructionUncheckedCreateInput>
    /**
     * In case the Instruction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InstructionUpdateInput, InstructionUncheckedUpdateInput>
  }


  /**
   * Instruction delete
   */
  export type InstructionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instruction
     */
    select?: InstructionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstructionInclude<ExtArgs> | null
    /**
     * Filter which Instruction to delete.
     */
    where: InstructionWhereUniqueInput
  }


  /**
   * Instruction deleteMany
   */
  export type InstructionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Instructions to delete
     */
    where?: InstructionWhereInput
  }


  /**
   * Instruction.time
   */
  export type Instruction$timeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Time
     */
    select?: TimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimeInclude<ExtArgs> | null
    where?: TimeWhereInput
  }


  /**
   * Instruction.temperature
   */
  export type Instruction$temperatureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Temperature
     */
    select?: TemperatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TemperatureInclude<ExtArgs> | null
    where?: TemperatureWhereInput
  }


  /**
   * Instruction without action
   */
  export type InstructionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instruction
     */
    select?: InstructionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstructionInclude<ExtArgs> | null
  }



  /**
   * Model Time
   */

  export type AggregateTime = {
    _count: TimeCountAggregateOutputType | null
    _avg: TimeAvgAggregateOutputType | null
    _sum: TimeSumAggregateOutputType | null
    _min: TimeMinAggregateOutputType | null
    _max: TimeMaxAggregateOutputType | null
  }

  export type TimeAvgAggregateOutputType = {
    hours: number | null
    minutes: number | null
  }

  export type TimeSumAggregateOutputType = {
    hours: number | null
    minutes: number | null
  }

  export type TimeMinAggregateOutputType = {
    instructionId: string | null
    hours: number | null
    minutes: number | null
  }

  export type TimeMaxAggregateOutputType = {
    instructionId: string | null
    hours: number | null
    minutes: number | null
  }

  export type TimeCountAggregateOutputType = {
    instructionId: number
    hours: number
    minutes: number
    _all: number
  }


  export type TimeAvgAggregateInputType = {
    hours?: true
    minutes?: true
  }

  export type TimeSumAggregateInputType = {
    hours?: true
    minutes?: true
  }

  export type TimeMinAggregateInputType = {
    instructionId?: true
    hours?: true
    minutes?: true
  }

  export type TimeMaxAggregateInputType = {
    instructionId?: true
    hours?: true
    minutes?: true
  }

  export type TimeCountAggregateInputType = {
    instructionId?: true
    hours?: true
    minutes?: true
    _all?: true
  }

  export type TimeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Time to aggregate.
     */
    where?: TimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Times to fetch.
     */
    orderBy?: TimeOrderByWithRelationInput | TimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Times from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Times.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Times
    **/
    _count?: true | TimeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TimeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TimeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TimeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TimeMaxAggregateInputType
  }

  export type GetTimeAggregateType<T extends TimeAggregateArgs> = {
        [P in keyof T & keyof AggregateTime]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTime[P]>
      : GetScalarType<T[P], AggregateTime[P]>
  }




  export type TimeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TimeWhereInput
    orderBy?: TimeOrderByWithAggregationInput | TimeOrderByWithAggregationInput[]
    by: TimeScalarFieldEnum[] | TimeScalarFieldEnum
    having?: TimeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TimeCountAggregateInputType | true
    _avg?: TimeAvgAggregateInputType
    _sum?: TimeSumAggregateInputType
    _min?: TimeMinAggregateInputType
    _max?: TimeMaxAggregateInputType
  }

  export type TimeGroupByOutputType = {
    instructionId: string
    hours: number | null
    minutes: number | null
    _count: TimeCountAggregateOutputType | null
    _avg: TimeAvgAggregateOutputType | null
    _sum: TimeSumAggregateOutputType | null
    _min: TimeMinAggregateOutputType | null
    _max: TimeMaxAggregateOutputType | null
  }

  type GetTimeGroupByPayload<T extends TimeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TimeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TimeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TimeGroupByOutputType[P]>
            : GetScalarType<T[P], TimeGroupByOutputType[P]>
        }
      >
    >


  export type TimeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    instructionId?: boolean
    hours?: boolean
    minutes?: boolean
    instruction?: boolean | InstructionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["time"]>

  export type TimeSelectScalar = {
    instructionId?: boolean
    hours?: boolean
    minutes?: boolean
  }

  export type TimeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instruction?: boolean | InstructionDefaultArgs<ExtArgs>
  }


  export type $TimePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Time"
    objects: {
      instruction: Prisma.$InstructionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      instructionId: string
      hours: number | null
      minutes: number | null
    }, ExtArgs["result"]["time"]>
    composites: {}
  }


  type TimeGetPayload<S extends boolean | null | undefined | TimeDefaultArgs> = $Result.GetResult<Prisma.$TimePayload, S>

  type TimeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TimeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TimeCountAggregateInputType | true
    }

  export interface TimeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Time'], meta: { name: 'Time' } }
    /**
     * Find zero or one Time that matches the filter.
     * @param {TimeFindUniqueArgs} args - Arguments to find a Time
     * @example
     * // Get one Time
     * const time = await prisma.time.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TimeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TimeFindUniqueArgs<ExtArgs>>
    ): Prisma__TimeClient<$Result.GetResult<Prisma.$TimePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Time that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TimeFindUniqueOrThrowArgs} args - Arguments to find a Time
     * @example
     * // Get one Time
     * const time = await prisma.time.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TimeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TimeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TimeClient<$Result.GetResult<Prisma.$TimePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Time that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeFindFirstArgs} args - Arguments to find a Time
     * @example
     * // Get one Time
     * const time = await prisma.time.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TimeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TimeFindFirstArgs<ExtArgs>>
    ): Prisma__TimeClient<$Result.GetResult<Prisma.$TimePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Time that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeFindFirstOrThrowArgs} args - Arguments to find a Time
     * @example
     * // Get one Time
     * const time = await prisma.time.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TimeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TimeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TimeClient<$Result.GetResult<Prisma.$TimePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Times that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Times
     * const times = await prisma.time.findMany()
     * 
     * // Get first 10 Times
     * const times = await prisma.time.findMany({ take: 10 })
     * 
     * // Only select the `instructionId`
     * const timeWithInstructionIdOnly = await prisma.time.findMany({ select: { instructionId: true } })
     * 
    **/
    findMany<T extends TimeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TimeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TimePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Time.
     * @param {TimeCreateArgs} args - Arguments to create a Time.
     * @example
     * // Create one Time
     * const Time = await prisma.time.create({
     *   data: {
     *     // ... data to create a Time
     *   }
     * })
     * 
    **/
    create<T extends TimeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TimeCreateArgs<ExtArgs>>
    ): Prisma__TimeClient<$Result.GetResult<Prisma.$TimePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Times.
     *     @param {TimeCreateManyArgs} args - Arguments to create many Times.
     *     @example
     *     // Create many Times
     *     const time = await prisma.time.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TimeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TimeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Time.
     * @param {TimeDeleteArgs} args - Arguments to delete one Time.
     * @example
     * // Delete one Time
     * const Time = await prisma.time.delete({
     *   where: {
     *     // ... filter to delete one Time
     *   }
     * })
     * 
    **/
    delete<T extends TimeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TimeDeleteArgs<ExtArgs>>
    ): Prisma__TimeClient<$Result.GetResult<Prisma.$TimePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Time.
     * @param {TimeUpdateArgs} args - Arguments to update one Time.
     * @example
     * // Update one Time
     * const time = await prisma.time.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TimeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TimeUpdateArgs<ExtArgs>>
    ): Prisma__TimeClient<$Result.GetResult<Prisma.$TimePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Times.
     * @param {TimeDeleteManyArgs} args - Arguments to filter Times to delete.
     * @example
     * // Delete a few Times
     * const { count } = await prisma.time.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TimeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TimeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Times.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Times
     * const time = await prisma.time.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TimeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TimeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Time.
     * @param {TimeUpsertArgs} args - Arguments to update or create a Time.
     * @example
     * // Update or create a Time
     * const time = await prisma.time.upsert({
     *   create: {
     *     // ... data to create a Time
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Time we want to update
     *   }
     * })
    **/
    upsert<T extends TimeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TimeUpsertArgs<ExtArgs>>
    ): Prisma__TimeClient<$Result.GetResult<Prisma.$TimePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Times.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeCountArgs} args - Arguments to filter Times to count.
     * @example
     * // Count the number of Times
     * const count = await prisma.time.count({
     *   where: {
     *     // ... the filter for the Times we want to count
     *   }
     * })
    **/
    count<T extends TimeCountArgs>(
      args?: Subset<T, TimeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TimeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Time.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TimeAggregateArgs>(args: Subset<T, TimeAggregateArgs>): Prisma.PrismaPromise<GetTimeAggregateType<T>>

    /**
     * Group by Time.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TimeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TimeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TimeGroupByArgs['orderBy'] }
        : { orderBy?: TimeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TimeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTimeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Time model
   */
  readonly fields: TimeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Time.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TimeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    instruction<T extends InstructionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstructionDefaultArgs<ExtArgs>>): Prisma__InstructionClient<$Result.GetResult<Prisma.$InstructionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Time model
   */ 
  interface TimeFieldRefs {
    readonly instructionId: FieldRef<"Time", 'String'>
    readonly hours: FieldRef<"Time", 'Int'>
    readonly minutes: FieldRef<"Time", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Time findUnique
   */
  export type TimeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Time
     */
    select?: TimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimeInclude<ExtArgs> | null
    /**
     * Filter, which Time to fetch.
     */
    where: TimeWhereUniqueInput
  }


  /**
   * Time findUniqueOrThrow
   */
  export type TimeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Time
     */
    select?: TimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimeInclude<ExtArgs> | null
    /**
     * Filter, which Time to fetch.
     */
    where: TimeWhereUniqueInput
  }


  /**
   * Time findFirst
   */
  export type TimeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Time
     */
    select?: TimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimeInclude<ExtArgs> | null
    /**
     * Filter, which Time to fetch.
     */
    where?: TimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Times to fetch.
     */
    orderBy?: TimeOrderByWithRelationInput | TimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Times.
     */
    cursor?: TimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Times from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Times.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Times.
     */
    distinct?: TimeScalarFieldEnum | TimeScalarFieldEnum[]
  }


  /**
   * Time findFirstOrThrow
   */
  export type TimeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Time
     */
    select?: TimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimeInclude<ExtArgs> | null
    /**
     * Filter, which Time to fetch.
     */
    where?: TimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Times to fetch.
     */
    orderBy?: TimeOrderByWithRelationInput | TimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Times.
     */
    cursor?: TimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Times from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Times.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Times.
     */
    distinct?: TimeScalarFieldEnum | TimeScalarFieldEnum[]
  }


  /**
   * Time findMany
   */
  export type TimeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Time
     */
    select?: TimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimeInclude<ExtArgs> | null
    /**
     * Filter, which Times to fetch.
     */
    where?: TimeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Times to fetch.
     */
    orderBy?: TimeOrderByWithRelationInput | TimeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Times.
     */
    cursor?: TimeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Times from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Times.
     */
    skip?: number
    distinct?: TimeScalarFieldEnum | TimeScalarFieldEnum[]
  }


  /**
   * Time create
   */
  export type TimeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Time
     */
    select?: TimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimeInclude<ExtArgs> | null
    /**
     * The data needed to create a Time.
     */
    data: XOR<TimeCreateInput, TimeUncheckedCreateInput>
  }


  /**
   * Time createMany
   */
  export type TimeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Times.
     */
    data: TimeCreateManyInput | TimeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Time update
   */
  export type TimeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Time
     */
    select?: TimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimeInclude<ExtArgs> | null
    /**
     * The data needed to update a Time.
     */
    data: XOR<TimeUpdateInput, TimeUncheckedUpdateInput>
    /**
     * Choose, which Time to update.
     */
    where: TimeWhereUniqueInput
  }


  /**
   * Time updateMany
   */
  export type TimeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Times.
     */
    data: XOR<TimeUpdateManyMutationInput, TimeUncheckedUpdateManyInput>
    /**
     * Filter which Times to update
     */
    where?: TimeWhereInput
  }


  /**
   * Time upsert
   */
  export type TimeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Time
     */
    select?: TimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimeInclude<ExtArgs> | null
    /**
     * The filter to search for the Time to update in case it exists.
     */
    where: TimeWhereUniqueInput
    /**
     * In case the Time found by the `where` argument doesn't exist, create a new Time with this data.
     */
    create: XOR<TimeCreateInput, TimeUncheckedCreateInput>
    /**
     * In case the Time was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TimeUpdateInput, TimeUncheckedUpdateInput>
  }


  /**
   * Time delete
   */
  export type TimeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Time
     */
    select?: TimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimeInclude<ExtArgs> | null
    /**
     * Filter which Time to delete.
     */
    where: TimeWhereUniqueInput
  }


  /**
   * Time deleteMany
   */
  export type TimeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Times to delete
     */
    where?: TimeWhereInput
  }


  /**
   * Time without action
   */
  export type TimeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Time
     */
    select?: TimeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TimeInclude<ExtArgs> | null
  }



  /**
   * Model Temperature
   */

  export type AggregateTemperature = {
    _count: TemperatureCountAggregateOutputType | null
    _avg: TemperatureAvgAggregateOutputType | null
    _sum: TemperatureSumAggregateOutputType | null
    _min: TemperatureMinAggregateOutputType | null
    _max: TemperatureMaxAggregateOutputType | null
  }

  export type TemperatureAvgAggregateOutputType = {
    temperature: number | null
  }

  export type TemperatureSumAggregateOutputType = {
    temperature: number | null
  }

  export type TemperatureMinAggregateOutputType = {
    instructionId: string | null
    temperature: number | null
    unit: $Enums.TemperatureUnit | null
  }

  export type TemperatureMaxAggregateOutputType = {
    instructionId: string | null
    temperature: number | null
    unit: $Enums.TemperatureUnit | null
  }

  export type TemperatureCountAggregateOutputType = {
    instructionId: number
    temperature: number
    unit: number
    _all: number
  }


  export type TemperatureAvgAggregateInputType = {
    temperature?: true
  }

  export type TemperatureSumAggregateInputType = {
    temperature?: true
  }

  export type TemperatureMinAggregateInputType = {
    instructionId?: true
    temperature?: true
    unit?: true
  }

  export type TemperatureMaxAggregateInputType = {
    instructionId?: true
    temperature?: true
    unit?: true
  }

  export type TemperatureCountAggregateInputType = {
    instructionId?: true
    temperature?: true
    unit?: true
    _all?: true
  }

  export type TemperatureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Temperature to aggregate.
     */
    where?: TemperatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Temperatures to fetch.
     */
    orderBy?: TemperatureOrderByWithRelationInput | TemperatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TemperatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Temperatures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Temperatures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Temperatures
    **/
    _count?: true | TemperatureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TemperatureAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TemperatureSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TemperatureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TemperatureMaxAggregateInputType
  }

  export type GetTemperatureAggregateType<T extends TemperatureAggregateArgs> = {
        [P in keyof T & keyof AggregateTemperature]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTemperature[P]>
      : GetScalarType<T[P], AggregateTemperature[P]>
  }




  export type TemperatureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TemperatureWhereInput
    orderBy?: TemperatureOrderByWithAggregationInput | TemperatureOrderByWithAggregationInput[]
    by: TemperatureScalarFieldEnum[] | TemperatureScalarFieldEnum
    having?: TemperatureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TemperatureCountAggregateInputType | true
    _avg?: TemperatureAvgAggregateInputType
    _sum?: TemperatureSumAggregateInputType
    _min?: TemperatureMinAggregateInputType
    _max?: TemperatureMaxAggregateInputType
  }

  export type TemperatureGroupByOutputType = {
    instructionId: string
    temperature: number | null
    unit: $Enums.TemperatureUnit | null
    _count: TemperatureCountAggregateOutputType | null
    _avg: TemperatureAvgAggregateOutputType | null
    _sum: TemperatureSumAggregateOutputType | null
    _min: TemperatureMinAggregateOutputType | null
    _max: TemperatureMaxAggregateOutputType | null
  }

  type GetTemperatureGroupByPayload<T extends TemperatureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TemperatureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TemperatureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TemperatureGroupByOutputType[P]>
            : GetScalarType<T[P], TemperatureGroupByOutputType[P]>
        }
      >
    >


  export type TemperatureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    instructionId?: boolean
    temperature?: boolean
    unit?: boolean
    instruction?: boolean | InstructionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["temperature"]>

  export type TemperatureSelectScalar = {
    instructionId?: boolean
    temperature?: boolean
    unit?: boolean
  }

  export type TemperatureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instruction?: boolean | InstructionDefaultArgs<ExtArgs>
  }


  export type $TemperaturePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Temperature"
    objects: {
      instruction: Prisma.$InstructionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      instructionId: string
      temperature: number | null
      unit: $Enums.TemperatureUnit | null
    }, ExtArgs["result"]["temperature"]>
    composites: {}
  }


  type TemperatureGetPayload<S extends boolean | null | undefined | TemperatureDefaultArgs> = $Result.GetResult<Prisma.$TemperaturePayload, S>

  type TemperatureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TemperatureFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TemperatureCountAggregateInputType | true
    }

  export interface TemperatureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Temperature'], meta: { name: 'Temperature' } }
    /**
     * Find zero or one Temperature that matches the filter.
     * @param {TemperatureFindUniqueArgs} args - Arguments to find a Temperature
     * @example
     * // Get one Temperature
     * const temperature = await prisma.temperature.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TemperatureFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TemperatureFindUniqueArgs<ExtArgs>>
    ): Prisma__TemperatureClient<$Result.GetResult<Prisma.$TemperaturePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Temperature that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TemperatureFindUniqueOrThrowArgs} args - Arguments to find a Temperature
     * @example
     * // Get one Temperature
     * const temperature = await prisma.temperature.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TemperatureFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TemperatureFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TemperatureClient<$Result.GetResult<Prisma.$TemperaturePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Temperature that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemperatureFindFirstArgs} args - Arguments to find a Temperature
     * @example
     * // Get one Temperature
     * const temperature = await prisma.temperature.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TemperatureFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TemperatureFindFirstArgs<ExtArgs>>
    ): Prisma__TemperatureClient<$Result.GetResult<Prisma.$TemperaturePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Temperature that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemperatureFindFirstOrThrowArgs} args - Arguments to find a Temperature
     * @example
     * // Get one Temperature
     * const temperature = await prisma.temperature.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TemperatureFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TemperatureFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TemperatureClient<$Result.GetResult<Prisma.$TemperaturePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Temperatures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemperatureFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Temperatures
     * const temperatures = await prisma.temperature.findMany()
     * 
     * // Get first 10 Temperatures
     * const temperatures = await prisma.temperature.findMany({ take: 10 })
     * 
     * // Only select the `instructionId`
     * const temperatureWithInstructionIdOnly = await prisma.temperature.findMany({ select: { instructionId: true } })
     * 
    **/
    findMany<T extends TemperatureFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TemperatureFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemperaturePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Temperature.
     * @param {TemperatureCreateArgs} args - Arguments to create a Temperature.
     * @example
     * // Create one Temperature
     * const Temperature = await prisma.temperature.create({
     *   data: {
     *     // ... data to create a Temperature
     *   }
     * })
     * 
    **/
    create<T extends TemperatureCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TemperatureCreateArgs<ExtArgs>>
    ): Prisma__TemperatureClient<$Result.GetResult<Prisma.$TemperaturePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Temperatures.
     *     @param {TemperatureCreateManyArgs} args - Arguments to create many Temperatures.
     *     @example
     *     // Create many Temperatures
     *     const temperature = await prisma.temperature.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TemperatureCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TemperatureCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Temperature.
     * @param {TemperatureDeleteArgs} args - Arguments to delete one Temperature.
     * @example
     * // Delete one Temperature
     * const Temperature = await prisma.temperature.delete({
     *   where: {
     *     // ... filter to delete one Temperature
     *   }
     * })
     * 
    **/
    delete<T extends TemperatureDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TemperatureDeleteArgs<ExtArgs>>
    ): Prisma__TemperatureClient<$Result.GetResult<Prisma.$TemperaturePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Temperature.
     * @param {TemperatureUpdateArgs} args - Arguments to update one Temperature.
     * @example
     * // Update one Temperature
     * const temperature = await prisma.temperature.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TemperatureUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TemperatureUpdateArgs<ExtArgs>>
    ): Prisma__TemperatureClient<$Result.GetResult<Prisma.$TemperaturePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Temperatures.
     * @param {TemperatureDeleteManyArgs} args - Arguments to filter Temperatures to delete.
     * @example
     * // Delete a few Temperatures
     * const { count } = await prisma.temperature.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TemperatureDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TemperatureDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Temperatures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemperatureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Temperatures
     * const temperature = await prisma.temperature.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TemperatureUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TemperatureUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Temperature.
     * @param {TemperatureUpsertArgs} args - Arguments to update or create a Temperature.
     * @example
     * // Update or create a Temperature
     * const temperature = await prisma.temperature.upsert({
     *   create: {
     *     // ... data to create a Temperature
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Temperature we want to update
     *   }
     * })
    **/
    upsert<T extends TemperatureUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TemperatureUpsertArgs<ExtArgs>>
    ): Prisma__TemperatureClient<$Result.GetResult<Prisma.$TemperaturePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Temperatures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemperatureCountArgs} args - Arguments to filter Temperatures to count.
     * @example
     * // Count the number of Temperatures
     * const count = await prisma.temperature.count({
     *   where: {
     *     // ... the filter for the Temperatures we want to count
     *   }
     * })
    **/
    count<T extends TemperatureCountArgs>(
      args?: Subset<T, TemperatureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TemperatureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Temperature.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemperatureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TemperatureAggregateArgs>(args: Subset<T, TemperatureAggregateArgs>): Prisma.PrismaPromise<GetTemperatureAggregateType<T>>

    /**
     * Group by Temperature.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemperatureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TemperatureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TemperatureGroupByArgs['orderBy'] }
        : { orderBy?: TemperatureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TemperatureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTemperatureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Temperature model
   */
  readonly fields: TemperatureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Temperature.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TemperatureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    instruction<T extends InstructionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstructionDefaultArgs<ExtArgs>>): Prisma__InstructionClient<$Result.GetResult<Prisma.$InstructionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Temperature model
   */ 
  interface TemperatureFieldRefs {
    readonly instructionId: FieldRef<"Temperature", 'String'>
    readonly temperature: FieldRef<"Temperature", 'Int'>
    readonly unit: FieldRef<"Temperature", 'TemperatureUnit'>
  }
    

  // Custom InputTypes

  /**
   * Temperature findUnique
   */
  export type TemperatureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Temperature
     */
    select?: TemperatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TemperatureInclude<ExtArgs> | null
    /**
     * Filter, which Temperature to fetch.
     */
    where: TemperatureWhereUniqueInput
  }


  /**
   * Temperature findUniqueOrThrow
   */
  export type TemperatureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Temperature
     */
    select?: TemperatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TemperatureInclude<ExtArgs> | null
    /**
     * Filter, which Temperature to fetch.
     */
    where: TemperatureWhereUniqueInput
  }


  /**
   * Temperature findFirst
   */
  export type TemperatureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Temperature
     */
    select?: TemperatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TemperatureInclude<ExtArgs> | null
    /**
     * Filter, which Temperature to fetch.
     */
    where?: TemperatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Temperatures to fetch.
     */
    orderBy?: TemperatureOrderByWithRelationInput | TemperatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Temperatures.
     */
    cursor?: TemperatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Temperatures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Temperatures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Temperatures.
     */
    distinct?: TemperatureScalarFieldEnum | TemperatureScalarFieldEnum[]
  }


  /**
   * Temperature findFirstOrThrow
   */
  export type TemperatureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Temperature
     */
    select?: TemperatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TemperatureInclude<ExtArgs> | null
    /**
     * Filter, which Temperature to fetch.
     */
    where?: TemperatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Temperatures to fetch.
     */
    orderBy?: TemperatureOrderByWithRelationInput | TemperatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Temperatures.
     */
    cursor?: TemperatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Temperatures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Temperatures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Temperatures.
     */
    distinct?: TemperatureScalarFieldEnum | TemperatureScalarFieldEnum[]
  }


  /**
   * Temperature findMany
   */
  export type TemperatureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Temperature
     */
    select?: TemperatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TemperatureInclude<ExtArgs> | null
    /**
     * Filter, which Temperatures to fetch.
     */
    where?: TemperatureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Temperatures to fetch.
     */
    orderBy?: TemperatureOrderByWithRelationInput | TemperatureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Temperatures.
     */
    cursor?: TemperatureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Temperatures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Temperatures.
     */
    skip?: number
    distinct?: TemperatureScalarFieldEnum | TemperatureScalarFieldEnum[]
  }


  /**
   * Temperature create
   */
  export type TemperatureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Temperature
     */
    select?: TemperatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TemperatureInclude<ExtArgs> | null
    /**
     * The data needed to create a Temperature.
     */
    data: XOR<TemperatureCreateInput, TemperatureUncheckedCreateInput>
  }


  /**
   * Temperature createMany
   */
  export type TemperatureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Temperatures.
     */
    data: TemperatureCreateManyInput | TemperatureCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Temperature update
   */
  export type TemperatureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Temperature
     */
    select?: TemperatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TemperatureInclude<ExtArgs> | null
    /**
     * The data needed to update a Temperature.
     */
    data: XOR<TemperatureUpdateInput, TemperatureUncheckedUpdateInput>
    /**
     * Choose, which Temperature to update.
     */
    where: TemperatureWhereUniqueInput
  }


  /**
   * Temperature updateMany
   */
  export type TemperatureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Temperatures.
     */
    data: XOR<TemperatureUpdateManyMutationInput, TemperatureUncheckedUpdateManyInput>
    /**
     * Filter which Temperatures to update
     */
    where?: TemperatureWhereInput
  }


  /**
   * Temperature upsert
   */
  export type TemperatureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Temperature
     */
    select?: TemperatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TemperatureInclude<ExtArgs> | null
    /**
     * The filter to search for the Temperature to update in case it exists.
     */
    where: TemperatureWhereUniqueInput
    /**
     * In case the Temperature found by the `where` argument doesn't exist, create a new Temperature with this data.
     */
    create: XOR<TemperatureCreateInput, TemperatureUncheckedCreateInput>
    /**
     * In case the Temperature was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TemperatureUpdateInput, TemperatureUncheckedUpdateInput>
  }


  /**
   * Temperature delete
   */
  export type TemperatureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Temperature
     */
    select?: TemperatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TemperatureInclude<ExtArgs> | null
    /**
     * Filter which Temperature to delete.
     */
    where: TemperatureWhereUniqueInput
  }


  /**
   * Temperature deleteMany
   */
  export type TemperatureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Temperatures to delete
     */
    where?: TemperatureWhereInput
  }


  /**
   * Temperature without action
   */
  export type TemperatureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Temperature
     */
    select?: TemperatureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TemperatureInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    password: 'password',
    salt: 'salt',
    image: 'image'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RecipeScalarFieldEnum: {
    id: 'id',
    createdOn: 'createdOn',
    updatedAt: 'updatedAt',
    title: 'title',
    authorId: 'authorId',
    description: 'description',
    image: 'image'
  };

  export type RecipeScalarFieldEnum = (typeof RecipeScalarFieldEnum)[keyof typeof RecipeScalarFieldEnum]


  export const IngredientScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type IngredientScalarFieldEnum = (typeof IngredientScalarFieldEnum)[keyof typeof IngredientScalarFieldEnum]


  export const RecipeIngredientScalarFieldEnum: {
    recipeId: 'recipeId',
    ingredientId: 'ingredientId',
    quantity: 'quantity',
    unit: 'unit'
  };

  export type RecipeIngredientScalarFieldEnum = (typeof RecipeIngredientScalarFieldEnum)[keyof typeof RecipeIngredientScalarFieldEnum]


  export const ConnectionScalarFieldEnum: {
    connectedWithId: 'connectedWithId',
    connectedById: 'connectedById',
    accepted: 'accepted'
  };

  export type ConnectionScalarFieldEnum = (typeof ConnectionScalarFieldEnum)[keyof typeof ConnectionScalarFieldEnum]


  export const RecipePermissionScalarFieldEnum: {
    recipeId: 'recipeId',
    userId: 'userId',
    permission: 'permission'
  };

  export type RecipePermissionScalarFieldEnum = (typeof RecipePermissionScalarFieldEnum)[keyof typeof RecipePermissionScalarFieldEnum]


  export const InstructionScalarFieldEnum: {
    id: 'id',
    description: 'description',
    recipeId: 'recipeId',
    step: 'step'
  };

  export type InstructionScalarFieldEnum = (typeof InstructionScalarFieldEnum)[keyof typeof InstructionScalarFieldEnum]


  export const TimeScalarFieldEnum: {
    instructionId: 'instructionId',
    hours: 'hours',
    minutes: 'minutes'
  };

  export type TimeScalarFieldEnum = (typeof TimeScalarFieldEnum)[keyof typeof TimeScalarFieldEnum]


  export const TemperatureScalarFieldEnum: {
    instructionId: 'instructionId',
    temperature: 'temperature',
    unit: 'unit'
  };

  export type TemperatureScalarFieldEnum = (typeof TemperatureScalarFieldEnum)[keyof typeof TemperatureScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'IngreidentUnit'
   */
  export type EnumIngreidentUnitFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IngreidentUnit'>
    


  /**
   * Reference to a field of type 'IngreidentUnit[]'
   */
  export type ListEnumIngreidentUnitFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IngreidentUnit[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'TemperatureUnit'
   */
  export type EnumTemperatureUnitFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TemperatureUnit'>
    


  /**
   * Reference to a field of type 'TemperatureUnit[]'
   */
  export type ListEnumTemperatureUnitFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TemperatureUnit[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    salt?: StringFilter<"User"> | string
    image?: StringNullableFilter<"User"> | string | null
    recipes?: RecipeListRelationFilter
    connectedWith?: ConnectionListRelationFilter
    connectedBy?: ConnectionListRelationFilter
    permissions?: RecipePermissionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    salt?: SortOrder
    image?: SortOrderInput | SortOrder
    recipes?: RecipeOrderByRelationAggregateInput
    connectedWith?: ConnectionOrderByRelationAggregateInput
    connectedBy?: ConnectionOrderByRelationAggregateInput
    permissions?: RecipePermissionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    salt?: StringFilter<"User"> | string
    image?: StringNullableFilter<"User"> | string | null
    recipes?: RecipeListRelationFilter
    connectedWith?: ConnectionListRelationFilter
    connectedBy?: ConnectionListRelationFilter
    permissions?: RecipePermissionListRelationFilter
  }, "id" | "email" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    salt?: SortOrder
    image?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    salt?: StringWithAggregatesFilter<"User"> | string
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type RecipeWhereInput = {
    AND?: RecipeWhereInput | RecipeWhereInput[]
    OR?: RecipeWhereInput[]
    NOT?: RecipeWhereInput | RecipeWhereInput[]
    id?: StringFilter<"Recipe"> | string
    createdOn?: DateTimeNullableFilter<"Recipe"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Recipe"> | Date | string | null
    title?: StringFilter<"Recipe"> | string
    authorId?: StringFilter<"Recipe"> | string
    description?: StringNullableFilter<"Recipe"> | string | null
    image?: StringNullableFilter<"Recipe"> | string | null
    author?: XOR<UserRelationFilter, UserWhereInput>
    ingredients?: RecipeIngredientListRelationFilter
    permissions?: RecipePermissionListRelationFilter
    instructions?: InstructionListRelationFilter
  }

  export type RecipeOrderByWithRelationInput = {
    id?: SortOrder
    createdOn?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    title?: SortOrder
    authorId?: SortOrder
    description?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    author?: UserOrderByWithRelationInput
    ingredients?: RecipeIngredientOrderByRelationAggregateInput
    permissions?: RecipePermissionOrderByRelationAggregateInput
    instructions?: InstructionOrderByRelationAggregateInput
  }

  export type RecipeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RecipeWhereInput | RecipeWhereInput[]
    OR?: RecipeWhereInput[]
    NOT?: RecipeWhereInput | RecipeWhereInput[]
    createdOn?: DateTimeNullableFilter<"Recipe"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Recipe"> | Date | string | null
    title?: StringFilter<"Recipe"> | string
    authorId?: StringFilter<"Recipe"> | string
    description?: StringNullableFilter<"Recipe"> | string | null
    image?: StringNullableFilter<"Recipe"> | string | null
    author?: XOR<UserRelationFilter, UserWhereInput>
    ingredients?: RecipeIngredientListRelationFilter
    permissions?: RecipePermissionListRelationFilter
    instructions?: InstructionListRelationFilter
  }, "id">

  export type RecipeOrderByWithAggregationInput = {
    id?: SortOrder
    createdOn?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    title?: SortOrder
    authorId?: SortOrder
    description?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    _count?: RecipeCountOrderByAggregateInput
    _max?: RecipeMaxOrderByAggregateInput
    _min?: RecipeMinOrderByAggregateInput
  }

  export type RecipeScalarWhereWithAggregatesInput = {
    AND?: RecipeScalarWhereWithAggregatesInput | RecipeScalarWhereWithAggregatesInput[]
    OR?: RecipeScalarWhereWithAggregatesInput[]
    NOT?: RecipeScalarWhereWithAggregatesInput | RecipeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Recipe"> | string
    createdOn?: DateTimeNullableWithAggregatesFilter<"Recipe"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Recipe"> | Date | string | null
    title?: StringWithAggregatesFilter<"Recipe"> | string
    authorId?: StringWithAggregatesFilter<"Recipe"> | string
    description?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
    image?: StringNullableWithAggregatesFilter<"Recipe"> | string | null
  }

  export type IngredientWhereInput = {
    AND?: IngredientWhereInput | IngredientWhereInput[]
    OR?: IngredientWhereInput[]
    NOT?: IngredientWhereInput | IngredientWhereInput[]
    id?: StringFilter<"Ingredient"> | string
    name?: StringFilter<"Ingredient"> | string
    recipes?: RecipeIngredientListRelationFilter
  }

  export type IngredientOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    recipes?: RecipeIngredientOrderByRelationAggregateInput
  }

  export type IngredientWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: IngredientWhereInput | IngredientWhereInput[]
    OR?: IngredientWhereInput[]
    NOT?: IngredientWhereInput | IngredientWhereInput[]
    recipes?: RecipeIngredientListRelationFilter
  }, "id" | "name">

  export type IngredientOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: IngredientCountOrderByAggregateInput
    _max?: IngredientMaxOrderByAggregateInput
    _min?: IngredientMinOrderByAggregateInput
  }

  export type IngredientScalarWhereWithAggregatesInput = {
    AND?: IngredientScalarWhereWithAggregatesInput | IngredientScalarWhereWithAggregatesInput[]
    OR?: IngredientScalarWhereWithAggregatesInput[]
    NOT?: IngredientScalarWhereWithAggregatesInput | IngredientScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Ingredient"> | string
    name?: StringWithAggregatesFilter<"Ingredient"> | string
  }

  export type RecipeIngredientWhereInput = {
    AND?: RecipeIngredientWhereInput | RecipeIngredientWhereInput[]
    OR?: RecipeIngredientWhereInput[]
    NOT?: RecipeIngredientWhereInput | RecipeIngredientWhereInput[]
    recipeId?: StringFilter<"RecipeIngredient"> | string
    ingredientId?: StringFilter<"RecipeIngredient"> | string
    quantity?: IntFilter<"RecipeIngredient"> | number
    unit?: EnumIngreidentUnitNullableFilter<"RecipeIngredient"> | $Enums.IngreidentUnit | null
    recipe?: XOR<RecipeRelationFilter, RecipeWhereInput>
    ingredient?: XOR<IngredientRelationFilter, IngredientWhereInput>
  }

  export type RecipeIngredientOrderByWithRelationInput = {
    recipeId?: SortOrder
    ingredientId?: SortOrder
    quantity?: SortOrder
    unit?: SortOrderInput | SortOrder
    recipe?: RecipeOrderByWithRelationInput
    ingredient?: IngredientOrderByWithRelationInput
  }

  export type RecipeIngredientWhereUniqueInput = Prisma.AtLeast<{
    RecipeIngredientId?: RecipeIngredientRecipeIngredientIdCompoundUniqueInput
    AND?: RecipeIngredientWhereInput | RecipeIngredientWhereInput[]
    OR?: RecipeIngredientWhereInput[]
    NOT?: RecipeIngredientWhereInput | RecipeIngredientWhereInput[]
    recipeId?: StringFilter<"RecipeIngredient"> | string
    ingredientId?: StringFilter<"RecipeIngredient"> | string
    quantity?: IntFilter<"RecipeIngredient"> | number
    unit?: EnumIngreidentUnitNullableFilter<"RecipeIngredient"> | $Enums.IngreidentUnit | null
    recipe?: XOR<RecipeRelationFilter, RecipeWhereInput>
    ingredient?: XOR<IngredientRelationFilter, IngredientWhereInput>
  }, "RecipeIngredientId">

  export type RecipeIngredientOrderByWithAggregationInput = {
    recipeId?: SortOrder
    ingredientId?: SortOrder
    quantity?: SortOrder
    unit?: SortOrderInput | SortOrder
    _count?: RecipeIngredientCountOrderByAggregateInput
    _avg?: RecipeIngredientAvgOrderByAggregateInput
    _max?: RecipeIngredientMaxOrderByAggregateInput
    _min?: RecipeIngredientMinOrderByAggregateInput
    _sum?: RecipeIngredientSumOrderByAggregateInput
  }

  export type RecipeIngredientScalarWhereWithAggregatesInput = {
    AND?: RecipeIngredientScalarWhereWithAggregatesInput | RecipeIngredientScalarWhereWithAggregatesInput[]
    OR?: RecipeIngredientScalarWhereWithAggregatesInput[]
    NOT?: RecipeIngredientScalarWhereWithAggregatesInput | RecipeIngredientScalarWhereWithAggregatesInput[]
    recipeId?: StringWithAggregatesFilter<"RecipeIngredient"> | string
    ingredientId?: StringWithAggregatesFilter<"RecipeIngredient"> | string
    quantity?: IntWithAggregatesFilter<"RecipeIngredient"> | number
    unit?: EnumIngreidentUnitNullableWithAggregatesFilter<"RecipeIngredient"> | $Enums.IngreidentUnit | null
  }

  export type ConnectionWhereInput = {
    AND?: ConnectionWhereInput | ConnectionWhereInput[]
    OR?: ConnectionWhereInput[]
    NOT?: ConnectionWhereInput | ConnectionWhereInput[]
    connectedWithId?: StringFilter<"Connection"> | string
    connectedById?: StringFilter<"Connection"> | string
    accepted?: BoolFilter<"Connection"> | boolean
    connectedWith?: XOR<UserRelationFilter, UserWhereInput>
    connectedBy?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ConnectionOrderByWithRelationInput = {
    connectedWithId?: SortOrder
    connectedById?: SortOrder
    accepted?: SortOrder
    connectedWith?: UserOrderByWithRelationInput
    connectedBy?: UserOrderByWithRelationInput
  }

  export type ConnectionWhereUniqueInput = Prisma.AtLeast<{
    ConnectionId?: ConnectionConnectionIdCompoundUniqueInput
    AND?: ConnectionWhereInput | ConnectionWhereInput[]
    OR?: ConnectionWhereInput[]
    NOT?: ConnectionWhereInput | ConnectionWhereInput[]
    connectedWithId?: StringFilter<"Connection"> | string
    connectedById?: StringFilter<"Connection"> | string
    accepted?: BoolFilter<"Connection"> | boolean
    connectedWith?: XOR<UserRelationFilter, UserWhereInput>
    connectedBy?: XOR<UserRelationFilter, UserWhereInput>
  }, "ConnectionId">

  export type ConnectionOrderByWithAggregationInput = {
    connectedWithId?: SortOrder
    connectedById?: SortOrder
    accepted?: SortOrder
    _count?: ConnectionCountOrderByAggregateInput
    _max?: ConnectionMaxOrderByAggregateInput
    _min?: ConnectionMinOrderByAggregateInput
  }

  export type ConnectionScalarWhereWithAggregatesInput = {
    AND?: ConnectionScalarWhereWithAggregatesInput | ConnectionScalarWhereWithAggregatesInput[]
    OR?: ConnectionScalarWhereWithAggregatesInput[]
    NOT?: ConnectionScalarWhereWithAggregatesInput | ConnectionScalarWhereWithAggregatesInput[]
    connectedWithId?: StringWithAggregatesFilter<"Connection"> | string
    connectedById?: StringWithAggregatesFilter<"Connection"> | string
    accepted?: BoolWithAggregatesFilter<"Connection"> | boolean
  }

  export type RecipePermissionWhereInput = {
    AND?: RecipePermissionWhereInput | RecipePermissionWhereInput[]
    OR?: RecipePermissionWhereInput[]
    NOT?: RecipePermissionWhereInput | RecipePermissionWhereInput[]
    recipeId?: StringFilter<"RecipePermission"> | string
    userId?: StringFilter<"RecipePermission"> | string
    permission?: EnumRoleFilter<"RecipePermission"> | $Enums.Role
    recipe?: XOR<RecipeRelationFilter, RecipeWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type RecipePermissionOrderByWithRelationInput = {
    recipeId?: SortOrder
    userId?: SortOrder
    permission?: SortOrder
    recipe?: RecipeOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type RecipePermissionWhereUniqueInput = Prisma.AtLeast<{
    PermissionId?: RecipePermissionPermissionIdCompoundUniqueInput
    AND?: RecipePermissionWhereInput | RecipePermissionWhereInput[]
    OR?: RecipePermissionWhereInput[]
    NOT?: RecipePermissionWhereInput | RecipePermissionWhereInput[]
    recipeId?: StringFilter<"RecipePermission"> | string
    userId?: StringFilter<"RecipePermission"> | string
    permission?: EnumRoleFilter<"RecipePermission"> | $Enums.Role
    recipe?: XOR<RecipeRelationFilter, RecipeWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "PermissionId">

  export type RecipePermissionOrderByWithAggregationInput = {
    recipeId?: SortOrder
    userId?: SortOrder
    permission?: SortOrder
    _count?: RecipePermissionCountOrderByAggregateInput
    _max?: RecipePermissionMaxOrderByAggregateInput
    _min?: RecipePermissionMinOrderByAggregateInput
  }

  export type RecipePermissionScalarWhereWithAggregatesInput = {
    AND?: RecipePermissionScalarWhereWithAggregatesInput | RecipePermissionScalarWhereWithAggregatesInput[]
    OR?: RecipePermissionScalarWhereWithAggregatesInput[]
    NOT?: RecipePermissionScalarWhereWithAggregatesInput | RecipePermissionScalarWhereWithAggregatesInput[]
    recipeId?: StringWithAggregatesFilter<"RecipePermission"> | string
    userId?: StringWithAggregatesFilter<"RecipePermission"> | string
    permission?: EnumRoleWithAggregatesFilter<"RecipePermission"> | $Enums.Role
  }

  export type InstructionWhereInput = {
    AND?: InstructionWhereInput | InstructionWhereInput[]
    OR?: InstructionWhereInput[]
    NOT?: InstructionWhereInput | InstructionWhereInput[]
    id?: StringFilter<"Instruction"> | string
    description?: StringFilter<"Instruction"> | string
    recipeId?: StringFilter<"Instruction"> | string
    step?: IntFilter<"Instruction"> | number
    recipe?: XOR<RecipeRelationFilter, RecipeWhereInput>
    time?: XOR<TimeNullableRelationFilter, TimeWhereInput> | null
    temperature?: XOR<TemperatureNullableRelationFilter, TemperatureWhereInput> | null
  }

  export type InstructionOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    recipeId?: SortOrder
    step?: SortOrder
    recipe?: RecipeOrderByWithRelationInput
    time?: TimeOrderByWithRelationInput
    temperature?: TemperatureOrderByWithRelationInput
  }

  export type InstructionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InstructionWhereInput | InstructionWhereInput[]
    OR?: InstructionWhereInput[]
    NOT?: InstructionWhereInput | InstructionWhereInput[]
    description?: StringFilter<"Instruction"> | string
    recipeId?: StringFilter<"Instruction"> | string
    step?: IntFilter<"Instruction"> | number
    recipe?: XOR<RecipeRelationFilter, RecipeWhereInput>
    time?: XOR<TimeNullableRelationFilter, TimeWhereInput> | null
    temperature?: XOR<TemperatureNullableRelationFilter, TemperatureWhereInput> | null
  }, "id">

  export type InstructionOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    recipeId?: SortOrder
    step?: SortOrder
    _count?: InstructionCountOrderByAggregateInput
    _avg?: InstructionAvgOrderByAggregateInput
    _max?: InstructionMaxOrderByAggregateInput
    _min?: InstructionMinOrderByAggregateInput
    _sum?: InstructionSumOrderByAggregateInput
  }

  export type InstructionScalarWhereWithAggregatesInput = {
    AND?: InstructionScalarWhereWithAggregatesInput | InstructionScalarWhereWithAggregatesInput[]
    OR?: InstructionScalarWhereWithAggregatesInput[]
    NOT?: InstructionScalarWhereWithAggregatesInput | InstructionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Instruction"> | string
    description?: StringWithAggregatesFilter<"Instruction"> | string
    recipeId?: StringWithAggregatesFilter<"Instruction"> | string
    step?: IntWithAggregatesFilter<"Instruction"> | number
  }

  export type TimeWhereInput = {
    AND?: TimeWhereInput | TimeWhereInput[]
    OR?: TimeWhereInput[]
    NOT?: TimeWhereInput | TimeWhereInput[]
    instructionId?: StringFilter<"Time"> | string
    hours?: IntNullableFilter<"Time"> | number | null
    minutes?: IntNullableFilter<"Time"> | number | null
    instruction?: XOR<InstructionRelationFilter, InstructionWhereInput>
  }

  export type TimeOrderByWithRelationInput = {
    instructionId?: SortOrder
    hours?: SortOrderInput | SortOrder
    minutes?: SortOrderInput | SortOrder
    instruction?: InstructionOrderByWithRelationInput
  }

  export type TimeWhereUniqueInput = Prisma.AtLeast<{
    instructionId?: string
    AND?: TimeWhereInput | TimeWhereInput[]
    OR?: TimeWhereInput[]
    NOT?: TimeWhereInput | TimeWhereInput[]
    hours?: IntNullableFilter<"Time"> | number | null
    minutes?: IntNullableFilter<"Time"> | number | null
    instruction?: XOR<InstructionRelationFilter, InstructionWhereInput>
  }, "instructionId">

  export type TimeOrderByWithAggregationInput = {
    instructionId?: SortOrder
    hours?: SortOrderInput | SortOrder
    minutes?: SortOrderInput | SortOrder
    _count?: TimeCountOrderByAggregateInput
    _avg?: TimeAvgOrderByAggregateInput
    _max?: TimeMaxOrderByAggregateInput
    _min?: TimeMinOrderByAggregateInput
    _sum?: TimeSumOrderByAggregateInput
  }

  export type TimeScalarWhereWithAggregatesInput = {
    AND?: TimeScalarWhereWithAggregatesInput | TimeScalarWhereWithAggregatesInput[]
    OR?: TimeScalarWhereWithAggregatesInput[]
    NOT?: TimeScalarWhereWithAggregatesInput | TimeScalarWhereWithAggregatesInput[]
    instructionId?: StringWithAggregatesFilter<"Time"> | string
    hours?: IntNullableWithAggregatesFilter<"Time"> | number | null
    minutes?: IntNullableWithAggregatesFilter<"Time"> | number | null
  }

  export type TemperatureWhereInput = {
    AND?: TemperatureWhereInput | TemperatureWhereInput[]
    OR?: TemperatureWhereInput[]
    NOT?: TemperatureWhereInput | TemperatureWhereInput[]
    instructionId?: StringFilter<"Temperature"> | string
    temperature?: IntNullableFilter<"Temperature"> | number | null
    unit?: EnumTemperatureUnitNullableFilter<"Temperature"> | $Enums.TemperatureUnit | null
    instruction?: XOR<InstructionRelationFilter, InstructionWhereInput>
  }

  export type TemperatureOrderByWithRelationInput = {
    instructionId?: SortOrder
    temperature?: SortOrderInput | SortOrder
    unit?: SortOrderInput | SortOrder
    instruction?: InstructionOrderByWithRelationInput
  }

  export type TemperatureWhereUniqueInput = Prisma.AtLeast<{
    instructionId?: string
    AND?: TemperatureWhereInput | TemperatureWhereInput[]
    OR?: TemperatureWhereInput[]
    NOT?: TemperatureWhereInput | TemperatureWhereInput[]
    temperature?: IntNullableFilter<"Temperature"> | number | null
    unit?: EnumTemperatureUnitNullableFilter<"Temperature"> | $Enums.TemperatureUnit | null
    instruction?: XOR<InstructionRelationFilter, InstructionWhereInput>
  }, "instructionId">

  export type TemperatureOrderByWithAggregationInput = {
    instructionId?: SortOrder
    temperature?: SortOrderInput | SortOrder
    unit?: SortOrderInput | SortOrder
    _count?: TemperatureCountOrderByAggregateInput
    _avg?: TemperatureAvgOrderByAggregateInput
    _max?: TemperatureMaxOrderByAggregateInput
    _min?: TemperatureMinOrderByAggregateInput
    _sum?: TemperatureSumOrderByAggregateInput
  }

  export type TemperatureScalarWhereWithAggregatesInput = {
    AND?: TemperatureScalarWhereWithAggregatesInput | TemperatureScalarWhereWithAggregatesInput[]
    OR?: TemperatureScalarWhereWithAggregatesInput[]
    NOT?: TemperatureScalarWhereWithAggregatesInput | TemperatureScalarWhereWithAggregatesInput[]
    instructionId?: StringWithAggregatesFilter<"Temperature"> | string
    temperature?: IntNullableWithAggregatesFilter<"Temperature"> | number | null
    unit?: EnumTemperatureUnitNullableWithAggregatesFilter<"Temperature"> | $Enums.TemperatureUnit | null
  }

  export type UserCreateInput = {
    id?: string
    email: string
    username: string
    password: string
    salt: string
    image?: string | null
    recipes?: RecipeCreateNestedManyWithoutAuthorInput
    connectedWith?: ConnectionCreateNestedManyWithoutConnectedWithInput
    connectedBy?: ConnectionCreateNestedManyWithoutConnectedByInput
    permissions?: RecipePermissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    username: string
    password: string
    salt: string
    image?: string | null
    recipes?: RecipeUncheckedCreateNestedManyWithoutAuthorInput
    connectedWith?: ConnectionUncheckedCreateNestedManyWithoutConnectedWithInput
    connectedBy?: ConnectionUncheckedCreateNestedManyWithoutConnectedByInput
    permissions?: RecipePermissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    recipes?: RecipeUpdateManyWithoutAuthorNestedInput
    connectedWith?: ConnectionUpdateManyWithoutConnectedWithNestedInput
    connectedBy?: ConnectionUpdateManyWithoutConnectedByNestedInput
    permissions?: RecipePermissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    recipes?: RecipeUncheckedUpdateManyWithoutAuthorNestedInput
    connectedWith?: ConnectionUncheckedUpdateManyWithoutConnectedWithNestedInput
    connectedBy?: ConnectionUncheckedUpdateManyWithoutConnectedByNestedInput
    permissions?: RecipePermissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    username: string
    password: string
    salt: string
    image?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecipeCreateInput = {
    id?: string
    createdOn?: Date | string | null
    updatedAt?: Date | string | null
    title: string
    description?: string | null
    image?: string | null
    author: UserCreateNestedOneWithoutRecipesInput
    ingredients?: RecipeIngredientCreateNestedManyWithoutRecipeInput
    permissions?: RecipePermissionCreateNestedManyWithoutRecipeInput
    instructions?: InstructionCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUncheckedCreateInput = {
    id?: string
    createdOn?: Date | string | null
    updatedAt?: Date | string | null
    title: string
    authorId: string
    description?: string | null
    image?: string | null
    ingredients?: RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInput
    permissions?: RecipePermissionUncheckedCreateNestedManyWithoutRecipeInput
    instructions?: InstructionUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    author?: UserUpdateOneRequiredWithoutRecipesNestedInput
    ingredients?: RecipeIngredientUpdateManyWithoutRecipeNestedInput
    permissions?: RecipePermissionUpdateManyWithoutRecipeNestedInput
    instructions?: InstructionUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInput
    permissions?: RecipePermissionUncheckedUpdateManyWithoutRecipeNestedInput
    instructions?: InstructionUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeCreateManyInput = {
    id?: string
    createdOn?: Date | string | null
    updatedAt?: Date | string | null
    title: string
    authorId: string
    description?: string | null
    image?: string | null
  }

  export type RecipeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecipeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IngredientCreateInput = {
    id?: string
    name: string
    recipes?: RecipeIngredientCreateNestedManyWithoutIngredientInput
  }

  export type IngredientUncheckedCreateInput = {
    id?: string
    name: string
    recipes?: RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInput
  }

  export type IngredientUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    recipes?: RecipeIngredientUpdateManyWithoutIngredientNestedInput
  }

  export type IngredientUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    recipes?: RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInput
  }

  export type IngredientCreateManyInput = {
    id?: string
    name: string
  }

  export type IngredientUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type IngredientUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RecipeIngredientCreateInput = {
    quantity: number
    unit?: $Enums.IngreidentUnit | null
    recipe: RecipeCreateNestedOneWithoutIngredientsInput
    ingredient: IngredientCreateNestedOneWithoutRecipesInput
  }

  export type RecipeIngredientUncheckedCreateInput = {
    recipeId: string
    ingredientId: string
    quantity: number
    unit?: $Enums.IngreidentUnit | null
  }

  export type RecipeIngredientUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: NullableEnumIngreidentUnitFieldUpdateOperationsInput | $Enums.IngreidentUnit | null
    recipe?: RecipeUpdateOneRequiredWithoutIngredientsNestedInput
    ingredient?: IngredientUpdateOneRequiredWithoutRecipesNestedInput
  }

  export type RecipeIngredientUncheckedUpdateInput = {
    recipeId?: StringFieldUpdateOperationsInput | string
    ingredientId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: NullableEnumIngreidentUnitFieldUpdateOperationsInput | $Enums.IngreidentUnit | null
  }

  export type RecipeIngredientCreateManyInput = {
    recipeId: string
    ingredientId: string
    quantity: number
    unit?: $Enums.IngreidentUnit | null
  }

  export type RecipeIngredientUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: NullableEnumIngreidentUnitFieldUpdateOperationsInput | $Enums.IngreidentUnit | null
  }

  export type RecipeIngredientUncheckedUpdateManyInput = {
    recipeId?: StringFieldUpdateOperationsInput | string
    ingredientId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: NullableEnumIngreidentUnitFieldUpdateOperationsInput | $Enums.IngreidentUnit | null
  }

  export type ConnectionCreateInput = {
    accepted?: boolean
    connectedWith: UserCreateNestedOneWithoutConnectedWithInput
    connectedBy: UserCreateNestedOneWithoutConnectedByInput
  }

  export type ConnectionUncheckedCreateInput = {
    connectedWithId: string
    connectedById: string
    accepted?: boolean
  }

  export type ConnectionUpdateInput = {
    accepted?: BoolFieldUpdateOperationsInput | boolean
    connectedWith?: UserUpdateOneRequiredWithoutConnectedWithNestedInput
    connectedBy?: UserUpdateOneRequiredWithoutConnectedByNestedInput
  }

  export type ConnectionUncheckedUpdateInput = {
    connectedWithId?: StringFieldUpdateOperationsInput | string
    connectedById?: StringFieldUpdateOperationsInput | string
    accepted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ConnectionCreateManyInput = {
    connectedWithId: string
    connectedById: string
    accepted?: boolean
  }

  export type ConnectionUpdateManyMutationInput = {
    accepted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ConnectionUncheckedUpdateManyInput = {
    connectedWithId?: StringFieldUpdateOperationsInput | string
    connectedById?: StringFieldUpdateOperationsInput | string
    accepted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RecipePermissionCreateInput = {
    permission: $Enums.Role
    recipe: RecipeCreateNestedOneWithoutPermissionsInput
    user: UserCreateNestedOneWithoutPermissionsInput
  }

  export type RecipePermissionUncheckedCreateInput = {
    recipeId: string
    userId: string
    permission: $Enums.Role
  }

  export type RecipePermissionUpdateInput = {
    permission?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    recipe?: RecipeUpdateOneRequiredWithoutPermissionsNestedInput
    user?: UserUpdateOneRequiredWithoutPermissionsNestedInput
  }

  export type RecipePermissionUncheckedUpdateInput = {
    recipeId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    permission?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type RecipePermissionCreateManyInput = {
    recipeId: string
    userId: string
    permission: $Enums.Role
  }

  export type RecipePermissionUpdateManyMutationInput = {
    permission?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type RecipePermissionUncheckedUpdateManyInput = {
    recipeId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    permission?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type InstructionCreateInput = {
    id?: string
    description: string
    step: number
    recipe: RecipeCreateNestedOneWithoutInstructionsInput
    time?: TimeCreateNestedOneWithoutInstructionInput
    temperature?: TemperatureCreateNestedOneWithoutInstructionInput
  }

  export type InstructionUncheckedCreateInput = {
    id?: string
    description: string
    recipeId: string
    step: number
    time?: TimeUncheckedCreateNestedOneWithoutInstructionInput
    temperature?: TemperatureUncheckedCreateNestedOneWithoutInstructionInput
  }

  export type InstructionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    step?: IntFieldUpdateOperationsInput | number
    recipe?: RecipeUpdateOneRequiredWithoutInstructionsNestedInput
    time?: TimeUpdateOneWithoutInstructionNestedInput
    temperature?: TemperatureUpdateOneWithoutInstructionNestedInput
  }

  export type InstructionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    step?: IntFieldUpdateOperationsInput | number
    time?: TimeUncheckedUpdateOneWithoutInstructionNestedInput
    temperature?: TemperatureUncheckedUpdateOneWithoutInstructionNestedInput
  }

  export type InstructionCreateManyInput = {
    id?: string
    description: string
    recipeId: string
    step: number
  }

  export type InstructionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    step?: IntFieldUpdateOperationsInput | number
  }

  export type InstructionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    step?: IntFieldUpdateOperationsInput | number
  }

  export type TimeCreateInput = {
    hours?: number | null
    minutes?: number | null
    instruction: InstructionCreateNestedOneWithoutTimeInput
  }

  export type TimeUncheckedCreateInput = {
    instructionId: string
    hours?: number | null
    minutes?: number | null
  }

  export type TimeUpdateInput = {
    hours?: NullableIntFieldUpdateOperationsInput | number | null
    minutes?: NullableIntFieldUpdateOperationsInput | number | null
    instruction?: InstructionUpdateOneRequiredWithoutTimeNestedInput
  }

  export type TimeUncheckedUpdateInput = {
    instructionId?: StringFieldUpdateOperationsInput | string
    hours?: NullableIntFieldUpdateOperationsInput | number | null
    minutes?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TimeCreateManyInput = {
    instructionId: string
    hours?: number | null
    minutes?: number | null
  }

  export type TimeUpdateManyMutationInput = {
    hours?: NullableIntFieldUpdateOperationsInput | number | null
    minutes?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TimeUncheckedUpdateManyInput = {
    instructionId?: StringFieldUpdateOperationsInput | string
    hours?: NullableIntFieldUpdateOperationsInput | number | null
    minutes?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TemperatureCreateInput = {
    temperature?: number | null
    unit?: $Enums.TemperatureUnit | null
    instruction: InstructionCreateNestedOneWithoutTemperatureInput
  }

  export type TemperatureUncheckedCreateInput = {
    instructionId: string
    temperature?: number | null
    unit?: $Enums.TemperatureUnit | null
  }

  export type TemperatureUpdateInput = {
    temperature?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableEnumTemperatureUnitFieldUpdateOperationsInput | $Enums.TemperatureUnit | null
    instruction?: InstructionUpdateOneRequiredWithoutTemperatureNestedInput
  }

  export type TemperatureUncheckedUpdateInput = {
    instructionId?: StringFieldUpdateOperationsInput | string
    temperature?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableEnumTemperatureUnitFieldUpdateOperationsInput | $Enums.TemperatureUnit | null
  }

  export type TemperatureCreateManyInput = {
    instructionId: string
    temperature?: number | null
    unit?: $Enums.TemperatureUnit | null
  }

  export type TemperatureUpdateManyMutationInput = {
    temperature?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableEnumTemperatureUnitFieldUpdateOperationsInput | $Enums.TemperatureUnit | null
  }

  export type TemperatureUncheckedUpdateManyInput = {
    instructionId?: StringFieldUpdateOperationsInput | string
    temperature?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableEnumTemperatureUnitFieldUpdateOperationsInput | $Enums.TemperatureUnit | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type RecipeListRelationFilter = {
    every?: RecipeWhereInput
    some?: RecipeWhereInput
    none?: RecipeWhereInput
  }

  export type ConnectionListRelationFilter = {
    every?: ConnectionWhereInput
    some?: ConnectionWhereInput
    none?: ConnectionWhereInput
  }

  export type RecipePermissionListRelationFilter = {
    every?: RecipePermissionWhereInput
    some?: RecipePermissionWhereInput
    none?: RecipePermissionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type RecipeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConnectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RecipePermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    salt?: SortOrder
    image?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    salt?: SortOrder
    image?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    salt?: SortOrder
    image?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type RecipeIngredientListRelationFilter = {
    every?: RecipeIngredientWhereInput
    some?: RecipeIngredientWhereInput
    none?: RecipeIngredientWhereInput
  }

  export type InstructionListRelationFilter = {
    every?: InstructionWhereInput
    some?: InstructionWhereInput
    none?: InstructionWhereInput
  }

  export type RecipeIngredientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InstructionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RecipeCountOrderByAggregateInput = {
    id?: SortOrder
    createdOn?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrder
    authorId?: SortOrder
    description?: SortOrder
    image?: SortOrder
  }

  export type RecipeMaxOrderByAggregateInput = {
    id?: SortOrder
    createdOn?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrder
    authorId?: SortOrder
    description?: SortOrder
    image?: SortOrder
  }

  export type RecipeMinOrderByAggregateInput = {
    id?: SortOrder
    createdOn?: SortOrder
    updatedAt?: SortOrder
    title?: SortOrder
    authorId?: SortOrder
    description?: SortOrder
    image?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IngredientCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type IngredientMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type IngredientMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumIngreidentUnitNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.IngreidentUnit | EnumIngreidentUnitFieldRefInput<$PrismaModel> | null
    in?: $Enums.IngreidentUnit[] | ListEnumIngreidentUnitFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.IngreidentUnit[] | ListEnumIngreidentUnitFieldRefInput<$PrismaModel> | null
    not?: NestedEnumIngreidentUnitNullableFilter<$PrismaModel> | $Enums.IngreidentUnit | null
  }

  export type RecipeRelationFilter = {
    is?: RecipeWhereInput
    isNot?: RecipeWhereInput
  }

  export type IngredientRelationFilter = {
    is?: IngredientWhereInput
    isNot?: IngredientWhereInput
  }

  export type RecipeIngredientRecipeIngredientIdCompoundUniqueInput = {
    recipeId: string
    ingredientId: string
  }

  export type RecipeIngredientCountOrderByAggregateInput = {
    recipeId?: SortOrder
    ingredientId?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
  }

  export type RecipeIngredientAvgOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type RecipeIngredientMaxOrderByAggregateInput = {
    recipeId?: SortOrder
    ingredientId?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
  }

  export type RecipeIngredientMinOrderByAggregateInput = {
    recipeId?: SortOrder
    ingredientId?: SortOrder
    quantity?: SortOrder
    unit?: SortOrder
  }

  export type RecipeIngredientSumOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumIngreidentUnitNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IngreidentUnit | EnumIngreidentUnitFieldRefInput<$PrismaModel> | null
    in?: $Enums.IngreidentUnit[] | ListEnumIngreidentUnitFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.IngreidentUnit[] | ListEnumIngreidentUnitFieldRefInput<$PrismaModel> | null
    not?: NestedEnumIngreidentUnitNullableWithAggregatesFilter<$PrismaModel> | $Enums.IngreidentUnit | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumIngreidentUnitNullableFilter<$PrismaModel>
    _max?: NestedEnumIngreidentUnitNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ConnectionConnectionIdCompoundUniqueInput = {
    connectedWithId: string
    connectedById: string
  }

  export type ConnectionCountOrderByAggregateInput = {
    connectedWithId?: SortOrder
    connectedById?: SortOrder
    accepted?: SortOrder
  }

  export type ConnectionMaxOrderByAggregateInput = {
    connectedWithId?: SortOrder
    connectedById?: SortOrder
    accepted?: SortOrder
  }

  export type ConnectionMinOrderByAggregateInput = {
    connectedWithId?: SortOrder
    connectedById?: SortOrder
    accepted?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type RecipePermissionPermissionIdCompoundUniqueInput = {
    recipeId: string
    userId: string
  }

  export type RecipePermissionCountOrderByAggregateInput = {
    recipeId?: SortOrder
    userId?: SortOrder
    permission?: SortOrder
  }

  export type RecipePermissionMaxOrderByAggregateInput = {
    recipeId?: SortOrder
    userId?: SortOrder
    permission?: SortOrder
  }

  export type RecipePermissionMinOrderByAggregateInput = {
    recipeId?: SortOrder
    userId?: SortOrder
    permission?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type TimeNullableRelationFilter = {
    is?: TimeWhereInput | null
    isNot?: TimeWhereInput | null
  }

  export type TemperatureNullableRelationFilter = {
    is?: TemperatureWhereInput | null
    isNot?: TemperatureWhereInput | null
  }

  export type InstructionCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    recipeId?: SortOrder
    step?: SortOrder
  }

  export type InstructionAvgOrderByAggregateInput = {
    step?: SortOrder
  }

  export type InstructionMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    recipeId?: SortOrder
    step?: SortOrder
  }

  export type InstructionMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    recipeId?: SortOrder
    step?: SortOrder
  }

  export type InstructionSumOrderByAggregateInput = {
    step?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type InstructionRelationFilter = {
    is?: InstructionWhereInput
    isNot?: InstructionWhereInput
  }

  export type TimeCountOrderByAggregateInput = {
    instructionId?: SortOrder
    hours?: SortOrder
    minutes?: SortOrder
  }

  export type TimeAvgOrderByAggregateInput = {
    hours?: SortOrder
    minutes?: SortOrder
  }

  export type TimeMaxOrderByAggregateInput = {
    instructionId?: SortOrder
    hours?: SortOrder
    minutes?: SortOrder
  }

  export type TimeMinOrderByAggregateInput = {
    instructionId?: SortOrder
    hours?: SortOrder
    minutes?: SortOrder
  }

  export type TimeSumOrderByAggregateInput = {
    hours?: SortOrder
    minutes?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumTemperatureUnitNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.TemperatureUnit | EnumTemperatureUnitFieldRefInput<$PrismaModel> | null
    in?: $Enums.TemperatureUnit[] | ListEnumTemperatureUnitFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.TemperatureUnit[] | ListEnumTemperatureUnitFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTemperatureUnitNullableFilter<$PrismaModel> | $Enums.TemperatureUnit | null
  }

  export type TemperatureCountOrderByAggregateInput = {
    instructionId?: SortOrder
    temperature?: SortOrder
    unit?: SortOrder
  }

  export type TemperatureAvgOrderByAggregateInput = {
    temperature?: SortOrder
  }

  export type TemperatureMaxOrderByAggregateInput = {
    instructionId?: SortOrder
    temperature?: SortOrder
    unit?: SortOrder
  }

  export type TemperatureMinOrderByAggregateInput = {
    instructionId?: SortOrder
    temperature?: SortOrder
    unit?: SortOrder
  }

  export type TemperatureSumOrderByAggregateInput = {
    temperature?: SortOrder
  }

  export type EnumTemperatureUnitNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TemperatureUnit | EnumTemperatureUnitFieldRefInput<$PrismaModel> | null
    in?: $Enums.TemperatureUnit[] | ListEnumTemperatureUnitFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.TemperatureUnit[] | ListEnumTemperatureUnitFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTemperatureUnitNullableWithAggregatesFilter<$PrismaModel> | $Enums.TemperatureUnit | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumTemperatureUnitNullableFilter<$PrismaModel>
    _max?: NestedEnumTemperatureUnitNullableFilter<$PrismaModel>
  }

  export type RecipeCreateNestedManyWithoutAuthorInput = {
    create?: XOR<RecipeCreateWithoutAuthorInput, RecipeUncheckedCreateWithoutAuthorInput> | RecipeCreateWithoutAuthorInput[] | RecipeUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: RecipeCreateOrConnectWithoutAuthorInput | RecipeCreateOrConnectWithoutAuthorInput[]
    createMany?: RecipeCreateManyAuthorInputEnvelope
    connect?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
  }

  export type ConnectionCreateNestedManyWithoutConnectedWithInput = {
    create?: XOR<ConnectionCreateWithoutConnectedWithInput, ConnectionUncheckedCreateWithoutConnectedWithInput> | ConnectionCreateWithoutConnectedWithInput[] | ConnectionUncheckedCreateWithoutConnectedWithInput[]
    connectOrCreate?: ConnectionCreateOrConnectWithoutConnectedWithInput | ConnectionCreateOrConnectWithoutConnectedWithInput[]
    createMany?: ConnectionCreateManyConnectedWithInputEnvelope
    connect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
  }

  export type ConnectionCreateNestedManyWithoutConnectedByInput = {
    create?: XOR<ConnectionCreateWithoutConnectedByInput, ConnectionUncheckedCreateWithoutConnectedByInput> | ConnectionCreateWithoutConnectedByInput[] | ConnectionUncheckedCreateWithoutConnectedByInput[]
    connectOrCreate?: ConnectionCreateOrConnectWithoutConnectedByInput | ConnectionCreateOrConnectWithoutConnectedByInput[]
    createMany?: ConnectionCreateManyConnectedByInputEnvelope
    connect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
  }

  export type RecipePermissionCreateNestedManyWithoutUserInput = {
    create?: XOR<RecipePermissionCreateWithoutUserInput, RecipePermissionUncheckedCreateWithoutUserInput> | RecipePermissionCreateWithoutUserInput[] | RecipePermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecipePermissionCreateOrConnectWithoutUserInput | RecipePermissionCreateOrConnectWithoutUserInput[]
    createMany?: RecipePermissionCreateManyUserInputEnvelope
    connect?: RecipePermissionWhereUniqueInput | RecipePermissionWhereUniqueInput[]
  }

  export type RecipeUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<RecipeCreateWithoutAuthorInput, RecipeUncheckedCreateWithoutAuthorInput> | RecipeCreateWithoutAuthorInput[] | RecipeUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: RecipeCreateOrConnectWithoutAuthorInput | RecipeCreateOrConnectWithoutAuthorInput[]
    createMany?: RecipeCreateManyAuthorInputEnvelope
    connect?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
  }

  export type ConnectionUncheckedCreateNestedManyWithoutConnectedWithInput = {
    create?: XOR<ConnectionCreateWithoutConnectedWithInput, ConnectionUncheckedCreateWithoutConnectedWithInput> | ConnectionCreateWithoutConnectedWithInput[] | ConnectionUncheckedCreateWithoutConnectedWithInput[]
    connectOrCreate?: ConnectionCreateOrConnectWithoutConnectedWithInput | ConnectionCreateOrConnectWithoutConnectedWithInput[]
    createMany?: ConnectionCreateManyConnectedWithInputEnvelope
    connect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
  }

  export type ConnectionUncheckedCreateNestedManyWithoutConnectedByInput = {
    create?: XOR<ConnectionCreateWithoutConnectedByInput, ConnectionUncheckedCreateWithoutConnectedByInput> | ConnectionCreateWithoutConnectedByInput[] | ConnectionUncheckedCreateWithoutConnectedByInput[]
    connectOrCreate?: ConnectionCreateOrConnectWithoutConnectedByInput | ConnectionCreateOrConnectWithoutConnectedByInput[]
    createMany?: ConnectionCreateManyConnectedByInputEnvelope
    connect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
  }

  export type RecipePermissionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RecipePermissionCreateWithoutUserInput, RecipePermissionUncheckedCreateWithoutUserInput> | RecipePermissionCreateWithoutUserInput[] | RecipePermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecipePermissionCreateOrConnectWithoutUserInput | RecipePermissionCreateOrConnectWithoutUserInput[]
    createMany?: RecipePermissionCreateManyUserInputEnvelope
    connect?: RecipePermissionWhereUniqueInput | RecipePermissionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type RecipeUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<RecipeCreateWithoutAuthorInput, RecipeUncheckedCreateWithoutAuthorInput> | RecipeCreateWithoutAuthorInput[] | RecipeUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: RecipeCreateOrConnectWithoutAuthorInput | RecipeCreateOrConnectWithoutAuthorInput[]
    upsert?: RecipeUpsertWithWhereUniqueWithoutAuthorInput | RecipeUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: RecipeCreateManyAuthorInputEnvelope
    set?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    disconnect?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    delete?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    connect?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    update?: RecipeUpdateWithWhereUniqueWithoutAuthorInput | RecipeUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: RecipeUpdateManyWithWhereWithoutAuthorInput | RecipeUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: RecipeScalarWhereInput | RecipeScalarWhereInput[]
  }

  export type ConnectionUpdateManyWithoutConnectedWithNestedInput = {
    create?: XOR<ConnectionCreateWithoutConnectedWithInput, ConnectionUncheckedCreateWithoutConnectedWithInput> | ConnectionCreateWithoutConnectedWithInput[] | ConnectionUncheckedCreateWithoutConnectedWithInput[]
    connectOrCreate?: ConnectionCreateOrConnectWithoutConnectedWithInput | ConnectionCreateOrConnectWithoutConnectedWithInput[]
    upsert?: ConnectionUpsertWithWhereUniqueWithoutConnectedWithInput | ConnectionUpsertWithWhereUniqueWithoutConnectedWithInput[]
    createMany?: ConnectionCreateManyConnectedWithInputEnvelope
    set?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    disconnect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    delete?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    connect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    update?: ConnectionUpdateWithWhereUniqueWithoutConnectedWithInput | ConnectionUpdateWithWhereUniqueWithoutConnectedWithInput[]
    updateMany?: ConnectionUpdateManyWithWhereWithoutConnectedWithInput | ConnectionUpdateManyWithWhereWithoutConnectedWithInput[]
    deleteMany?: ConnectionScalarWhereInput | ConnectionScalarWhereInput[]
  }

  export type ConnectionUpdateManyWithoutConnectedByNestedInput = {
    create?: XOR<ConnectionCreateWithoutConnectedByInput, ConnectionUncheckedCreateWithoutConnectedByInput> | ConnectionCreateWithoutConnectedByInput[] | ConnectionUncheckedCreateWithoutConnectedByInput[]
    connectOrCreate?: ConnectionCreateOrConnectWithoutConnectedByInput | ConnectionCreateOrConnectWithoutConnectedByInput[]
    upsert?: ConnectionUpsertWithWhereUniqueWithoutConnectedByInput | ConnectionUpsertWithWhereUniqueWithoutConnectedByInput[]
    createMany?: ConnectionCreateManyConnectedByInputEnvelope
    set?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    disconnect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    delete?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    connect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    update?: ConnectionUpdateWithWhereUniqueWithoutConnectedByInput | ConnectionUpdateWithWhereUniqueWithoutConnectedByInput[]
    updateMany?: ConnectionUpdateManyWithWhereWithoutConnectedByInput | ConnectionUpdateManyWithWhereWithoutConnectedByInput[]
    deleteMany?: ConnectionScalarWhereInput | ConnectionScalarWhereInput[]
  }

  export type RecipePermissionUpdateManyWithoutUserNestedInput = {
    create?: XOR<RecipePermissionCreateWithoutUserInput, RecipePermissionUncheckedCreateWithoutUserInput> | RecipePermissionCreateWithoutUserInput[] | RecipePermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecipePermissionCreateOrConnectWithoutUserInput | RecipePermissionCreateOrConnectWithoutUserInput[]
    upsert?: RecipePermissionUpsertWithWhereUniqueWithoutUserInput | RecipePermissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RecipePermissionCreateManyUserInputEnvelope
    set?: RecipePermissionWhereUniqueInput | RecipePermissionWhereUniqueInput[]
    disconnect?: RecipePermissionWhereUniqueInput | RecipePermissionWhereUniqueInput[]
    delete?: RecipePermissionWhereUniqueInput | RecipePermissionWhereUniqueInput[]
    connect?: RecipePermissionWhereUniqueInput | RecipePermissionWhereUniqueInput[]
    update?: RecipePermissionUpdateWithWhereUniqueWithoutUserInput | RecipePermissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RecipePermissionUpdateManyWithWhereWithoutUserInput | RecipePermissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RecipePermissionScalarWhereInput | RecipePermissionScalarWhereInput[]
  }

  export type RecipeUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<RecipeCreateWithoutAuthorInput, RecipeUncheckedCreateWithoutAuthorInput> | RecipeCreateWithoutAuthorInput[] | RecipeUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: RecipeCreateOrConnectWithoutAuthorInput | RecipeCreateOrConnectWithoutAuthorInput[]
    upsert?: RecipeUpsertWithWhereUniqueWithoutAuthorInput | RecipeUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: RecipeCreateManyAuthorInputEnvelope
    set?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    disconnect?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    delete?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    connect?: RecipeWhereUniqueInput | RecipeWhereUniqueInput[]
    update?: RecipeUpdateWithWhereUniqueWithoutAuthorInput | RecipeUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: RecipeUpdateManyWithWhereWithoutAuthorInput | RecipeUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: RecipeScalarWhereInput | RecipeScalarWhereInput[]
  }

  export type ConnectionUncheckedUpdateManyWithoutConnectedWithNestedInput = {
    create?: XOR<ConnectionCreateWithoutConnectedWithInput, ConnectionUncheckedCreateWithoutConnectedWithInput> | ConnectionCreateWithoutConnectedWithInput[] | ConnectionUncheckedCreateWithoutConnectedWithInput[]
    connectOrCreate?: ConnectionCreateOrConnectWithoutConnectedWithInput | ConnectionCreateOrConnectWithoutConnectedWithInput[]
    upsert?: ConnectionUpsertWithWhereUniqueWithoutConnectedWithInput | ConnectionUpsertWithWhereUniqueWithoutConnectedWithInput[]
    createMany?: ConnectionCreateManyConnectedWithInputEnvelope
    set?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    disconnect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    delete?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    connect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    update?: ConnectionUpdateWithWhereUniqueWithoutConnectedWithInput | ConnectionUpdateWithWhereUniqueWithoutConnectedWithInput[]
    updateMany?: ConnectionUpdateManyWithWhereWithoutConnectedWithInput | ConnectionUpdateManyWithWhereWithoutConnectedWithInput[]
    deleteMany?: ConnectionScalarWhereInput | ConnectionScalarWhereInput[]
  }

  export type ConnectionUncheckedUpdateManyWithoutConnectedByNestedInput = {
    create?: XOR<ConnectionCreateWithoutConnectedByInput, ConnectionUncheckedCreateWithoutConnectedByInput> | ConnectionCreateWithoutConnectedByInput[] | ConnectionUncheckedCreateWithoutConnectedByInput[]
    connectOrCreate?: ConnectionCreateOrConnectWithoutConnectedByInput | ConnectionCreateOrConnectWithoutConnectedByInput[]
    upsert?: ConnectionUpsertWithWhereUniqueWithoutConnectedByInput | ConnectionUpsertWithWhereUniqueWithoutConnectedByInput[]
    createMany?: ConnectionCreateManyConnectedByInputEnvelope
    set?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    disconnect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    delete?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    connect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    update?: ConnectionUpdateWithWhereUniqueWithoutConnectedByInput | ConnectionUpdateWithWhereUniqueWithoutConnectedByInput[]
    updateMany?: ConnectionUpdateManyWithWhereWithoutConnectedByInput | ConnectionUpdateManyWithWhereWithoutConnectedByInput[]
    deleteMany?: ConnectionScalarWhereInput | ConnectionScalarWhereInput[]
  }

  export type RecipePermissionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RecipePermissionCreateWithoutUserInput, RecipePermissionUncheckedCreateWithoutUserInput> | RecipePermissionCreateWithoutUserInput[] | RecipePermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecipePermissionCreateOrConnectWithoutUserInput | RecipePermissionCreateOrConnectWithoutUserInput[]
    upsert?: RecipePermissionUpsertWithWhereUniqueWithoutUserInput | RecipePermissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RecipePermissionCreateManyUserInputEnvelope
    set?: RecipePermissionWhereUniqueInput | RecipePermissionWhereUniqueInput[]
    disconnect?: RecipePermissionWhereUniqueInput | RecipePermissionWhereUniqueInput[]
    delete?: RecipePermissionWhereUniqueInput | RecipePermissionWhereUniqueInput[]
    connect?: RecipePermissionWhereUniqueInput | RecipePermissionWhereUniqueInput[]
    update?: RecipePermissionUpdateWithWhereUniqueWithoutUserInput | RecipePermissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RecipePermissionUpdateManyWithWhereWithoutUserInput | RecipePermissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RecipePermissionScalarWhereInput | RecipePermissionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutRecipesInput = {
    create?: XOR<UserCreateWithoutRecipesInput, UserUncheckedCreateWithoutRecipesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRecipesInput
    connect?: UserWhereUniqueInput
  }

  export type RecipeIngredientCreateNestedManyWithoutRecipeInput = {
    create?: XOR<RecipeIngredientCreateWithoutRecipeInput, RecipeIngredientUncheckedCreateWithoutRecipeInput> | RecipeIngredientCreateWithoutRecipeInput[] | RecipeIngredientUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeIngredientCreateOrConnectWithoutRecipeInput | RecipeIngredientCreateOrConnectWithoutRecipeInput[]
    createMany?: RecipeIngredientCreateManyRecipeInputEnvelope
    connect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
  }

  export type RecipePermissionCreateNestedManyWithoutRecipeInput = {
    create?: XOR<RecipePermissionCreateWithoutRecipeInput, RecipePermissionUncheckedCreateWithoutRecipeInput> | RecipePermissionCreateWithoutRecipeInput[] | RecipePermissionUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipePermissionCreateOrConnectWithoutRecipeInput | RecipePermissionCreateOrConnectWithoutRecipeInput[]
    createMany?: RecipePermissionCreateManyRecipeInputEnvelope
    connect?: RecipePermissionWhereUniqueInput | RecipePermissionWhereUniqueInput[]
  }

  export type InstructionCreateNestedManyWithoutRecipeInput = {
    create?: XOR<InstructionCreateWithoutRecipeInput, InstructionUncheckedCreateWithoutRecipeInput> | InstructionCreateWithoutRecipeInput[] | InstructionUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: InstructionCreateOrConnectWithoutRecipeInput | InstructionCreateOrConnectWithoutRecipeInput[]
    createMany?: InstructionCreateManyRecipeInputEnvelope
    connect?: InstructionWhereUniqueInput | InstructionWhereUniqueInput[]
  }

  export type RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInput = {
    create?: XOR<RecipeIngredientCreateWithoutRecipeInput, RecipeIngredientUncheckedCreateWithoutRecipeInput> | RecipeIngredientCreateWithoutRecipeInput[] | RecipeIngredientUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeIngredientCreateOrConnectWithoutRecipeInput | RecipeIngredientCreateOrConnectWithoutRecipeInput[]
    createMany?: RecipeIngredientCreateManyRecipeInputEnvelope
    connect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
  }

  export type RecipePermissionUncheckedCreateNestedManyWithoutRecipeInput = {
    create?: XOR<RecipePermissionCreateWithoutRecipeInput, RecipePermissionUncheckedCreateWithoutRecipeInput> | RecipePermissionCreateWithoutRecipeInput[] | RecipePermissionUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipePermissionCreateOrConnectWithoutRecipeInput | RecipePermissionCreateOrConnectWithoutRecipeInput[]
    createMany?: RecipePermissionCreateManyRecipeInputEnvelope
    connect?: RecipePermissionWhereUniqueInput | RecipePermissionWhereUniqueInput[]
  }

  export type InstructionUncheckedCreateNestedManyWithoutRecipeInput = {
    create?: XOR<InstructionCreateWithoutRecipeInput, InstructionUncheckedCreateWithoutRecipeInput> | InstructionCreateWithoutRecipeInput[] | InstructionUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: InstructionCreateOrConnectWithoutRecipeInput | InstructionCreateOrConnectWithoutRecipeInput[]
    createMany?: InstructionCreateManyRecipeInputEnvelope
    connect?: InstructionWhereUniqueInput | InstructionWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutRecipesNestedInput = {
    create?: XOR<UserCreateWithoutRecipesInput, UserUncheckedCreateWithoutRecipesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRecipesInput
    upsert?: UserUpsertWithoutRecipesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRecipesInput, UserUpdateWithoutRecipesInput>, UserUncheckedUpdateWithoutRecipesInput>
  }

  export type RecipeIngredientUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<RecipeIngredientCreateWithoutRecipeInput, RecipeIngredientUncheckedCreateWithoutRecipeInput> | RecipeIngredientCreateWithoutRecipeInput[] | RecipeIngredientUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeIngredientCreateOrConnectWithoutRecipeInput | RecipeIngredientCreateOrConnectWithoutRecipeInput[]
    upsert?: RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInput | RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: RecipeIngredientCreateManyRecipeInputEnvelope
    set?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    disconnect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    delete?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    connect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    update?: RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInput | RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: RecipeIngredientUpdateManyWithWhereWithoutRecipeInput | RecipeIngredientUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: RecipeIngredientScalarWhereInput | RecipeIngredientScalarWhereInput[]
  }

  export type RecipePermissionUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<RecipePermissionCreateWithoutRecipeInput, RecipePermissionUncheckedCreateWithoutRecipeInput> | RecipePermissionCreateWithoutRecipeInput[] | RecipePermissionUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipePermissionCreateOrConnectWithoutRecipeInput | RecipePermissionCreateOrConnectWithoutRecipeInput[]
    upsert?: RecipePermissionUpsertWithWhereUniqueWithoutRecipeInput | RecipePermissionUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: RecipePermissionCreateManyRecipeInputEnvelope
    set?: RecipePermissionWhereUniqueInput | RecipePermissionWhereUniqueInput[]
    disconnect?: RecipePermissionWhereUniqueInput | RecipePermissionWhereUniqueInput[]
    delete?: RecipePermissionWhereUniqueInput | RecipePermissionWhereUniqueInput[]
    connect?: RecipePermissionWhereUniqueInput | RecipePermissionWhereUniqueInput[]
    update?: RecipePermissionUpdateWithWhereUniqueWithoutRecipeInput | RecipePermissionUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: RecipePermissionUpdateManyWithWhereWithoutRecipeInput | RecipePermissionUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: RecipePermissionScalarWhereInput | RecipePermissionScalarWhereInput[]
  }

  export type InstructionUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<InstructionCreateWithoutRecipeInput, InstructionUncheckedCreateWithoutRecipeInput> | InstructionCreateWithoutRecipeInput[] | InstructionUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: InstructionCreateOrConnectWithoutRecipeInput | InstructionCreateOrConnectWithoutRecipeInput[]
    upsert?: InstructionUpsertWithWhereUniqueWithoutRecipeInput | InstructionUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: InstructionCreateManyRecipeInputEnvelope
    set?: InstructionWhereUniqueInput | InstructionWhereUniqueInput[]
    disconnect?: InstructionWhereUniqueInput | InstructionWhereUniqueInput[]
    delete?: InstructionWhereUniqueInput | InstructionWhereUniqueInput[]
    connect?: InstructionWhereUniqueInput | InstructionWhereUniqueInput[]
    update?: InstructionUpdateWithWhereUniqueWithoutRecipeInput | InstructionUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: InstructionUpdateManyWithWhereWithoutRecipeInput | InstructionUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: InstructionScalarWhereInput | InstructionScalarWhereInput[]
  }

  export type RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<RecipeIngredientCreateWithoutRecipeInput, RecipeIngredientUncheckedCreateWithoutRecipeInput> | RecipeIngredientCreateWithoutRecipeInput[] | RecipeIngredientUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipeIngredientCreateOrConnectWithoutRecipeInput | RecipeIngredientCreateOrConnectWithoutRecipeInput[]
    upsert?: RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInput | RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: RecipeIngredientCreateManyRecipeInputEnvelope
    set?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    disconnect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    delete?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    connect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    update?: RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInput | RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: RecipeIngredientUpdateManyWithWhereWithoutRecipeInput | RecipeIngredientUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: RecipeIngredientScalarWhereInput | RecipeIngredientScalarWhereInput[]
  }

  export type RecipePermissionUncheckedUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<RecipePermissionCreateWithoutRecipeInput, RecipePermissionUncheckedCreateWithoutRecipeInput> | RecipePermissionCreateWithoutRecipeInput[] | RecipePermissionUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: RecipePermissionCreateOrConnectWithoutRecipeInput | RecipePermissionCreateOrConnectWithoutRecipeInput[]
    upsert?: RecipePermissionUpsertWithWhereUniqueWithoutRecipeInput | RecipePermissionUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: RecipePermissionCreateManyRecipeInputEnvelope
    set?: RecipePermissionWhereUniqueInput | RecipePermissionWhereUniqueInput[]
    disconnect?: RecipePermissionWhereUniqueInput | RecipePermissionWhereUniqueInput[]
    delete?: RecipePermissionWhereUniqueInput | RecipePermissionWhereUniqueInput[]
    connect?: RecipePermissionWhereUniqueInput | RecipePermissionWhereUniqueInput[]
    update?: RecipePermissionUpdateWithWhereUniqueWithoutRecipeInput | RecipePermissionUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: RecipePermissionUpdateManyWithWhereWithoutRecipeInput | RecipePermissionUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: RecipePermissionScalarWhereInput | RecipePermissionScalarWhereInput[]
  }

  export type InstructionUncheckedUpdateManyWithoutRecipeNestedInput = {
    create?: XOR<InstructionCreateWithoutRecipeInput, InstructionUncheckedCreateWithoutRecipeInput> | InstructionCreateWithoutRecipeInput[] | InstructionUncheckedCreateWithoutRecipeInput[]
    connectOrCreate?: InstructionCreateOrConnectWithoutRecipeInput | InstructionCreateOrConnectWithoutRecipeInput[]
    upsert?: InstructionUpsertWithWhereUniqueWithoutRecipeInput | InstructionUpsertWithWhereUniqueWithoutRecipeInput[]
    createMany?: InstructionCreateManyRecipeInputEnvelope
    set?: InstructionWhereUniqueInput | InstructionWhereUniqueInput[]
    disconnect?: InstructionWhereUniqueInput | InstructionWhereUniqueInput[]
    delete?: InstructionWhereUniqueInput | InstructionWhereUniqueInput[]
    connect?: InstructionWhereUniqueInput | InstructionWhereUniqueInput[]
    update?: InstructionUpdateWithWhereUniqueWithoutRecipeInput | InstructionUpdateWithWhereUniqueWithoutRecipeInput[]
    updateMany?: InstructionUpdateManyWithWhereWithoutRecipeInput | InstructionUpdateManyWithWhereWithoutRecipeInput[]
    deleteMany?: InstructionScalarWhereInput | InstructionScalarWhereInput[]
  }

  export type RecipeIngredientCreateNestedManyWithoutIngredientInput = {
    create?: XOR<RecipeIngredientCreateWithoutIngredientInput, RecipeIngredientUncheckedCreateWithoutIngredientInput> | RecipeIngredientCreateWithoutIngredientInput[] | RecipeIngredientUncheckedCreateWithoutIngredientInput[]
    connectOrCreate?: RecipeIngredientCreateOrConnectWithoutIngredientInput | RecipeIngredientCreateOrConnectWithoutIngredientInput[]
    createMany?: RecipeIngredientCreateManyIngredientInputEnvelope
    connect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
  }

  export type RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInput = {
    create?: XOR<RecipeIngredientCreateWithoutIngredientInput, RecipeIngredientUncheckedCreateWithoutIngredientInput> | RecipeIngredientCreateWithoutIngredientInput[] | RecipeIngredientUncheckedCreateWithoutIngredientInput[]
    connectOrCreate?: RecipeIngredientCreateOrConnectWithoutIngredientInput | RecipeIngredientCreateOrConnectWithoutIngredientInput[]
    createMany?: RecipeIngredientCreateManyIngredientInputEnvelope
    connect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
  }

  export type RecipeIngredientUpdateManyWithoutIngredientNestedInput = {
    create?: XOR<RecipeIngredientCreateWithoutIngredientInput, RecipeIngredientUncheckedCreateWithoutIngredientInput> | RecipeIngredientCreateWithoutIngredientInput[] | RecipeIngredientUncheckedCreateWithoutIngredientInput[]
    connectOrCreate?: RecipeIngredientCreateOrConnectWithoutIngredientInput | RecipeIngredientCreateOrConnectWithoutIngredientInput[]
    upsert?: RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInput | RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInput[]
    createMany?: RecipeIngredientCreateManyIngredientInputEnvelope
    set?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    disconnect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    delete?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    connect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    update?: RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInput | RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInput[]
    updateMany?: RecipeIngredientUpdateManyWithWhereWithoutIngredientInput | RecipeIngredientUpdateManyWithWhereWithoutIngredientInput[]
    deleteMany?: RecipeIngredientScalarWhereInput | RecipeIngredientScalarWhereInput[]
  }

  export type RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInput = {
    create?: XOR<RecipeIngredientCreateWithoutIngredientInput, RecipeIngredientUncheckedCreateWithoutIngredientInput> | RecipeIngredientCreateWithoutIngredientInput[] | RecipeIngredientUncheckedCreateWithoutIngredientInput[]
    connectOrCreate?: RecipeIngredientCreateOrConnectWithoutIngredientInput | RecipeIngredientCreateOrConnectWithoutIngredientInput[]
    upsert?: RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInput | RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInput[]
    createMany?: RecipeIngredientCreateManyIngredientInputEnvelope
    set?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    disconnect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    delete?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    connect?: RecipeIngredientWhereUniqueInput | RecipeIngredientWhereUniqueInput[]
    update?: RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInput | RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInput[]
    updateMany?: RecipeIngredientUpdateManyWithWhereWithoutIngredientInput | RecipeIngredientUpdateManyWithWhereWithoutIngredientInput[]
    deleteMany?: RecipeIngredientScalarWhereInput | RecipeIngredientScalarWhereInput[]
  }

  export type RecipeCreateNestedOneWithoutIngredientsInput = {
    create?: XOR<RecipeCreateWithoutIngredientsInput, RecipeUncheckedCreateWithoutIngredientsInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutIngredientsInput
    connect?: RecipeWhereUniqueInput
  }

  export type IngredientCreateNestedOneWithoutRecipesInput = {
    create?: XOR<IngredientCreateWithoutRecipesInput, IngredientUncheckedCreateWithoutRecipesInput>
    connectOrCreate?: IngredientCreateOrConnectWithoutRecipesInput
    connect?: IngredientWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableEnumIngreidentUnitFieldUpdateOperationsInput = {
    set?: $Enums.IngreidentUnit | null
  }

  export type RecipeUpdateOneRequiredWithoutIngredientsNestedInput = {
    create?: XOR<RecipeCreateWithoutIngredientsInput, RecipeUncheckedCreateWithoutIngredientsInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutIngredientsInput
    upsert?: RecipeUpsertWithoutIngredientsInput
    connect?: RecipeWhereUniqueInput
    update?: XOR<XOR<RecipeUpdateToOneWithWhereWithoutIngredientsInput, RecipeUpdateWithoutIngredientsInput>, RecipeUncheckedUpdateWithoutIngredientsInput>
  }

  export type IngredientUpdateOneRequiredWithoutRecipesNestedInput = {
    create?: XOR<IngredientCreateWithoutRecipesInput, IngredientUncheckedCreateWithoutRecipesInput>
    connectOrCreate?: IngredientCreateOrConnectWithoutRecipesInput
    upsert?: IngredientUpsertWithoutRecipesInput
    connect?: IngredientWhereUniqueInput
    update?: XOR<XOR<IngredientUpdateToOneWithWhereWithoutRecipesInput, IngredientUpdateWithoutRecipesInput>, IngredientUncheckedUpdateWithoutRecipesInput>
  }

  export type UserCreateNestedOneWithoutConnectedWithInput = {
    create?: XOR<UserCreateWithoutConnectedWithInput, UserUncheckedCreateWithoutConnectedWithInput>
    connectOrCreate?: UserCreateOrConnectWithoutConnectedWithInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutConnectedByInput = {
    create?: XOR<UserCreateWithoutConnectedByInput, UserUncheckedCreateWithoutConnectedByInput>
    connectOrCreate?: UserCreateOrConnectWithoutConnectedByInput
    connect?: UserWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutConnectedWithNestedInput = {
    create?: XOR<UserCreateWithoutConnectedWithInput, UserUncheckedCreateWithoutConnectedWithInput>
    connectOrCreate?: UserCreateOrConnectWithoutConnectedWithInput
    upsert?: UserUpsertWithoutConnectedWithInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutConnectedWithInput, UserUpdateWithoutConnectedWithInput>, UserUncheckedUpdateWithoutConnectedWithInput>
  }

  export type UserUpdateOneRequiredWithoutConnectedByNestedInput = {
    create?: XOR<UserCreateWithoutConnectedByInput, UserUncheckedCreateWithoutConnectedByInput>
    connectOrCreate?: UserCreateOrConnectWithoutConnectedByInput
    upsert?: UserUpsertWithoutConnectedByInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutConnectedByInput, UserUpdateWithoutConnectedByInput>, UserUncheckedUpdateWithoutConnectedByInput>
  }

  export type RecipeCreateNestedOneWithoutPermissionsInput = {
    create?: XOR<RecipeCreateWithoutPermissionsInput, RecipeUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutPermissionsInput
    connect?: RecipeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPermissionsInput = {
    create?: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPermissionsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type RecipeUpdateOneRequiredWithoutPermissionsNestedInput = {
    create?: XOR<RecipeCreateWithoutPermissionsInput, RecipeUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutPermissionsInput
    upsert?: RecipeUpsertWithoutPermissionsInput
    connect?: RecipeWhereUniqueInput
    update?: XOR<XOR<RecipeUpdateToOneWithWhereWithoutPermissionsInput, RecipeUpdateWithoutPermissionsInput>, RecipeUncheckedUpdateWithoutPermissionsInput>
  }

  export type UserUpdateOneRequiredWithoutPermissionsNestedInput = {
    create?: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPermissionsInput
    upsert?: UserUpsertWithoutPermissionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPermissionsInput, UserUpdateWithoutPermissionsInput>, UserUncheckedUpdateWithoutPermissionsInput>
  }

  export type RecipeCreateNestedOneWithoutInstructionsInput = {
    create?: XOR<RecipeCreateWithoutInstructionsInput, RecipeUncheckedCreateWithoutInstructionsInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutInstructionsInput
    connect?: RecipeWhereUniqueInput
  }

  export type TimeCreateNestedOneWithoutInstructionInput = {
    create?: XOR<TimeCreateWithoutInstructionInput, TimeUncheckedCreateWithoutInstructionInput>
    connectOrCreate?: TimeCreateOrConnectWithoutInstructionInput
    connect?: TimeWhereUniqueInput
  }

  export type TemperatureCreateNestedOneWithoutInstructionInput = {
    create?: XOR<TemperatureCreateWithoutInstructionInput, TemperatureUncheckedCreateWithoutInstructionInput>
    connectOrCreate?: TemperatureCreateOrConnectWithoutInstructionInput
    connect?: TemperatureWhereUniqueInput
  }

  export type TimeUncheckedCreateNestedOneWithoutInstructionInput = {
    create?: XOR<TimeCreateWithoutInstructionInput, TimeUncheckedCreateWithoutInstructionInput>
    connectOrCreate?: TimeCreateOrConnectWithoutInstructionInput
    connect?: TimeWhereUniqueInput
  }

  export type TemperatureUncheckedCreateNestedOneWithoutInstructionInput = {
    create?: XOR<TemperatureCreateWithoutInstructionInput, TemperatureUncheckedCreateWithoutInstructionInput>
    connectOrCreate?: TemperatureCreateOrConnectWithoutInstructionInput
    connect?: TemperatureWhereUniqueInput
  }

  export type RecipeUpdateOneRequiredWithoutInstructionsNestedInput = {
    create?: XOR<RecipeCreateWithoutInstructionsInput, RecipeUncheckedCreateWithoutInstructionsInput>
    connectOrCreate?: RecipeCreateOrConnectWithoutInstructionsInput
    upsert?: RecipeUpsertWithoutInstructionsInput
    connect?: RecipeWhereUniqueInput
    update?: XOR<XOR<RecipeUpdateToOneWithWhereWithoutInstructionsInput, RecipeUpdateWithoutInstructionsInput>, RecipeUncheckedUpdateWithoutInstructionsInput>
  }

  export type TimeUpdateOneWithoutInstructionNestedInput = {
    create?: XOR<TimeCreateWithoutInstructionInput, TimeUncheckedCreateWithoutInstructionInput>
    connectOrCreate?: TimeCreateOrConnectWithoutInstructionInput
    upsert?: TimeUpsertWithoutInstructionInput
    disconnect?: TimeWhereInput | boolean
    delete?: TimeWhereInput | boolean
    connect?: TimeWhereUniqueInput
    update?: XOR<XOR<TimeUpdateToOneWithWhereWithoutInstructionInput, TimeUpdateWithoutInstructionInput>, TimeUncheckedUpdateWithoutInstructionInput>
  }

  export type TemperatureUpdateOneWithoutInstructionNestedInput = {
    create?: XOR<TemperatureCreateWithoutInstructionInput, TemperatureUncheckedCreateWithoutInstructionInput>
    connectOrCreate?: TemperatureCreateOrConnectWithoutInstructionInput
    upsert?: TemperatureUpsertWithoutInstructionInput
    disconnect?: TemperatureWhereInput | boolean
    delete?: TemperatureWhereInput | boolean
    connect?: TemperatureWhereUniqueInput
    update?: XOR<XOR<TemperatureUpdateToOneWithWhereWithoutInstructionInput, TemperatureUpdateWithoutInstructionInput>, TemperatureUncheckedUpdateWithoutInstructionInput>
  }

  export type TimeUncheckedUpdateOneWithoutInstructionNestedInput = {
    create?: XOR<TimeCreateWithoutInstructionInput, TimeUncheckedCreateWithoutInstructionInput>
    connectOrCreate?: TimeCreateOrConnectWithoutInstructionInput
    upsert?: TimeUpsertWithoutInstructionInput
    disconnect?: TimeWhereInput | boolean
    delete?: TimeWhereInput | boolean
    connect?: TimeWhereUniqueInput
    update?: XOR<XOR<TimeUpdateToOneWithWhereWithoutInstructionInput, TimeUpdateWithoutInstructionInput>, TimeUncheckedUpdateWithoutInstructionInput>
  }

  export type TemperatureUncheckedUpdateOneWithoutInstructionNestedInput = {
    create?: XOR<TemperatureCreateWithoutInstructionInput, TemperatureUncheckedCreateWithoutInstructionInput>
    connectOrCreate?: TemperatureCreateOrConnectWithoutInstructionInput
    upsert?: TemperatureUpsertWithoutInstructionInput
    disconnect?: TemperatureWhereInput | boolean
    delete?: TemperatureWhereInput | boolean
    connect?: TemperatureWhereUniqueInput
    update?: XOR<XOR<TemperatureUpdateToOneWithWhereWithoutInstructionInput, TemperatureUpdateWithoutInstructionInput>, TemperatureUncheckedUpdateWithoutInstructionInput>
  }

  export type InstructionCreateNestedOneWithoutTimeInput = {
    create?: XOR<InstructionCreateWithoutTimeInput, InstructionUncheckedCreateWithoutTimeInput>
    connectOrCreate?: InstructionCreateOrConnectWithoutTimeInput
    connect?: InstructionWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type InstructionUpdateOneRequiredWithoutTimeNestedInput = {
    create?: XOR<InstructionCreateWithoutTimeInput, InstructionUncheckedCreateWithoutTimeInput>
    connectOrCreate?: InstructionCreateOrConnectWithoutTimeInput
    upsert?: InstructionUpsertWithoutTimeInput
    connect?: InstructionWhereUniqueInput
    update?: XOR<XOR<InstructionUpdateToOneWithWhereWithoutTimeInput, InstructionUpdateWithoutTimeInput>, InstructionUncheckedUpdateWithoutTimeInput>
  }

  export type InstructionCreateNestedOneWithoutTemperatureInput = {
    create?: XOR<InstructionCreateWithoutTemperatureInput, InstructionUncheckedCreateWithoutTemperatureInput>
    connectOrCreate?: InstructionCreateOrConnectWithoutTemperatureInput
    connect?: InstructionWhereUniqueInput
  }

  export type NullableEnumTemperatureUnitFieldUpdateOperationsInput = {
    set?: $Enums.TemperatureUnit | null
  }

  export type InstructionUpdateOneRequiredWithoutTemperatureNestedInput = {
    create?: XOR<InstructionCreateWithoutTemperatureInput, InstructionUncheckedCreateWithoutTemperatureInput>
    connectOrCreate?: InstructionCreateOrConnectWithoutTemperatureInput
    upsert?: InstructionUpsertWithoutTemperatureInput
    connect?: InstructionWhereUniqueInput
    update?: XOR<XOR<InstructionUpdateToOneWithWhereWithoutTemperatureInput, InstructionUpdateWithoutTemperatureInput>, InstructionUncheckedUpdateWithoutTemperatureInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumIngreidentUnitNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.IngreidentUnit | EnumIngreidentUnitFieldRefInput<$PrismaModel> | null
    in?: $Enums.IngreidentUnit[] | ListEnumIngreidentUnitFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.IngreidentUnit[] | ListEnumIngreidentUnitFieldRefInput<$PrismaModel> | null
    not?: NestedEnumIngreidentUnitNullableFilter<$PrismaModel> | $Enums.IngreidentUnit | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumIngreidentUnitNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IngreidentUnit | EnumIngreidentUnitFieldRefInput<$PrismaModel> | null
    in?: $Enums.IngreidentUnit[] | ListEnumIngreidentUnitFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.IngreidentUnit[] | ListEnumIngreidentUnitFieldRefInput<$PrismaModel> | null
    not?: NestedEnumIngreidentUnitNullableWithAggregatesFilter<$PrismaModel> | $Enums.IngreidentUnit | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumIngreidentUnitNullableFilter<$PrismaModel>
    _max?: NestedEnumIngreidentUnitNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumTemperatureUnitNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.TemperatureUnit | EnumTemperatureUnitFieldRefInput<$PrismaModel> | null
    in?: $Enums.TemperatureUnit[] | ListEnumTemperatureUnitFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.TemperatureUnit[] | ListEnumTemperatureUnitFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTemperatureUnitNullableFilter<$PrismaModel> | $Enums.TemperatureUnit | null
  }

  export type NestedEnumTemperatureUnitNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TemperatureUnit | EnumTemperatureUnitFieldRefInput<$PrismaModel> | null
    in?: $Enums.TemperatureUnit[] | ListEnumTemperatureUnitFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.TemperatureUnit[] | ListEnumTemperatureUnitFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTemperatureUnitNullableWithAggregatesFilter<$PrismaModel> | $Enums.TemperatureUnit | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumTemperatureUnitNullableFilter<$PrismaModel>
    _max?: NestedEnumTemperatureUnitNullableFilter<$PrismaModel>
  }

  export type RecipeCreateWithoutAuthorInput = {
    id?: string
    createdOn?: Date | string | null
    updatedAt?: Date | string | null
    title: string
    description?: string | null
    image?: string | null
    ingredients?: RecipeIngredientCreateNestedManyWithoutRecipeInput
    permissions?: RecipePermissionCreateNestedManyWithoutRecipeInput
    instructions?: InstructionCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUncheckedCreateWithoutAuthorInput = {
    id?: string
    createdOn?: Date | string | null
    updatedAt?: Date | string | null
    title: string
    description?: string | null
    image?: string | null
    ingredients?: RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInput
    permissions?: RecipePermissionUncheckedCreateNestedManyWithoutRecipeInput
    instructions?: InstructionUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type RecipeCreateOrConnectWithoutAuthorInput = {
    where: RecipeWhereUniqueInput
    create: XOR<RecipeCreateWithoutAuthorInput, RecipeUncheckedCreateWithoutAuthorInput>
  }

  export type RecipeCreateManyAuthorInputEnvelope = {
    data: RecipeCreateManyAuthorInput | RecipeCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type ConnectionCreateWithoutConnectedWithInput = {
    accepted?: boolean
    connectedBy: UserCreateNestedOneWithoutConnectedByInput
  }

  export type ConnectionUncheckedCreateWithoutConnectedWithInput = {
    connectedById: string
    accepted?: boolean
  }

  export type ConnectionCreateOrConnectWithoutConnectedWithInput = {
    where: ConnectionWhereUniqueInput
    create: XOR<ConnectionCreateWithoutConnectedWithInput, ConnectionUncheckedCreateWithoutConnectedWithInput>
  }

  export type ConnectionCreateManyConnectedWithInputEnvelope = {
    data: ConnectionCreateManyConnectedWithInput | ConnectionCreateManyConnectedWithInput[]
    skipDuplicates?: boolean
  }

  export type ConnectionCreateWithoutConnectedByInput = {
    accepted?: boolean
    connectedWith: UserCreateNestedOneWithoutConnectedWithInput
  }

  export type ConnectionUncheckedCreateWithoutConnectedByInput = {
    connectedWithId: string
    accepted?: boolean
  }

  export type ConnectionCreateOrConnectWithoutConnectedByInput = {
    where: ConnectionWhereUniqueInput
    create: XOR<ConnectionCreateWithoutConnectedByInput, ConnectionUncheckedCreateWithoutConnectedByInput>
  }

  export type ConnectionCreateManyConnectedByInputEnvelope = {
    data: ConnectionCreateManyConnectedByInput | ConnectionCreateManyConnectedByInput[]
    skipDuplicates?: boolean
  }

  export type RecipePermissionCreateWithoutUserInput = {
    permission: $Enums.Role
    recipe: RecipeCreateNestedOneWithoutPermissionsInput
  }

  export type RecipePermissionUncheckedCreateWithoutUserInput = {
    recipeId: string
    permission: $Enums.Role
  }

  export type RecipePermissionCreateOrConnectWithoutUserInput = {
    where: RecipePermissionWhereUniqueInput
    create: XOR<RecipePermissionCreateWithoutUserInput, RecipePermissionUncheckedCreateWithoutUserInput>
  }

  export type RecipePermissionCreateManyUserInputEnvelope = {
    data: RecipePermissionCreateManyUserInput | RecipePermissionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RecipeUpsertWithWhereUniqueWithoutAuthorInput = {
    where: RecipeWhereUniqueInput
    update: XOR<RecipeUpdateWithoutAuthorInput, RecipeUncheckedUpdateWithoutAuthorInput>
    create: XOR<RecipeCreateWithoutAuthorInput, RecipeUncheckedCreateWithoutAuthorInput>
  }

  export type RecipeUpdateWithWhereUniqueWithoutAuthorInput = {
    where: RecipeWhereUniqueInput
    data: XOR<RecipeUpdateWithoutAuthorInput, RecipeUncheckedUpdateWithoutAuthorInput>
  }

  export type RecipeUpdateManyWithWhereWithoutAuthorInput = {
    where: RecipeScalarWhereInput
    data: XOR<RecipeUpdateManyMutationInput, RecipeUncheckedUpdateManyWithoutAuthorInput>
  }

  export type RecipeScalarWhereInput = {
    AND?: RecipeScalarWhereInput | RecipeScalarWhereInput[]
    OR?: RecipeScalarWhereInput[]
    NOT?: RecipeScalarWhereInput | RecipeScalarWhereInput[]
    id?: StringFilter<"Recipe"> | string
    createdOn?: DateTimeNullableFilter<"Recipe"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Recipe"> | Date | string | null
    title?: StringFilter<"Recipe"> | string
    authorId?: StringFilter<"Recipe"> | string
    description?: StringNullableFilter<"Recipe"> | string | null
    image?: StringNullableFilter<"Recipe"> | string | null
  }

  export type ConnectionUpsertWithWhereUniqueWithoutConnectedWithInput = {
    where: ConnectionWhereUniqueInput
    update: XOR<ConnectionUpdateWithoutConnectedWithInput, ConnectionUncheckedUpdateWithoutConnectedWithInput>
    create: XOR<ConnectionCreateWithoutConnectedWithInput, ConnectionUncheckedCreateWithoutConnectedWithInput>
  }

  export type ConnectionUpdateWithWhereUniqueWithoutConnectedWithInput = {
    where: ConnectionWhereUniqueInput
    data: XOR<ConnectionUpdateWithoutConnectedWithInput, ConnectionUncheckedUpdateWithoutConnectedWithInput>
  }

  export type ConnectionUpdateManyWithWhereWithoutConnectedWithInput = {
    where: ConnectionScalarWhereInput
    data: XOR<ConnectionUpdateManyMutationInput, ConnectionUncheckedUpdateManyWithoutConnectedWithInput>
  }

  export type ConnectionScalarWhereInput = {
    AND?: ConnectionScalarWhereInput | ConnectionScalarWhereInput[]
    OR?: ConnectionScalarWhereInput[]
    NOT?: ConnectionScalarWhereInput | ConnectionScalarWhereInput[]
    connectedWithId?: StringFilter<"Connection"> | string
    connectedById?: StringFilter<"Connection"> | string
    accepted?: BoolFilter<"Connection"> | boolean
  }

  export type ConnectionUpsertWithWhereUniqueWithoutConnectedByInput = {
    where: ConnectionWhereUniqueInput
    update: XOR<ConnectionUpdateWithoutConnectedByInput, ConnectionUncheckedUpdateWithoutConnectedByInput>
    create: XOR<ConnectionCreateWithoutConnectedByInput, ConnectionUncheckedCreateWithoutConnectedByInput>
  }

  export type ConnectionUpdateWithWhereUniqueWithoutConnectedByInput = {
    where: ConnectionWhereUniqueInput
    data: XOR<ConnectionUpdateWithoutConnectedByInput, ConnectionUncheckedUpdateWithoutConnectedByInput>
  }

  export type ConnectionUpdateManyWithWhereWithoutConnectedByInput = {
    where: ConnectionScalarWhereInput
    data: XOR<ConnectionUpdateManyMutationInput, ConnectionUncheckedUpdateManyWithoutConnectedByInput>
  }

  export type RecipePermissionUpsertWithWhereUniqueWithoutUserInput = {
    where: RecipePermissionWhereUniqueInput
    update: XOR<RecipePermissionUpdateWithoutUserInput, RecipePermissionUncheckedUpdateWithoutUserInput>
    create: XOR<RecipePermissionCreateWithoutUserInput, RecipePermissionUncheckedCreateWithoutUserInput>
  }

  export type RecipePermissionUpdateWithWhereUniqueWithoutUserInput = {
    where: RecipePermissionWhereUniqueInput
    data: XOR<RecipePermissionUpdateWithoutUserInput, RecipePermissionUncheckedUpdateWithoutUserInput>
  }

  export type RecipePermissionUpdateManyWithWhereWithoutUserInput = {
    where: RecipePermissionScalarWhereInput
    data: XOR<RecipePermissionUpdateManyMutationInput, RecipePermissionUncheckedUpdateManyWithoutUserInput>
  }

  export type RecipePermissionScalarWhereInput = {
    AND?: RecipePermissionScalarWhereInput | RecipePermissionScalarWhereInput[]
    OR?: RecipePermissionScalarWhereInput[]
    NOT?: RecipePermissionScalarWhereInput | RecipePermissionScalarWhereInput[]
    recipeId?: StringFilter<"RecipePermission"> | string
    userId?: StringFilter<"RecipePermission"> | string
    permission?: EnumRoleFilter<"RecipePermission"> | $Enums.Role
  }

  export type UserCreateWithoutRecipesInput = {
    id?: string
    email: string
    username: string
    password: string
    salt: string
    image?: string | null
    connectedWith?: ConnectionCreateNestedManyWithoutConnectedWithInput
    connectedBy?: ConnectionCreateNestedManyWithoutConnectedByInput
    permissions?: RecipePermissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRecipesInput = {
    id?: string
    email: string
    username: string
    password: string
    salt: string
    image?: string | null
    connectedWith?: ConnectionUncheckedCreateNestedManyWithoutConnectedWithInput
    connectedBy?: ConnectionUncheckedCreateNestedManyWithoutConnectedByInput
    permissions?: RecipePermissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRecipesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRecipesInput, UserUncheckedCreateWithoutRecipesInput>
  }

  export type RecipeIngredientCreateWithoutRecipeInput = {
    quantity: number
    unit?: $Enums.IngreidentUnit | null
    ingredient: IngredientCreateNestedOneWithoutRecipesInput
  }

  export type RecipeIngredientUncheckedCreateWithoutRecipeInput = {
    ingredientId: string
    quantity: number
    unit?: $Enums.IngreidentUnit | null
  }

  export type RecipeIngredientCreateOrConnectWithoutRecipeInput = {
    where: RecipeIngredientWhereUniqueInput
    create: XOR<RecipeIngredientCreateWithoutRecipeInput, RecipeIngredientUncheckedCreateWithoutRecipeInput>
  }

  export type RecipeIngredientCreateManyRecipeInputEnvelope = {
    data: RecipeIngredientCreateManyRecipeInput | RecipeIngredientCreateManyRecipeInput[]
    skipDuplicates?: boolean
  }

  export type RecipePermissionCreateWithoutRecipeInput = {
    permission: $Enums.Role
    user: UserCreateNestedOneWithoutPermissionsInput
  }

  export type RecipePermissionUncheckedCreateWithoutRecipeInput = {
    userId: string
    permission: $Enums.Role
  }

  export type RecipePermissionCreateOrConnectWithoutRecipeInput = {
    where: RecipePermissionWhereUniqueInput
    create: XOR<RecipePermissionCreateWithoutRecipeInput, RecipePermissionUncheckedCreateWithoutRecipeInput>
  }

  export type RecipePermissionCreateManyRecipeInputEnvelope = {
    data: RecipePermissionCreateManyRecipeInput | RecipePermissionCreateManyRecipeInput[]
    skipDuplicates?: boolean
  }

  export type InstructionCreateWithoutRecipeInput = {
    id?: string
    description: string
    step: number
    time?: TimeCreateNestedOneWithoutInstructionInput
    temperature?: TemperatureCreateNestedOneWithoutInstructionInput
  }

  export type InstructionUncheckedCreateWithoutRecipeInput = {
    id?: string
    description: string
    step: number
    time?: TimeUncheckedCreateNestedOneWithoutInstructionInput
    temperature?: TemperatureUncheckedCreateNestedOneWithoutInstructionInput
  }

  export type InstructionCreateOrConnectWithoutRecipeInput = {
    where: InstructionWhereUniqueInput
    create: XOR<InstructionCreateWithoutRecipeInput, InstructionUncheckedCreateWithoutRecipeInput>
  }

  export type InstructionCreateManyRecipeInputEnvelope = {
    data: InstructionCreateManyRecipeInput | InstructionCreateManyRecipeInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutRecipesInput = {
    update: XOR<UserUpdateWithoutRecipesInput, UserUncheckedUpdateWithoutRecipesInput>
    create: XOR<UserCreateWithoutRecipesInput, UserUncheckedCreateWithoutRecipesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRecipesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRecipesInput, UserUncheckedUpdateWithoutRecipesInput>
  }

  export type UserUpdateWithoutRecipesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    connectedWith?: ConnectionUpdateManyWithoutConnectedWithNestedInput
    connectedBy?: ConnectionUpdateManyWithoutConnectedByNestedInput
    permissions?: RecipePermissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRecipesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    connectedWith?: ConnectionUncheckedUpdateManyWithoutConnectedWithNestedInput
    connectedBy?: ConnectionUncheckedUpdateManyWithoutConnectedByNestedInput
    permissions?: RecipePermissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInput = {
    where: RecipeIngredientWhereUniqueInput
    update: XOR<RecipeIngredientUpdateWithoutRecipeInput, RecipeIngredientUncheckedUpdateWithoutRecipeInput>
    create: XOR<RecipeIngredientCreateWithoutRecipeInput, RecipeIngredientUncheckedCreateWithoutRecipeInput>
  }

  export type RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInput = {
    where: RecipeIngredientWhereUniqueInput
    data: XOR<RecipeIngredientUpdateWithoutRecipeInput, RecipeIngredientUncheckedUpdateWithoutRecipeInput>
  }

  export type RecipeIngredientUpdateManyWithWhereWithoutRecipeInput = {
    where: RecipeIngredientScalarWhereInput
    data: XOR<RecipeIngredientUpdateManyMutationInput, RecipeIngredientUncheckedUpdateManyWithoutRecipeInput>
  }

  export type RecipeIngredientScalarWhereInput = {
    AND?: RecipeIngredientScalarWhereInput | RecipeIngredientScalarWhereInput[]
    OR?: RecipeIngredientScalarWhereInput[]
    NOT?: RecipeIngredientScalarWhereInput | RecipeIngredientScalarWhereInput[]
    recipeId?: StringFilter<"RecipeIngredient"> | string
    ingredientId?: StringFilter<"RecipeIngredient"> | string
    quantity?: IntFilter<"RecipeIngredient"> | number
    unit?: EnumIngreidentUnitNullableFilter<"RecipeIngredient"> | $Enums.IngreidentUnit | null
  }

  export type RecipePermissionUpsertWithWhereUniqueWithoutRecipeInput = {
    where: RecipePermissionWhereUniqueInput
    update: XOR<RecipePermissionUpdateWithoutRecipeInput, RecipePermissionUncheckedUpdateWithoutRecipeInput>
    create: XOR<RecipePermissionCreateWithoutRecipeInput, RecipePermissionUncheckedCreateWithoutRecipeInput>
  }

  export type RecipePermissionUpdateWithWhereUniqueWithoutRecipeInput = {
    where: RecipePermissionWhereUniqueInput
    data: XOR<RecipePermissionUpdateWithoutRecipeInput, RecipePermissionUncheckedUpdateWithoutRecipeInput>
  }

  export type RecipePermissionUpdateManyWithWhereWithoutRecipeInput = {
    where: RecipePermissionScalarWhereInput
    data: XOR<RecipePermissionUpdateManyMutationInput, RecipePermissionUncheckedUpdateManyWithoutRecipeInput>
  }

  export type InstructionUpsertWithWhereUniqueWithoutRecipeInput = {
    where: InstructionWhereUniqueInput
    update: XOR<InstructionUpdateWithoutRecipeInput, InstructionUncheckedUpdateWithoutRecipeInput>
    create: XOR<InstructionCreateWithoutRecipeInput, InstructionUncheckedCreateWithoutRecipeInput>
  }

  export type InstructionUpdateWithWhereUniqueWithoutRecipeInput = {
    where: InstructionWhereUniqueInput
    data: XOR<InstructionUpdateWithoutRecipeInput, InstructionUncheckedUpdateWithoutRecipeInput>
  }

  export type InstructionUpdateManyWithWhereWithoutRecipeInput = {
    where: InstructionScalarWhereInput
    data: XOR<InstructionUpdateManyMutationInput, InstructionUncheckedUpdateManyWithoutRecipeInput>
  }

  export type InstructionScalarWhereInput = {
    AND?: InstructionScalarWhereInput | InstructionScalarWhereInput[]
    OR?: InstructionScalarWhereInput[]
    NOT?: InstructionScalarWhereInput | InstructionScalarWhereInput[]
    id?: StringFilter<"Instruction"> | string
    description?: StringFilter<"Instruction"> | string
    recipeId?: StringFilter<"Instruction"> | string
    step?: IntFilter<"Instruction"> | number
  }

  export type RecipeIngredientCreateWithoutIngredientInput = {
    quantity: number
    unit?: $Enums.IngreidentUnit | null
    recipe: RecipeCreateNestedOneWithoutIngredientsInput
  }

  export type RecipeIngredientUncheckedCreateWithoutIngredientInput = {
    recipeId: string
    quantity: number
    unit?: $Enums.IngreidentUnit | null
  }

  export type RecipeIngredientCreateOrConnectWithoutIngredientInput = {
    where: RecipeIngredientWhereUniqueInput
    create: XOR<RecipeIngredientCreateWithoutIngredientInput, RecipeIngredientUncheckedCreateWithoutIngredientInput>
  }

  export type RecipeIngredientCreateManyIngredientInputEnvelope = {
    data: RecipeIngredientCreateManyIngredientInput | RecipeIngredientCreateManyIngredientInput[]
    skipDuplicates?: boolean
  }

  export type RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInput = {
    where: RecipeIngredientWhereUniqueInput
    update: XOR<RecipeIngredientUpdateWithoutIngredientInput, RecipeIngredientUncheckedUpdateWithoutIngredientInput>
    create: XOR<RecipeIngredientCreateWithoutIngredientInput, RecipeIngredientUncheckedCreateWithoutIngredientInput>
  }

  export type RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInput = {
    where: RecipeIngredientWhereUniqueInput
    data: XOR<RecipeIngredientUpdateWithoutIngredientInput, RecipeIngredientUncheckedUpdateWithoutIngredientInput>
  }

  export type RecipeIngredientUpdateManyWithWhereWithoutIngredientInput = {
    where: RecipeIngredientScalarWhereInput
    data: XOR<RecipeIngredientUpdateManyMutationInput, RecipeIngredientUncheckedUpdateManyWithoutIngredientInput>
  }

  export type RecipeCreateWithoutIngredientsInput = {
    id?: string
    createdOn?: Date | string | null
    updatedAt?: Date | string | null
    title: string
    description?: string | null
    image?: string | null
    author: UserCreateNestedOneWithoutRecipesInput
    permissions?: RecipePermissionCreateNestedManyWithoutRecipeInput
    instructions?: InstructionCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUncheckedCreateWithoutIngredientsInput = {
    id?: string
    createdOn?: Date | string | null
    updatedAt?: Date | string | null
    title: string
    authorId: string
    description?: string | null
    image?: string | null
    permissions?: RecipePermissionUncheckedCreateNestedManyWithoutRecipeInput
    instructions?: InstructionUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type RecipeCreateOrConnectWithoutIngredientsInput = {
    where: RecipeWhereUniqueInput
    create: XOR<RecipeCreateWithoutIngredientsInput, RecipeUncheckedCreateWithoutIngredientsInput>
  }

  export type IngredientCreateWithoutRecipesInput = {
    id?: string
    name: string
  }

  export type IngredientUncheckedCreateWithoutRecipesInput = {
    id?: string
    name: string
  }

  export type IngredientCreateOrConnectWithoutRecipesInput = {
    where: IngredientWhereUniqueInput
    create: XOR<IngredientCreateWithoutRecipesInput, IngredientUncheckedCreateWithoutRecipesInput>
  }

  export type RecipeUpsertWithoutIngredientsInput = {
    update: XOR<RecipeUpdateWithoutIngredientsInput, RecipeUncheckedUpdateWithoutIngredientsInput>
    create: XOR<RecipeCreateWithoutIngredientsInput, RecipeUncheckedCreateWithoutIngredientsInput>
    where?: RecipeWhereInput
  }

  export type RecipeUpdateToOneWithWhereWithoutIngredientsInput = {
    where?: RecipeWhereInput
    data: XOR<RecipeUpdateWithoutIngredientsInput, RecipeUncheckedUpdateWithoutIngredientsInput>
  }

  export type RecipeUpdateWithoutIngredientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    author?: UserUpdateOneRequiredWithoutRecipesNestedInput
    permissions?: RecipePermissionUpdateManyWithoutRecipeNestedInput
    instructions?: InstructionUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateWithoutIngredientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: RecipePermissionUncheckedUpdateManyWithoutRecipeNestedInput
    instructions?: InstructionUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type IngredientUpsertWithoutRecipesInput = {
    update: XOR<IngredientUpdateWithoutRecipesInput, IngredientUncheckedUpdateWithoutRecipesInput>
    create: XOR<IngredientCreateWithoutRecipesInput, IngredientUncheckedCreateWithoutRecipesInput>
    where?: IngredientWhereInput
  }

  export type IngredientUpdateToOneWithWhereWithoutRecipesInput = {
    where?: IngredientWhereInput
    data: XOR<IngredientUpdateWithoutRecipesInput, IngredientUncheckedUpdateWithoutRecipesInput>
  }

  export type IngredientUpdateWithoutRecipesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type IngredientUncheckedUpdateWithoutRecipesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutConnectedWithInput = {
    id?: string
    email: string
    username: string
    password: string
    salt: string
    image?: string | null
    recipes?: RecipeCreateNestedManyWithoutAuthorInput
    connectedBy?: ConnectionCreateNestedManyWithoutConnectedByInput
    permissions?: RecipePermissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutConnectedWithInput = {
    id?: string
    email: string
    username: string
    password: string
    salt: string
    image?: string | null
    recipes?: RecipeUncheckedCreateNestedManyWithoutAuthorInput
    connectedBy?: ConnectionUncheckedCreateNestedManyWithoutConnectedByInput
    permissions?: RecipePermissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutConnectedWithInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutConnectedWithInput, UserUncheckedCreateWithoutConnectedWithInput>
  }

  export type UserCreateWithoutConnectedByInput = {
    id?: string
    email: string
    username: string
    password: string
    salt: string
    image?: string | null
    recipes?: RecipeCreateNestedManyWithoutAuthorInput
    connectedWith?: ConnectionCreateNestedManyWithoutConnectedWithInput
    permissions?: RecipePermissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutConnectedByInput = {
    id?: string
    email: string
    username: string
    password: string
    salt: string
    image?: string | null
    recipes?: RecipeUncheckedCreateNestedManyWithoutAuthorInput
    connectedWith?: ConnectionUncheckedCreateNestedManyWithoutConnectedWithInput
    permissions?: RecipePermissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutConnectedByInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutConnectedByInput, UserUncheckedCreateWithoutConnectedByInput>
  }

  export type UserUpsertWithoutConnectedWithInput = {
    update: XOR<UserUpdateWithoutConnectedWithInput, UserUncheckedUpdateWithoutConnectedWithInput>
    create: XOR<UserCreateWithoutConnectedWithInput, UserUncheckedCreateWithoutConnectedWithInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutConnectedWithInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutConnectedWithInput, UserUncheckedUpdateWithoutConnectedWithInput>
  }

  export type UserUpdateWithoutConnectedWithInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    recipes?: RecipeUpdateManyWithoutAuthorNestedInput
    connectedBy?: ConnectionUpdateManyWithoutConnectedByNestedInput
    permissions?: RecipePermissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutConnectedWithInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    recipes?: RecipeUncheckedUpdateManyWithoutAuthorNestedInput
    connectedBy?: ConnectionUncheckedUpdateManyWithoutConnectedByNestedInput
    permissions?: RecipePermissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutConnectedByInput = {
    update: XOR<UserUpdateWithoutConnectedByInput, UserUncheckedUpdateWithoutConnectedByInput>
    create: XOR<UserCreateWithoutConnectedByInput, UserUncheckedCreateWithoutConnectedByInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutConnectedByInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutConnectedByInput, UserUncheckedUpdateWithoutConnectedByInput>
  }

  export type UserUpdateWithoutConnectedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    recipes?: RecipeUpdateManyWithoutAuthorNestedInput
    connectedWith?: ConnectionUpdateManyWithoutConnectedWithNestedInput
    permissions?: RecipePermissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutConnectedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    recipes?: RecipeUncheckedUpdateManyWithoutAuthorNestedInput
    connectedWith?: ConnectionUncheckedUpdateManyWithoutConnectedWithNestedInput
    permissions?: RecipePermissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RecipeCreateWithoutPermissionsInput = {
    id?: string
    createdOn?: Date | string | null
    updatedAt?: Date | string | null
    title: string
    description?: string | null
    image?: string | null
    author: UserCreateNestedOneWithoutRecipesInput
    ingredients?: RecipeIngredientCreateNestedManyWithoutRecipeInput
    instructions?: InstructionCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUncheckedCreateWithoutPermissionsInput = {
    id?: string
    createdOn?: Date | string | null
    updatedAt?: Date | string | null
    title: string
    authorId: string
    description?: string | null
    image?: string | null
    ingredients?: RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInput
    instructions?: InstructionUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type RecipeCreateOrConnectWithoutPermissionsInput = {
    where: RecipeWhereUniqueInput
    create: XOR<RecipeCreateWithoutPermissionsInput, RecipeUncheckedCreateWithoutPermissionsInput>
  }

  export type UserCreateWithoutPermissionsInput = {
    id?: string
    email: string
    username: string
    password: string
    salt: string
    image?: string | null
    recipes?: RecipeCreateNestedManyWithoutAuthorInput
    connectedWith?: ConnectionCreateNestedManyWithoutConnectedWithInput
    connectedBy?: ConnectionCreateNestedManyWithoutConnectedByInput
  }

  export type UserUncheckedCreateWithoutPermissionsInput = {
    id?: string
    email: string
    username: string
    password: string
    salt: string
    image?: string | null
    recipes?: RecipeUncheckedCreateNestedManyWithoutAuthorInput
    connectedWith?: ConnectionUncheckedCreateNestedManyWithoutConnectedWithInput
    connectedBy?: ConnectionUncheckedCreateNestedManyWithoutConnectedByInput
  }

  export type UserCreateOrConnectWithoutPermissionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput>
  }

  export type RecipeUpsertWithoutPermissionsInput = {
    update: XOR<RecipeUpdateWithoutPermissionsInput, RecipeUncheckedUpdateWithoutPermissionsInput>
    create: XOR<RecipeCreateWithoutPermissionsInput, RecipeUncheckedCreateWithoutPermissionsInput>
    where?: RecipeWhereInput
  }

  export type RecipeUpdateToOneWithWhereWithoutPermissionsInput = {
    where?: RecipeWhereInput
    data: XOR<RecipeUpdateWithoutPermissionsInput, RecipeUncheckedUpdateWithoutPermissionsInput>
  }

  export type RecipeUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    author?: UserUpdateOneRequiredWithoutRecipesNestedInput
    ingredients?: RecipeIngredientUpdateManyWithoutRecipeNestedInput
    instructions?: InstructionUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInput
    instructions?: InstructionUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type UserUpsertWithoutPermissionsInput = {
    update: XOR<UserUpdateWithoutPermissionsInput, UserUncheckedUpdateWithoutPermissionsInput>
    create: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPermissionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPermissionsInput, UserUncheckedUpdateWithoutPermissionsInput>
  }

  export type UserUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    recipes?: RecipeUpdateManyWithoutAuthorNestedInput
    connectedWith?: ConnectionUpdateManyWithoutConnectedWithNestedInput
    connectedBy?: ConnectionUpdateManyWithoutConnectedByNestedInput
  }

  export type UserUncheckedUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    salt?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    recipes?: RecipeUncheckedUpdateManyWithoutAuthorNestedInput
    connectedWith?: ConnectionUncheckedUpdateManyWithoutConnectedWithNestedInput
    connectedBy?: ConnectionUncheckedUpdateManyWithoutConnectedByNestedInput
  }

  export type RecipeCreateWithoutInstructionsInput = {
    id?: string
    createdOn?: Date | string | null
    updatedAt?: Date | string | null
    title: string
    description?: string | null
    image?: string | null
    author: UserCreateNestedOneWithoutRecipesInput
    ingredients?: RecipeIngredientCreateNestedManyWithoutRecipeInput
    permissions?: RecipePermissionCreateNestedManyWithoutRecipeInput
  }

  export type RecipeUncheckedCreateWithoutInstructionsInput = {
    id?: string
    createdOn?: Date | string | null
    updatedAt?: Date | string | null
    title: string
    authorId: string
    description?: string | null
    image?: string | null
    ingredients?: RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInput
    permissions?: RecipePermissionUncheckedCreateNestedManyWithoutRecipeInput
  }

  export type RecipeCreateOrConnectWithoutInstructionsInput = {
    where: RecipeWhereUniqueInput
    create: XOR<RecipeCreateWithoutInstructionsInput, RecipeUncheckedCreateWithoutInstructionsInput>
  }

  export type TimeCreateWithoutInstructionInput = {
    hours?: number | null
    minutes?: number | null
  }

  export type TimeUncheckedCreateWithoutInstructionInput = {
    hours?: number | null
    minutes?: number | null
  }

  export type TimeCreateOrConnectWithoutInstructionInput = {
    where: TimeWhereUniqueInput
    create: XOR<TimeCreateWithoutInstructionInput, TimeUncheckedCreateWithoutInstructionInput>
  }

  export type TemperatureCreateWithoutInstructionInput = {
    temperature?: number | null
    unit?: $Enums.TemperatureUnit | null
  }

  export type TemperatureUncheckedCreateWithoutInstructionInput = {
    temperature?: number | null
    unit?: $Enums.TemperatureUnit | null
  }

  export type TemperatureCreateOrConnectWithoutInstructionInput = {
    where: TemperatureWhereUniqueInput
    create: XOR<TemperatureCreateWithoutInstructionInput, TemperatureUncheckedCreateWithoutInstructionInput>
  }

  export type RecipeUpsertWithoutInstructionsInput = {
    update: XOR<RecipeUpdateWithoutInstructionsInput, RecipeUncheckedUpdateWithoutInstructionsInput>
    create: XOR<RecipeCreateWithoutInstructionsInput, RecipeUncheckedCreateWithoutInstructionsInput>
    where?: RecipeWhereInput
  }

  export type RecipeUpdateToOneWithWhereWithoutInstructionsInput = {
    where?: RecipeWhereInput
    data: XOR<RecipeUpdateWithoutInstructionsInput, RecipeUncheckedUpdateWithoutInstructionsInput>
  }

  export type RecipeUpdateWithoutInstructionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    author?: UserUpdateOneRequiredWithoutRecipesNestedInput
    ingredients?: RecipeIngredientUpdateManyWithoutRecipeNestedInput
    permissions?: RecipePermissionUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateWithoutInstructionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInput
    permissions?: RecipePermissionUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type TimeUpsertWithoutInstructionInput = {
    update: XOR<TimeUpdateWithoutInstructionInput, TimeUncheckedUpdateWithoutInstructionInput>
    create: XOR<TimeCreateWithoutInstructionInput, TimeUncheckedCreateWithoutInstructionInput>
    where?: TimeWhereInput
  }

  export type TimeUpdateToOneWithWhereWithoutInstructionInput = {
    where?: TimeWhereInput
    data: XOR<TimeUpdateWithoutInstructionInput, TimeUncheckedUpdateWithoutInstructionInput>
  }

  export type TimeUpdateWithoutInstructionInput = {
    hours?: NullableIntFieldUpdateOperationsInput | number | null
    minutes?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TimeUncheckedUpdateWithoutInstructionInput = {
    hours?: NullableIntFieldUpdateOperationsInput | number | null
    minutes?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TemperatureUpsertWithoutInstructionInput = {
    update: XOR<TemperatureUpdateWithoutInstructionInput, TemperatureUncheckedUpdateWithoutInstructionInput>
    create: XOR<TemperatureCreateWithoutInstructionInput, TemperatureUncheckedCreateWithoutInstructionInput>
    where?: TemperatureWhereInput
  }

  export type TemperatureUpdateToOneWithWhereWithoutInstructionInput = {
    where?: TemperatureWhereInput
    data: XOR<TemperatureUpdateWithoutInstructionInput, TemperatureUncheckedUpdateWithoutInstructionInput>
  }

  export type TemperatureUpdateWithoutInstructionInput = {
    temperature?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableEnumTemperatureUnitFieldUpdateOperationsInput | $Enums.TemperatureUnit | null
  }

  export type TemperatureUncheckedUpdateWithoutInstructionInput = {
    temperature?: NullableIntFieldUpdateOperationsInput | number | null
    unit?: NullableEnumTemperatureUnitFieldUpdateOperationsInput | $Enums.TemperatureUnit | null
  }

  export type InstructionCreateWithoutTimeInput = {
    id?: string
    description: string
    step: number
    recipe: RecipeCreateNestedOneWithoutInstructionsInput
    temperature?: TemperatureCreateNestedOneWithoutInstructionInput
  }

  export type InstructionUncheckedCreateWithoutTimeInput = {
    id?: string
    description: string
    recipeId: string
    step: number
    temperature?: TemperatureUncheckedCreateNestedOneWithoutInstructionInput
  }

  export type InstructionCreateOrConnectWithoutTimeInput = {
    where: InstructionWhereUniqueInput
    create: XOR<InstructionCreateWithoutTimeInput, InstructionUncheckedCreateWithoutTimeInput>
  }

  export type InstructionUpsertWithoutTimeInput = {
    update: XOR<InstructionUpdateWithoutTimeInput, InstructionUncheckedUpdateWithoutTimeInput>
    create: XOR<InstructionCreateWithoutTimeInput, InstructionUncheckedCreateWithoutTimeInput>
    where?: InstructionWhereInput
  }

  export type InstructionUpdateToOneWithWhereWithoutTimeInput = {
    where?: InstructionWhereInput
    data: XOR<InstructionUpdateWithoutTimeInput, InstructionUncheckedUpdateWithoutTimeInput>
  }

  export type InstructionUpdateWithoutTimeInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    step?: IntFieldUpdateOperationsInput | number
    recipe?: RecipeUpdateOneRequiredWithoutInstructionsNestedInput
    temperature?: TemperatureUpdateOneWithoutInstructionNestedInput
  }

  export type InstructionUncheckedUpdateWithoutTimeInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    step?: IntFieldUpdateOperationsInput | number
    temperature?: TemperatureUncheckedUpdateOneWithoutInstructionNestedInput
  }

  export type InstructionCreateWithoutTemperatureInput = {
    id?: string
    description: string
    step: number
    recipe: RecipeCreateNestedOneWithoutInstructionsInput
    time?: TimeCreateNestedOneWithoutInstructionInput
  }

  export type InstructionUncheckedCreateWithoutTemperatureInput = {
    id?: string
    description: string
    recipeId: string
    step: number
    time?: TimeUncheckedCreateNestedOneWithoutInstructionInput
  }

  export type InstructionCreateOrConnectWithoutTemperatureInput = {
    where: InstructionWhereUniqueInput
    create: XOR<InstructionCreateWithoutTemperatureInput, InstructionUncheckedCreateWithoutTemperatureInput>
  }

  export type InstructionUpsertWithoutTemperatureInput = {
    update: XOR<InstructionUpdateWithoutTemperatureInput, InstructionUncheckedUpdateWithoutTemperatureInput>
    create: XOR<InstructionCreateWithoutTemperatureInput, InstructionUncheckedCreateWithoutTemperatureInput>
    where?: InstructionWhereInput
  }

  export type InstructionUpdateToOneWithWhereWithoutTemperatureInput = {
    where?: InstructionWhereInput
    data: XOR<InstructionUpdateWithoutTemperatureInput, InstructionUncheckedUpdateWithoutTemperatureInput>
  }

  export type InstructionUpdateWithoutTemperatureInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    step?: IntFieldUpdateOperationsInput | number
    recipe?: RecipeUpdateOneRequiredWithoutInstructionsNestedInput
    time?: TimeUpdateOneWithoutInstructionNestedInput
  }

  export type InstructionUncheckedUpdateWithoutTemperatureInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    recipeId?: StringFieldUpdateOperationsInput | string
    step?: IntFieldUpdateOperationsInput | number
    time?: TimeUncheckedUpdateOneWithoutInstructionNestedInput
  }

  export type RecipeCreateManyAuthorInput = {
    id?: string
    createdOn?: Date | string | null
    updatedAt?: Date | string | null
    title: string
    description?: string | null
    image?: string | null
  }

  export type ConnectionCreateManyConnectedWithInput = {
    connectedById: string
    accepted?: boolean
  }

  export type ConnectionCreateManyConnectedByInput = {
    connectedWithId: string
    accepted?: boolean
  }

  export type RecipePermissionCreateManyUserInput = {
    recipeId: string
    permission: $Enums.Role
  }

  export type RecipeUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: RecipeIngredientUpdateManyWithoutRecipeNestedInput
    permissions?: RecipePermissionUpdateManyWithoutRecipeNestedInput
    instructions?: InstructionUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    ingredients?: RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInput
    permissions?: RecipePermissionUncheckedUpdateManyWithoutRecipeNestedInput
    instructions?: InstructionUncheckedUpdateManyWithoutRecipeNestedInput
  }

  export type RecipeUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ConnectionUpdateWithoutConnectedWithInput = {
    accepted?: BoolFieldUpdateOperationsInput | boolean
    connectedBy?: UserUpdateOneRequiredWithoutConnectedByNestedInput
  }

  export type ConnectionUncheckedUpdateWithoutConnectedWithInput = {
    connectedById?: StringFieldUpdateOperationsInput | string
    accepted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ConnectionUncheckedUpdateManyWithoutConnectedWithInput = {
    connectedById?: StringFieldUpdateOperationsInput | string
    accepted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ConnectionUpdateWithoutConnectedByInput = {
    accepted?: BoolFieldUpdateOperationsInput | boolean
    connectedWith?: UserUpdateOneRequiredWithoutConnectedWithNestedInput
  }

  export type ConnectionUncheckedUpdateWithoutConnectedByInput = {
    connectedWithId?: StringFieldUpdateOperationsInput | string
    accepted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ConnectionUncheckedUpdateManyWithoutConnectedByInput = {
    connectedWithId?: StringFieldUpdateOperationsInput | string
    accepted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RecipePermissionUpdateWithoutUserInput = {
    permission?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    recipe?: RecipeUpdateOneRequiredWithoutPermissionsNestedInput
  }

  export type RecipePermissionUncheckedUpdateWithoutUserInput = {
    recipeId?: StringFieldUpdateOperationsInput | string
    permission?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type RecipePermissionUncheckedUpdateManyWithoutUserInput = {
    recipeId?: StringFieldUpdateOperationsInput | string
    permission?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type RecipeIngredientCreateManyRecipeInput = {
    ingredientId: string
    quantity: number
    unit?: $Enums.IngreidentUnit | null
  }

  export type RecipePermissionCreateManyRecipeInput = {
    userId: string
    permission: $Enums.Role
  }

  export type InstructionCreateManyRecipeInput = {
    id?: string
    description: string
    step: number
  }

  export type RecipeIngredientUpdateWithoutRecipeInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: NullableEnumIngreidentUnitFieldUpdateOperationsInput | $Enums.IngreidentUnit | null
    ingredient?: IngredientUpdateOneRequiredWithoutRecipesNestedInput
  }

  export type RecipeIngredientUncheckedUpdateWithoutRecipeInput = {
    ingredientId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: NullableEnumIngreidentUnitFieldUpdateOperationsInput | $Enums.IngreidentUnit | null
  }

  export type RecipeIngredientUncheckedUpdateManyWithoutRecipeInput = {
    ingredientId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: NullableEnumIngreidentUnitFieldUpdateOperationsInput | $Enums.IngreidentUnit | null
  }

  export type RecipePermissionUpdateWithoutRecipeInput = {
    permission?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    user?: UserUpdateOneRequiredWithoutPermissionsNestedInput
  }

  export type RecipePermissionUncheckedUpdateWithoutRecipeInput = {
    userId?: StringFieldUpdateOperationsInput | string
    permission?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type RecipePermissionUncheckedUpdateManyWithoutRecipeInput = {
    userId?: StringFieldUpdateOperationsInput | string
    permission?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type InstructionUpdateWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    step?: IntFieldUpdateOperationsInput | number
    time?: TimeUpdateOneWithoutInstructionNestedInput
    temperature?: TemperatureUpdateOneWithoutInstructionNestedInput
  }

  export type InstructionUncheckedUpdateWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    step?: IntFieldUpdateOperationsInput | number
    time?: TimeUncheckedUpdateOneWithoutInstructionNestedInput
    temperature?: TemperatureUncheckedUpdateOneWithoutInstructionNestedInput
  }

  export type InstructionUncheckedUpdateManyWithoutRecipeInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    step?: IntFieldUpdateOperationsInput | number
  }

  export type RecipeIngredientCreateManyIngredientInput = {
    recipeId: string
    quantity: number
    unit?: $Enums.IngreidentUnit | null
  }

  export type RecipeIngredientUpdateWithoutIngredientInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: NullableEnumIngreidentUnitFieldUpdateOperationsInput | $Enums.IngreidentUnit | null
    recipe?: RecipeUpdateOneRequiredWithoutIngredientsNestedInput
  }

  export type RecipeIngredientUncheckedUpdateWithoutIngredientInput = {
    recipeId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: NullableEnumIngreidentUnitFieldUpdateOperationsInput | $Enums.IngreidentUnit | null
  }

  export type RecipeIngredientUncheckedUpdateManyWithoutIngredientInput = {
    recipeId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unit?: NullableEnumIngreidentUnitFieldUpdateOperationsInput | $Enums.IngreidentUnit | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecipeCountOutputTypeDefaultArgs instead
     */
    export type RecipeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RecipeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use IngredientCountOutputTypeDefaultArgs instead
     */
    export type IngredientCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = IngredientCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecipeDefaultArgs instead
     */
    export type RecipeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RecipeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use IngredientDefaultArgs instead
     */
    export type IngredientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = IngredientDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecipeIngredientDefaultArgs instead
     */
    export type RecipeIngredientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RecipeIngredientDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConnectionDefaultArgs instead
     */
    export type ConnectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConnectionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecipePermissionDefaultArgs instead
     */
    export type RecipePermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RecipePermissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InstructionDefaultArgs instead
     */
    export type InstructionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InstructionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TimeDefaultArgs instead
     */
    export type TimeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TimeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TemperatureDefaultArgs instead
     */
    export type TemperatureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TemperatureDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}