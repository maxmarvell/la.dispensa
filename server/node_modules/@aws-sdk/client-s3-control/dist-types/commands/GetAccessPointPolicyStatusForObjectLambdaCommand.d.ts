import { Command as $Command } from "@smithy/smithy-client";
import { MetadataBearer as __MetadataBearer } from "@smithy/types";
import { GetAccessPointPolicyStatusForObjectLambdaRequest, GetAccessPointPolicyStatusForObjectLambdaResult } from "../models/models_0";
import { S3ControlClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../S3ControlClient";
/**
 * @public
 */
export { __MetadataBearer, $Command };
/**
 * @public
 *
 * The input for {@link GetAccessPointPolicyStatusForObjectLambdaCommand}.
 */
export interface GetAccessPointPolicyStatusForObjectLambdaCommandInput extends GetAccessPointPolicyStatusForObjectLambdaRequest {
}
/**
 * @public
 *
 * The output of {@link GetAccessPointPolicyStatusForObjectLambdaCommand}.
 */
export interface GetAccessPointPolicyStatusForObjectLambdaCommandOutput extends GetAccessPointPolicyStatusForObjectLambdaResult, __MetadataBearer {
}
declare const GetAccessPointPolicyStatusForObjectLambdaCommand_base: {
    new (input: GetAccessPointPolicyStatusForObjectLambdaCommandInput): import("@smithy/smithy-client").CommandImpl<GetAccessPointPolicyStatusForObjectLambdaCommandInput, GetAccessPointPolicyStatusForObjectLambdaCommandOutput, S3ControlClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    getEndpointParameterInstructions(): import("@smithy/middleware-endpoint").EndpointParameterInstructions;
};
/**
 * @public
 * <note>
 *             <p>This operation is not supported by directory buckets.</p>
 *          </note>
 *          <p>Returns the status of the resource policy associated with an Object Lambda Access Point.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { S3ControlClient, GetAccessPointPolicyStatusForObjectLambdaCommand } from "@aws-sdk/client-s3-control"; // ES Modules import
 * // const { S3ControlClient, GetAccessPointPolicyStatusForObjectLambdaCommand } = require("@aws-sdk/client-s3-control"); // CommonJS import
 * const client = new S3ControlClient(config);
 * const input = { // GetAccessPointPolicyStatusForObjectLambdaRequest
 *   AccountId: "STRING_VALUE",
 *   Name: "STRING_VALUE", // required
 * };
 * const command = new GetAccessPointPolicyStatusForObjectLambdaCommand(input);
 * const response = await client.send(command);
 * // { // GetAccessPointPolicyStatusForObjectLambdaResult
 * //   PolicyStatus: { // PolicyStatus
 * //     IsPublic: true || false,
 * //   },
 * // };
 *
 * ```
 *
 * @param GetAccessPointPolicyStatusForObjectLambdaCommandInput - {@link GetAccessPointPolicyStatusForObjectLambdaCommandInput}
 * @returns {@link GetAccessPointPolicyStatusForObjectLambdaCommandOutput}
 * @see {@link GetAccessPointPolicyStatusForObjectLambdaCommandInput} for command's `input` shape.
 * @see {@link GetAccessPointPolicyStatusForObjectLambdaCommandOutput} for command's `response` shape.
 * @see {@link S3ControlClientResolvedConfig | config} for S3ControlClient's `config` shape.
 *
 * @throws {@link S3ControlServiceException}
 * <p>Base exception class for all service exceptions from S3Control service.</p>
 *
 */
export declare class GetAccessPointPolicyStatusForObjectLambdaCommand extends GetAccessPointPolicyStatusForObjectLambdaCommand_base {
}
