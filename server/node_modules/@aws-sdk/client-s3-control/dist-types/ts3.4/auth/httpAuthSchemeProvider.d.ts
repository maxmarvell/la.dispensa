import {
  AwsSdkSigV4AuthInputConfig,
  AwsSdkSigV4AuthResolvedConfig,
  AwsSdkSigV4PreviouslyResolved,
} from "@aws-sdk/core";
import {
  HandlerExecutionContext,
  HttpAuthScheme,
  HttpAuthSchemeParameters,
  HttpAuthSchemeParametersProvider,
  HttpAuthSchemeProvider,
} from "@smithy/types";
import { S3ControlClientResolvedConfig } from "../S3ControlClient";
export interface S3ControlHttpAuthSchemeParameters
  extends HttpAuthSchemeParameters {
  region?: string;
}
export interface S3ControlHttpAuthSchemeParametersProvider
  extends HttpAuthSchemeParametersProvider<
    S3ControlClientResolvedConfig,
    HandlerExecutionContext,
    S3ControlHttpAuthSchemeParameters,
    object
  > {}
export declare const defaultS3ControlHttpAuthSchemeParametersProvider: (
  config: S3ControlClientResolvedConfig,
  context: HandlerExecutionContext,
  input: object
) => Promise<S3ControlHttpAuthSchemeParameters>;
export interface S3ControlHttpAuthSchemeProvider
  extends HttpAuthSchemeProvider<S3ControlHttpAuthSchemeParameters> {}
export declare const defaultS3ControlHttpAuthSchemeProvider: S3ControlHttpAuthSchemeProvider;
export interface HttpAuthSchemeInputConfig extends AwsSdkSigV4AuthInputConfig {
  httpAuthSchemes?: HttpAuthScheme[];
  httpAuthSchemeProvider?: S3ControlHttpAuthSchemeProvider;
}
export interface HttpAuthSchemeResolvedConfig
  extends AwsSdkSigV4AuthResolvedConfig {
  readonly httpAuthSchemes: HttpAuthScheme[];
  readonly httpAuthSchemeProvider: S3ControlHttpAuthSchemeProvider;
}
export declare const resolveHttpAuthSchemeConfig: <T>(
  config: T & HttpAuthSchemeInputConfig & AwsSdkSigV4PreviouslyResolved
) => T & HttpAuthSchemeResolvedConfig;
