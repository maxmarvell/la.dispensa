"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AssociateAccessGrantsIdentityCenterCommand: () => AssociateAccessGrantsIdentityCenterCommand,
  AsyncOperationName: () => AsyncOperationName,
  BadRequestException: () => BadRequestException,
  BucketAlreadyExists: () => BucketAlreadyExists,
  BucketAlreadyOwnedByYou: () => BucketAlreadyOwnedByYou,
  BucketCannedACL: () => BucketCannedACL,
  BucketLocationConstraint: () => BucketLocationConstraint,
  BucketVersioningStatus: () => BucketVersioningStatus,
  CreateAccessGrantCommand: () => CreateAccessGrantCommand,
  CreateAccessGrantsInstanceCommand: () => CreateAccessGrantsInstanceCommand,
  CreateAccessGrantsLocationCommand: () => CreateAccessGrantsLocationCommand,
  CreateAccessPointCommand: () => CreateAccessPointCommand,
  CreateAccessPointForObjectLambdaCommand: () => CreateAccessPointForObjectLambdaCommand,
  CreateBucketCommand: () => CreateBucketCommand,
  CreateJobCommand: () => CreateJobCommand,
  CreateMultiRegionAccessPointCommand: () => CreateMultiRegionAccessPointCommand,
  CreateStorageLensGroupCommand: () => CreateStorageLensGroupCommand,
  CredentialsFilterSensitiveLog: () => CredentialsFilterSensitiveLog,
  DeleteAccessGrantCommand: () => DeleteAccessGrantCommand,
  DeleteAccessGrantsInstanceCommand: () => DeleteAccessGrantsInstanceCommand,
  DeleteAccessGrantsInstanceResourcePolicyCommand: () => DeleteAccessGrantsInstanceResourcePolicyCommand,
  DeleteAccessGrantsLocationCommand: () => DeleteAccessGrantsLocationCommand,
  DeleteAccessPointCommand: () => DeleteAccessPointCommand,
  DeleteAccessPointForObjectLambdaCommand: () => DeleteAccessPointForObjectLambdaCommand,
  DeleteAccessPointPolicyCommand: () => DeleteAccessPointPolicyCommand,
  DeleteAccessPointPolicyForObjectLambdaCommand: () => DeleteAccessPointPolicyForObjectLambdaCommand,
  DeleteBucketCommand: () => DeleteBucketCommand,
  DeleteBucketLifecycleConfigurationCommand: () => DeleteBucketLifecycleConfigurationCommand,
  DeleteBucketPolicyCommand: () => DeleteBucketPolicyCommand,
  DeleteBucketReplicationCommand: () => DeleteBucketReplicationCommand,
  DeleteBucketTaggingCommand: () => DeleteBucketTaggingCommand,
  DeleteJobTaggingCommand: () => DeleteJobTaggingCommand,
  DeleteMarkerReplicationStatus: () => DeleteMarkerReplicationStatus,
  DeleteMultiRegionAccessPointCommand: () => DeleteMultiRegionAccessPointCommand,
  DeletePublicAccessBlockCommand: () => DeletePublicAccessBlockCommand,
  DeleteStorageLensConfigurationCommand: () => DeleteStorageLensConfigurationCommand,
  DeleteStorageLensConfigurationTaggingCommand: () => DeleteStorageLensConfigurationTaggingCommand,
  DeleteStorageLensGroupCommand: () => DeleteStorageLensGroupCommand,
  DescribeJobCommand: () => DescribeJobCommand,
  DescribeMultiRegionAccessPointOperationCommand: () => DescribeMultiRegionAccessPointOperationCommand,
  DissociateAccessGrantsIdentityCenterCommand: () => DissociateAccessGrantsIdentityCenterCommand,
  ExistingObjectReplicationStatus: () => ExistingObjectReplicationStatus,
  ExpirationStatus: () => ExpirationStatus,
  Format: () => Format,
  GeneratedManifestFormat: () => GeneratedManifestFormat,
  GetAccessGrantCommand: () => GetAccessGrantCommand,
  GetAccessGrantsInstanceCommand: () => GetAccessGrantsInstanceCommand,
  GetAccessGrantsInstanceForPrefixCommand: () => GetAccessGrantsInstanceForPrefixCommand,
  GetAccessGrantsInstanceResourcePolicyCommand: () => GetAccessGrantsInstanceResourcePolicyCommand,
  GetAccessGrantsLocationCommand: () => GetAccessGrantsLocationCommand,
  GetAccessPointCommand: () => GetAccessPointCommand,
  GetAccessPointConfigurationForObjectLambdaCommand: () => GetAccessPointConfigurationForObjectLambdaCommand,
  GetAccessPointForObjectLambdaCommand: () => GetAccessPointForObjectLambdaCommand,
  GetAccessPointPolicyCommand: () => GetAccessPointPolicyCommand,
  GetAccessPointPolicyForObjectLambdaCommand: () => GetAccessPointPolicyForObjectLambdaCommand,
  GetAccessPointPolicyStatusCommand: () => GetAccessPointPolicyStatusCommand,
  GetAccessPointPolicyStatusForObjectLambdaCommand: () => GetAccessPointPolicyStatusForObjectLambdaCommand,
  GetBucketCommand: () => GetBucketCommand,
  GetBucketLifecycleConfigurationCommand: () => GetBucketLifecycleConfigurationCommand,
  GetBucketPolicyCommand: () => GetBucketPolicyCommand,
  GetBucketReplicationCommand: () => GetBucketReplicationCommand,
  GetBucketTaggingCommand: () => GetBucketTaggingCommand,
  GetBucketVersioningCommand: () => GetBucketVersioningCommand,
  GetDataAccessCommand: () => GetDataAccessCommand,
  GetDataAccessResultFilterSensitiveLog: () => GetDataAccessResultFilterSensitiveLog,
  GetJobTaggingCommand: () => GetJobTaggingCommand,
  GetMultiRegionAccessPointCommand: () => GetMultiRegionAccessPointCommand,
  GetMultiRegionAccessPointPolicyCommand: () => GetMultiRegionAccessPointPolicyCommand,
  GetMultiRegionAccessPointPolicyStatusCommand: () => GetMultiRegionAccessPointPolicyStatusCommand,
  GetMultiRegionAccessPointRoutesCommand: () => GetMultiRegionAccessPointRoutesCommand,
  GetPublicAccessBlockCommand: () => GetPublicAccessBlockCommand,
  GetStorageLensConfigurationCommand: () => GetStorageLensConfigurationCommand,
  GetStorageLensConfigurationTaggingCommand: () => GetStorageLensConfigurationTaggingCommand,
  GetStorageLensGroupCommand: () => GetStorageLensGroupCommand,
  GranteeType: () => GranteeType,
  IdempotencyException: () => IdempotencyException,
  InternalServiceException: () => InternalServiceException,
  InvalidNextTokenException: () => InvalidNextTokenException,
  InvalidRequestException: () => InvalidRequestException,
  JobManifestFieldName: () => JobManifestFieldName,
  JobManifestFormat: () => JobManifestFormat,
  JobManifestGenerator: () => JobManifestGenerator,
  JobReportFormat: () => JobReportFormat,
  JobReportScope: () => JobReportScope,
  JobStatus: () => JobStatus,
  JobStatusException: () => JobStatusException,
  ListAccessGrantsCommand: () => ListAccessGrantsCommand,
  ListAccessGrantsInstancesCommand: () => ListAccessGrantsInstancesCommand,
  ListAccessGrantsLocationsCommand: () => ListAccessGrantsLocationsCommand,
  ListAccessPointsCommand: () => ListAccessPointsCommand,
  ListAccessPointsForObjectLambdaCommand: () => ListAccessPointsForObjectLambdaCommand,
  ListJobsCommand: () => ListJobsCommand,
  ListMultiRegionAccessPointsCommand: () => ListMultiRegionAccessPointsCommand,
  ListRegionalBucketsCommand: () => ListRegionalBucketsCommand,
  ListStorageLensConfigurationsCommand: () => ListStorageLensConfigurationsCommand,
  ListStorageLensGroupsCommand: () => ListStorageLensGroupsCommand,
  ListTagsForResourceCommand: () => ListTagsForResourceCommand,
  MFADelete: () => MFADelete,
  MFADeleteStatus: () => MFADeleteStatus,
  MetricsStatus: () => MetricsStatus,
  MultiRegionAccessPointStatus: () => MultiRegionAccessPointStatus,
  NetworkOrigin: () => NetworkOrigin,
  NoSuchPublicAccessBlockConfiguration: () => NoSuchPublicAccessBlockConfiguration,
  NotFoundException: () => NotFoundException,
  ObjectLambdaAccessPointAliasStatus: () => ObjectLambdaAccessPointAliasStatus,
  ObjectLambdaAllowedFeature: () => ObjectLambdaAllowedFeature,
  ObjectLambdaContentTransformation: () => ObjectLambdaContentTransformation,
  ObjectLambdaTransformationConfigurationAction: () => ObjectLambdaTransformationConfigurationAction,
  OperationName: () => OperationName,
  OutputSchemaVersion: () => OutputSchemaVersion,
  OwnerOverride: () => OwnerOverride,
  Permission: () => Permission,
  Privilege: () => Privilege,
  PutAccessGrantsInstanceResourcePolicyCommand: () => PutAccessGrantsInstanceResourcePolicyCommand,
  PutAccessPointConfigurationForObjectLambdaCommand: () => PutAccessPointConfigurationForObjectLambdaCommand,
  PutAccessPointPolicyCommand: () => PutAccessPointPolicyCommand,
  PutAccessPointPolicyForObjectLambdaCommand: () => PutAccessPointPolicyForObjectLambdaCommand,
  PutBucketLifecycleConfigurationCommand: () => PutBucketLifecycleConfigurationCommand,
  PutBucketPolicyCommand: () => PutBucketPolicyCommand,
  PutBucketReplicationCommand: () => PutBucketReplicationCommand,
  PutBucketTaggingCommand: () => PutBucketTaggingCommand,
  PutBucketVersioningCommand: () => PutBucketVersioningCommand,
  PutJobTaggingCommand: () => PutJobTaggingCommand,
  PutMultiRegionAccessPointPolicyCommand: () => PutMultiRegionAccessPointPolicyCommand,
  PutPublicAccessBlockCommand: () => PutPublicAccessBlockCommand,
  PutStorageLensConfigurationCommand: () => PutStorageLensConfigurationCommand,
  PutStorageLensConfigurationTaggingCommand: () => PutStorageLensConfigurationTaggingCommand,
  ReplicaModificationsStatus: () => ReplicaModificationsStatus,
  ReplicationRuleStatus: () => ReplicationRuleStatus,
  ReplicationStatus: () => ReplicationStatus,
  ReplicationStorageClass: () => ReplicationStorageClass,
  ReplicationTimeStatus: () => ReplicationTimeStatus,
  RequestedJobStatus: () => RequestedJobStatus,
  S3CannedAccessControlList: () => S3CannedAccessControlList,
  S3ChecksumAlgorithm: () => S3ChecksumAlgorithm,
  S3Control: () => S3Control,
  S3ControlClient: () => S3ControlClient,
  S3ControlServiceException: () => S3ControlServiceException,
  S3GlacierJobTier: () => S3GlacierJobTier,
  S3GranteeTypeIdentifier: () => S3GranteeTypeIdentifier,
  S3MetadataDirective: () => S3MetadataDirective,
  S3ObjectLockLegalHoldStatus: () => S3ObjectLockLegalHoldStatus,
  S3ObjectLockMode: () => S3ObjectLockMode,
  S3ObjectLockRetentionMode: () => S3ObjectLockRetentionMode,
  S3Permission: () => S3Permission,
  S3PrefixType: () => S3PrefixType,
  S3SSEAlgorithm: () => S3SSEAlgorithm,
  S3StorageClass: () => S3StorageClass,
  SseKmsEncryptedObjectsStatus: () => SseKmsEncryptedObjectsStatus,
  SubmitMultiRegionAccessPointRoutesCommand: () => SubmitMultiRegionAccessPointRoutesCommand,
  TagResourceCommand: () => TagResourceCommand,
  TooManyRequestsException: () => TooManyRequestsException,
  TooManyTagsException: () => TooManyTagsException,
  TransitionStorageClass: () => TransitionStorageClass,
  UntagResourceCommand: () => UntagResourceCommand,
  UpdateAccessGrantsLocationCommand: () => UpdateAccessGrantsLocationCommand,
  UpdateJobPriorityCommand: () => UpdateJobPriorityCommand,
  UpdateJobStatusCommand: () => UpdateJobStatusCommand,
  UpdateStorageLensGroupCommand: () => UpdateStorageLensGroupCommand,
  __Client: () => import_smithy_client.Client,
  paginateListAccessGrants: () => paginateListAccessGrants,
  paginateListAccessGrantsInstances: () => paginateListAccessGrantsInstances,
  paginateListAccessGrantsLocations: () => paginateListAccessGrantsLocations,
  paginateListAccessPoints: () => paginateListAccessPoints,
  paginateListAccessPointsForObjectLambda: () => paginateListAccessPointsForObjectLambda,
  paginateListJobs: () => paginateListJobs,
  paginateListMultiRegionAccessPoints: () => paginateListMultiRegionAccessPoints,
  paginateListRegionalBuckets: () => paginateListRegionalBuckets,
  paginateListStorageLensConfigurations: () => paginateListStorageLensConfigurations,
  paginateListStorageLensGroups: () => paginateListStorageLensGroups
});
module.exports = __toCommonJS(src_exports);

// src/S3ControlClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_sdk_s3_control = require("@aws-sdk/middleware-sdk-s3-control");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return {
    ...options,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    defaultSigningName: "s3"
  };
}, "resolveClientEndpointParameters");
var commonParams = {
  UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/S3ControlClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    ...(0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    ...(0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
}, "resolveRuntimeExtensions");

// src/S3ControlClient.ts
var _S3ControlClient = class _S3ControlClient extends import_smithy_client.Client {
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);
    const _config_3 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_2);
    const _config_4 = (0, import_middleware_retry.resolveRetryConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_sdk_s3_control.resolveS3ControlConfig)(_config_5);
    const _config_7 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_6);
    const _config_8 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_7);
    const _config_9 = resolveRuntimeExtensions(_config_8, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_9);
    this.config = _config_9;
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_sdk_s3_control.getHostPrefixDeduplicationPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
        identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
  getDefaultHttpAuthSchemeParametersProvider() {
    return import_httpAuthSchemeProvider.defaultS3ControlHttpAuthSchemeParametersProvider;
  }
  getIdentityProviderConfigProvider() {
    return async (config) => new import_core.DefaultIdentityProviderConfig({
      "aws.auth#sigv4": config.credentials
    });
  }
};
__name(_S3ControlClient, "S3ControlClient");
var S3ControlClient = _S3ControlClient;

// src/S3Control.ts


// src/commands/AssociateAccessGrantsIdentityCenterCommand.ts
var import_middleware_sdk_s3_control2 = require("@aws-sdk/middleware-sdk-s3-control");
var import_middleware_apply_body_checksum = require("@smithy/middleware-apply-body-checksum");

var import_middleware_serde = require("@smithy/middleware-serde");

var import_types = require("@smithy/types");

// src/protocols/Aws_restXml.ts
var import_xml_builder = require("@aws-sdk/xml-builder");



var import_fast_xml_parser = require("fast-xml-parser");
var import_uuid = require("uuid");

// src/models/models_0.ts


// src/models/S3ControlServiceException.ts

var _S3ControlServiceException = class _S3ControlServiceException extends import_smithy_client.ServiceException {
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _S3ControlServiceException.prototype);
  }
};
__name(_S3ControlServiceException, "S3ControlServiceException");
var S3ControlServiceException = _S3ControlServiceException;

// src/models/models_0.ts
var OwnerOverride = {
  Destination: "Destination"
};
var GranteeType = {
  DIRECTORY_GROUP: "DIRECTORY_GROUP",
  DIRECTORY_USER: "DIRECTORY_USER",
  IAM: "IAM"
};
var Permission = {
  READ: "READ",
  READWRITE: "READWRITE",
  WRITE: "WRITE"
};
var NetworkOrigin = {
  Internet: "Internet",
  VPC: "VPC"
};
var AsyncOperationName = {
  CreateMultiRegionAccessPoint: "CreateMultiRegionAccessPoint",
  DeleteMultiRegionAccessPoint: "DeleteMultiRegionAccessPoint",
  PutMultiRegionAccessPointPolicy: "PutMultiRegionAccessPointPolicy"
};
var S3PrefixType = {
  Object: "Object"
};
var ObjectLambdaAllowedFeature = {
  GetObjectPartNumber: "GetObject-PartNumber",
  GetObjectRange: "GetObject-Range",
  HeadObjectPartNumber: "HeadObject-PartNumber",
  HeadObjectRange: "HeadObject-Range"
};
var ObjectLambdaTransformationConfigurationAction = {
  GetObject: "GetObject",
  HeadObject: "HeadObject",
  ListObjects: "ListObjects",
  ListObjectsV2: "ListObjectsV2"
};
var ObjectLambdaContentTransformation;
((ObjectLambdaContentTransformation2) => {
  ObjectLambdaContentTransformation2.visit = /* @__PURE__ */ __name((value, visitor) => {
    if (value.AwsLambda !== void 0)
      return visitor.AwsLambda(value.AwsLambda);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  }, "visit");
})(ObjectLambdaContentTransformation || (ObjectLambdaContentTransformation = {}));
var ObjectLambdaAccessPointAliasStatus = {
  PROVISIONING: "PROVISIONING",
  READY: "READY"
};
var _BucketAlreadyExists = class _BucketAlreadyExists extends S3ControlServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "BucketAlreadyExists",
      $fault: "client",
      ...opts
    });
    this.name = "BucketAlreadyExists";
    this.$fault = "client";
    Object.setPrototypeOf(this, _BucketAlreadyExists.prototype);
  }
};
__name(_BucketAlreadyExists, "BucketAlreadyExists");
var BucketAlreadyExists = _BucketAlreadyExists;
var _BucketAlreadyOwnedByYou = class _BucketAlreadyOwnedByYou extends S3ControlServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "BucketAlreadyOwnedByYou",
      $fault: "client",
      ...opts
    });
    this.name = "BucketAlreadyOwnedByYou";
    this.$fault = "client";
    Object.setPrototypeOf(this, _BucketAlreadyOwnedByYou.prototype);
  }
};
__name(_BucketAlreadyOwnedByYou, "BucketAlreadyOwnedByYou");
var BucketAlreadyOwnedByYou = _BucketAlreadyOwnedByYou;
var BucketCannedACL = {
  authenticated_read: "authenticated-read",
  private: "private",
  public_read: "public-read",
  public_read_write: "public-read-write"
};
var BucketLocationConstraint = {
  EU: "EU",
  ap_northeast_1: "ap-northeast-1",
  ap_south_1: "ap-south-1",
  ap_southeast_1: "ap-southeast-1",
  ap_southeast_2: "ap-southeast-2",
  cn_north_1: "cn-north-1",
  eu_central_1: "eu-central-1",
  eu_west_1: "eu-west-1",
  sa_east_1: "sa-east-1",
  us_west_1: "us-west-1",
  us_west_2: "us-west-2"
};
var _BadRequestException = class _BadRequestException extends S3ControlServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "BadRequestException",
      $fault: "client",
      ...opts
    });
    this.name = "BadRequestException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _BadRequestException.prototype);
    this.Message = opts.Message;
  }
};
__name(_BadRequestException, "BadRequestException");
var BadRequestException = _BadRequestException;
var JobManifestFieldName = {
  Bucket: "Bucket",
  Ignore: "Ignore",
  Key: "Key",
  VersionId: "VersionId"
};
var JobManifestFormat = {
  S3BatchOperations_CSV_20180820: "S3BatchOperations_CSV_20180820",
  S3InventoryReport_CSV_20161130: "S3InventoryReport_CSV_20161130"
};
var S3StorageClass = {
  DEEP_ARCHIVE: "DEEP_ARCHIVE",
  GLACIER: "GLACIER",
  GLACIER_IR: "GLACIER_IR",
  INTELLIGENT_TIERING: "INTELLIGENT_TIERING",
  ONEZONE_IA: "ONEZONE_IA",
  STANDARD: "STANDARD",
  STANDARD_IA: "STANDARD_IA"
};
var ReplicationStatus = {
  COMPLETED: "COMPLETED",
  FAILED: "FAILED",
  NONE: "NONE",
  REPLICA: "REPLICA"
};
var GeneratedManifestFormat = {
  S3InventoryReport_CSV_20211130: "S3InventoryReport_CSV_20211130"
};
var JobManifestGenerator;
((JobManifestGenerator2) => {
  JobManifestGenerator2.visit = /* @__PURE__ */ __name((value, visitor) => {
    if (value.S3JobManifestGenerator !== void 0)
      return visitor.S3JobManifestGenerator(value.S3JobManifestGenerator);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  }, "visit");
})(JobManifestGenerator || (JobManifestGenerator = {}));
var S3GlacierJobTier = {
  BULK: "BULK",
  STANDARD: "STANDARD"
};
var S3GranteeTypeIdentifier = {
  CANONICAL: "id",
  EMAIL_ADDRESS: "emailAddress",
  GROUP: "uri"
};
var S3Permission = {
  FULL_CONTROL: "FULL_CONTROL",
  READ: "READ",
  READ_ACP: "READ_ACP",
  WRITE: "WRITE",
  WRITE_ACP: "WRITE_ACP"
};
var S3CannedAccessControlList = {
  AUTHENTICATED_READ: "authenticated-read",
  AWS_EXEC_READ: "aws-exec-read",
  BUCKET_OWNER_FULL_CONTROL: "bucket-owner-full-control",
  BUCKET_OWNER_READ: "bucket-owner-read",
  PRIVATE: "private",
  PUBLIC_READ: "public-read",
  PUBLIC_READ_WRITE: "public-read-write"
};
var S3ChecksumAlgorithm = {
  CRC32: "CRC32",
  CRC32C: "CRC32C",
  SHA1: "SHA1",
  SHA256: "SHA256"
};
var S3MetadataDirective = {
  COPY: "COPY",
  REPLACE: "REPLACE"
};
var S3SSEAlgorithm = {
  AES256: "AES256",
  KMS: "KMS"
};
var S3ObjectLockLegalHoldStatus = {
  OFF: "OFF",
  ON: "ON"
};
var S3ObjectLockMode = {
  COMPLIANCE: "COMPLIANCE",
  GOVERNANCE: "GOVERNANCE"
};
var S3ObjectLockRetentionMode = {
  COMPLIANCE: "COMPLIANCE",
  GOVERNANCE: "GOVERNANCE"
};
var JobReportFormat = {
  Report_CSV_20180820: "Report_CSV_20180820"
};
var JobReportScope = {
  AllTasks: "AllTasks",
  FailedTasksOnly: "FailedTasksOnly"
};
var _IdempotencyException = class _IdempotencyException extends S3ControlServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "IdempotencyException",
      $fault: "client",
      ...opts
    });
    this.name = "IdempotencyException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _IdempotencyException.prototype);
    this.Message = opts.Message;
  }
};
__name(_IdempotencyException, "IdempotencyException");
var IdempotencyException = _IdempotencyException;
var _InternalServiceException = class _InternalServiceException extends S3ControlServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InternalServiceException",
      $fault: "server",
      ...opts
    });
    this.name = "InternalServiceException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _InternalServiceException.prototype);
    this.Message = opts.Message;
  }
};
__name(_InternalServiceException, "InternalServiceException");
var InternalServiceException = _InternalServiceException;
var _TooManyRequestsException = class _TooManyRequestsException extends S3ControlServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TooManyRequestsException",
      $fault: "client",
      ...opts
    });
    this.name = "TooManyRequestsException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _TooManyRequestsException.prototype);
    this.Message = opts.Message;
  }
};
__name(_TooManyRequestsException, "TooManyRequestsException");
var TooManyRequestsException = _TooManyRequestsException;
var _NotFoundException = class _NotFoundException extends S3ControlServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "NotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "NotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _NotFoundException.prototype);
    this.Message = opts.Message;
  }
};
__name(_NotFoundException, "NotFoundException");
var NotFoundException = _NotFoundException;
var JobStatus = {
  Active: "Active",
  Cancelled: "Cancelled",
  Cancelling: "Cancelling",
  Complete: "Complete",
  Completing: "Completing",
  Failed: "Failed",
  Failing: "Failing",
  New: "New",
  Paused: "Paused",
  Pausing: "Pausing",
  Preparing: "Preparing",
  Ready: "Ready",
  Suspended: "Suspended"
};
var TransitionStorageClass = {
  DEEP_ARCHIVE: "DEEP_ARCHIVE",
  GLACIER: "GLACIER",
  INTELLIGENT_TIERING: "INTELLIGENT_TIERING",
  ONEZONE_IA: "ONEZONE_IA",
  STANDARD_IA: "STANDARD_IA"
};
var ExpirationStatus = {
  Disabled: "Disabled",
  Enabled: "Enabled"
};
var DeleteMarkerReplicationStatus = {
  Disabled: "Disabled",
  Enabled: "Enabled"
};
var MetricsStatus = {
  Disabled: "Disabled",
  Enabled: "Enabled"
};
var ReplicationTimeStatus = {
  Disabled: "Disabled",
  Enabled: "Enabled"
};
var ReplicationStorageClass = {
  DEEP_ARCHIVE: "DEEP_ARCHIVE",
  GLACIER: "GLACIER",
  GLACIER_IR: "GLACIER_IR",
  INTELLIGENT_TIERING: "INTELLIGENT_TIERING",
  ONEZONE_IA: "ONEZONE_IA",
  OUTPOSTS: "OUTPOSTS",
  REDUCED_REDUNDANCY: "REDUCED_REDUNDANCY",
  STANDARD: "STANDARD",
  STANDARD_IA: "STANDARD_IA"
};
var ExistingObjectReplicationStatus = {
  Disabled: "Disabled",
  Enabled: "Enabled"
};
var ReplicaModificationsStatus = {
  Disabled: "Disabled",
  Enabled: "Enabled"
};
var SseKmsEncryptedObjectsStatus = {
  Disabled: "Disabled",
  Enabled: "Enabled"
};
var ReplicationRuleStatus = {
  Disabled: "Disabled",
  Enabled: "Enabled"
};
var MFADeleteStatus = {
  Disabled: "Disabled",
  Enabled: "Enabled"
};
var BucketVersioningStatus = {
  Enabled: "Enabled",
  Suspended: "Suspended"
};
var Privilege = {
  Default: "Default",
  Minimal: "Minimal"
};
var MultiRegionAccessPointStatus = {
  CREATING: "CREATING",
  DELETING: "DELETING",
  INCONSISTENT_ACROSS_REGIONS: "INCONSISTENT_ACROSS_REGIONS",
  PARTIALLY_CREATED: "PARTIALLY_CREATED",
  PARTIALLY_DELETED: "PARTIALLY_DELETED",
  READY: "READY"
};
var _NoSuchPublicAccessBlockConfiguration = class _NoSuchPublicAccessBlockConfiguration extends S3ControlServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "NoSuchPublicAccessBlockConfiguration",
      $fault: "client",
      ...opts
    });
    this.name = "NoSuchPublicAccessBlockConfiguration";
    this.$fault = "client";
    Object.setPrototypeOf(this, _NoSuchPublicAccessBlockConfiguration.prototype);
    this.Message = opts.Message;
  }
};
__name(_NoSuchPublicAccessBlockConfiguration, "NoSuchPublicAccessBlockConfiguration");
var NoSuchPublicAccessBlockConfiguration = _NoSuchPublicAccessBlockConfiguration;
var Format = {
  CSV: "CSV",
  Parquet: "Parquet"
};
var OutputSchemaVersion = {
  V_1: "V_1"
};
var _InvalidNextTokenException = class _InvalidNextTokenException extends S3ControlServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidNextTokenException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidNextTokenException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidNextTokenException.prototype);
    this.Message = opts.Message;
  }
};
__name(_InvalidNextTokenException, "InvalidNextTokenException");
var InvalidNextTokenException = _InvalidNextTokenException;
var _InvalidRequestException = class _InvalidRequestException extends S3ControlServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidRequestException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidRequestException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidRequestException.prototype);
    this.Message = opts.Message;
  }
};
__name(_InvalidRequestException, "InvalidRequestException");
var InvalidRequestException = _InvalidRequestException;
var OperationName = {
  LambdaInvoke: "LambdaInvoke",
  S3DeleteObjectTagging: "S3DeleteObjectTagging",
  S3InitiateRestoreObject: "S3InitiateRestoreObject",
  S3PutObjectAcl: "S3PutObjectAcl",
  S3PutObjectCopy: "S3PutObjectCopy",
  S3PutObjectLegalHold: "S3PutObjectLegalHold",
  S3PutObjectRetention: "S3PutObjectRetention",
  S3PutObjectTagging: "S3PutObjectTagging",
  S3ReplicateObject: "S3ReplicateObject"
};
var CredentialsFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.AccessKeyId && { AccessKeyId: import_smithy_client.SENSITIVE_STRING },
  ...obj.SecretAccessKey && { SecretAccessKey: import_smithy_client.SENSITIVE_STRING },
  ...obj.SessionToken && { SessionToken: import_smithy_client.SENSITIVE_STRING }
}), "CredentialsFilterSensitiveLog");
var GetDataAccessResultFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Credentials && { Credentials: import_smithy_client.SENSITIVE_STRING }
}), "GetDataAccessResultFilterSensitiveLog");

// src/models/models_1.ts
var MFADelete = {
  Disabled: "Disabled",
  Enabled: "Enabled"
};
var _TooManyTagsException = class _TooManyTagsException extends S3ControlServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TooManyTagsException",
      $fault: "client",
      ...opts
    });
    this.name = "TooManyTagsException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _TooManyTagsException.prototype);
    this.Message = opts.Message;
  }
};
__name(_TooManyTagsException, "TooManyTagsException");
var TooManyTagsException = _TooManyTagsException;
var _JobStatusException = class _JobStatusException extends S3ControlServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "JobStatusException",
      $fault: "client",
      ...opts
    });
    this.name = "JobStatusException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _JobStatusException.prototype);
    this.Message = opts.Message;
  }
};
__name(_JobStatusException, "JobStatusException");
var JobStatusException = _JobStatusException;
var RequestedJobStatus = {
  Cancelled: "Cancelled",
  Ready: "Ready"
};

// src/protocols/Aws_restXml.ts
var se_AssociateAccessGrantsIdentityCenterCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accessgrantsinstance/identitycenter");
  let body;
  body = _ve;
  const bn = new import_xml_builder.XmlNode(_AAGICR);
  bn.a("xmlns", "http://awss3control.amazonaws.com/doc/2018-08-20/");
  bn.cc(input, _ICA);
  body += bn.toString();
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_AssociateAccessGrantsIdentityCenterCommand");
var se_CreateAccessGrantCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accessgrantsinstance/grant");
  let body;
  body = _ve;
  const bn = new import_xml_builder.XmlNode(_CAGR);
  bn.a("xmlns", "http://awss3control.amazonaws.com/doc/2018-08-20/");
  if (input[_AGLC] != null) {
    bn.c(se_AccessGrantsLocationConfiguration(input[_AGLC], context).n(_AGLC));
  }
  bn.cc(input, _AGLI);
  if (input[_AA] != null) {
    bn.c(import_xml_builder.XmlNode.of(_ICAA, input[_AA]).n(_AA));
  }
  if (input[_G] != null) {
    bn.c(se_Grantee(input[_G], context).n(_G));
  }
  bn.cc(input, _P);
  bn.cc(input, _SPT);
  bn.lc(input, "Tags", "Tags", () => se_TagList(input[_T], context));
  body += bn.toString();
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateAccessGrantCommand");
var se_CreateAccessGrantsInstanceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accessgrantsinstance");
  let body;
  body = _ve;
  const bn = new import_xml_builder.XmlNode(_CAGIR);
  bn.a("xmlns", "http://awss3control.amazonaws.com/doc/2018-08-20/");
  bn.cc(input, _ICA);
  bn.lc(input, "Tags", "Tags", () => se_TagList(input[_T], context));
  body += bn.toString();
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateAccessGrantsInstanceCommand");
var se_CreateAccessGrantsLocationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accessgrantsinstance/location");
  let body;
  body = _ve;
  const bn = new import_xml_builder.XmlNode(_CAGLR);
  bn.a("xmlns", "http://awss3control.amazonaws.com/doc/2018-08-20/");
  bn.cc(input, _IAMRA);
  if (input[_LS] != null) {
    bn.c(import_xml_builder.XmlNode.of(_SP, input[_LS]).n(_LS));
  }
  bn.lc(input, "Tags", "Tags", () => se_TagList(input[_T], context));
  body += bn.toString();
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateAccessGrantsLocationCommand");
var se_CreateAccessPointCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accesspoint/{Name}");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  body = _ve;
  const bn = new import_xml_builder.XmlNode(_CAPR);
  bn.a("xmlns", "http://awss3control.amazonaws.com/doc/2018-08-20/");
  if (input[_B] != null) {
    bn.c(import_xml_builder.XmlNode.of(_BN, input[_B]).n(_B));
  }
  if (input[_BAI] != null) {
    bn.c(import_xml_builder.XmlNode.of(_AI, input[_BAI]).n(_BAI));
  }
  if (input[_PABC] != null) {
    bn.c(se_PublicAccessBlockConfiguration(input[_PABC], context).n(_PABC));
  }
  if (input[_VC] != null) {
    bn.c(se_VpcConfiguration(input[_VC], context).n(_VC));
  }
  body += bn.toString();
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_CreateAccessPointCommand");
var se_CreateAccessPointForObjectLambdaCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accesspointforobjectlambda/{Name}");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  body = _ve;
  const bn = new import_xml_builder.XmlNode(_CAPFOLR);
  bn.a("xmlns", "http://awss3control.amazonaws.com/doc/2018-08-20/");
  if (input[_C] != null) {
    bn.c(se_ObjectLambdaConfiguration(input[_C], context).n(_C));
  }
  body += bn.toString();
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_CreateAccessPointForObjectLambdaCommand");
var se_CreateBucketCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_xaa]: input[_ACL],
    [_xagfc]: input[_GFC],
    [_xagr]: input[_GR],
    [_xagra]: input[_GRACP],
    [_xagw]: input[_GW],
    [_xagwa]: input[_GWACP],
    [_xabole]: [() => isSerializableHeaderValue(input[_OLEFB]), () => input[_OLEFB].toString()],
    [_xaoi]: input[_OI]
  });
  b.bp("/v20180820/bucket/{Bucket}");
  b.p("Bucket", () => input.Bucket, "{Bucket}", false);
  let body;
  let contents;
  if (input.CreateBucketConfiguration !== void 0) {
    contents = se_CreateBucketConfiguration(input.CreateBucketConfiguration, context);
    body = _ve;
    contents.a("xmlns", "http://awss3control.amazonaws.com/doc/2018-08-20/");
    body += contents.toString();
  }
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_CreateBucketCommand");
var se_CreateJobCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/jobs");
  let body;
  body = _ve;
  const bn = new import_xml_builder.XmlNode(_CJR);
  bn.a("xmlns", "http://awss3control.amazonaws.com/doc/2018-08-20/");
  if (input[_CRT] === void 0) {
    input[_CRT] = (0, import_uuid.v4)();
  }
  if (input[_CRT] != null) {
    bn.c(import_xml_builder.XmlNode.of(_NEMLS, input[_CRT]).n(_CRT));
  }
  if (input[_CR] != null) {
    bn.c(import_xml_builder.XmlNode.of(_CR, String(input[_CR])).n(_CR));
  }
  if (input[_D] != null) {
    bn.c(import_xml_builder.XmlNode.of(_NEMLSo, input[_D]).n(_D));
  }
  if (input[_M] != null) {
    bn.c(se_JobManifest(input[_M], context).n(_M));
  }
  if (input[_MG] != null) {
    bn.c(se_JobManifestGenerator(input[_MG], context).n(_MG));
  }
  if (input[_O] != null) {
    bn.c(se_JobOperation(input[_O], context).n(_O));
  }
  if (input[_Pr] != null) {
    bn.c(import_xml_builder.XmlNode.of(_JP, String(input[_Pr])).n(_Pr));
  }
  if (input[_R] != null) {
    bn.c(se_JobReport(input[_R], context).n(_R));
  }
  if (input[_RA] != null) {
    bn.c(import_xml_builder.XmlNode.of(_IAMRA, input[_RA]).n(_RA));
  }
  bn.lc(input, "Tags", "Tags", () => se_S3TagSet(input[_T], context));
  body += bn.toString();
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateJobCommand");
var se_CreateMultiRegionAccessPointCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/async-requests/mrap/create");
  let body;
  body = _ve;
  const bn = new import_xml_builder.XmlNode(_CMRAPR);
  bn.a("xmlns", "http://awss3control.amazonaws.com/doc/2018-08-20/");
  if (input[_CT] === void 0) {
    input[_CT] = (0, import_uuid.v4)();
  }
  if (input[_CT] != null) {
    bn.c(import_xml_builder.XmlNode.of(_MRAPCT, input[_CT]).n(_CT));
  }
  if (input[_De] != null) {
    bn.c(se_CreateMultiRegionAccessPointInput(input[_De], context).n(_De));
  }
  body += bn.toString();
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateMultiRegionAccessPointCommand");
var se_CreateStorageLensGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/storagelensgroup");
  let body;
  body = _ve;
  const bn = new import_xml_builder.XmlNode(_CSLGR);
  bn.a("xmlns", "http://awss3control.amazonaws.com/doc/2018-08-20/");
  if (input[_SLG] != null) {
    bn.c(se_StorageLensGroup(input[_SLG], context).n(_SLG));
  }
  bn.lc(input, "Tags", "Tags", () => se_TagList(input[_T], context));
  body += bn.toString();
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateStorageLensGroupCommand");
var se_DeleteAccessGrantCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accessgrantsinstance/grant/{AccessGrantId}");
  b.p("AccessGrantId", () => input.AccessGrantId, "{AccessGrantId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteAccessGrantCommand");
var se_DeleteAccessGrantsInstanceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accessgrantsinstance");
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteAccessGrantsInstanceCommand");
var se_DeleteAccessGrantsInstanceResourcePolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accessgrantsinstance/resourcepolicy");
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteAccessGrantsInstanceResourcePolicyCommand");
var se_DeleteAccessGrantsLocationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accessgrantsinstance/location/{AccessGrantsLocationId}");
  b.p("AccessGrantsLocationId", () => input.AccessGrantsLocationId, "{AccessGrantsLocationId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteAccessGrantsLocationCommand");
var se_DeleteAccessPointCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accesspoint/{Name}");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteAccessPointCommand");
var se_DeleteAccessPointForObjectLambdaCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accesspointforobjectlambda/{Name}");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteAccessPointForObjectLambdaCommand");
var se_DeleteAccessPointPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accesspoint/{Name}/policy");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteAccessPointPolicyCommand");
var se_DeleteAccessPointPolicyForObjectLambdaCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accesspointforobjectlambda/{Name}/policy");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteAccessPointPolicyForObjectLambdaCommand");
var se_DeleteBucketCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/bucket/{Bucket}");
  b.p("Bucket", () => input.Bucket, "{Bucket}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteBucketCommand");
var se_DeleteBucketLifecycleConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/bucket/{Bucket}/lifecycleconfiguration");
  b.p("Bucket", () => input.Bucket, "{Bucket}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteBucketLifecycleConfigurationCommand");
var se_DeleteBucketPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/bucket/{Bucket}/policy");
  b.p("Bucket", () => input.Bucket, "{Bucket}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteBucketPolicyCommand");
var se_DeleteBucketReplicationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/bucket/{Bucket}/replication");
  b.p("Bucket", () => input.Bucket, "{Bucket}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteBucketReplicationCommand");
var se_DeleteBucketTaggingCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/bucket/{Bucket}/tagging");
  b.p("Bucket", () => input.Bucket, "{Bucket}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteBucketTaggingCommand");
var se_DeleteJobTaggingCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/jobs/{JobId}/tagging");
  b.p("JobId", () => input.JobId, "{JobId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteJobTaggingCommand");
var se_DeleteMultiRegionAccessPointCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/async-requests/mrap/delete");
  let body;
  body = _ve;
  const bn = new import_xml_builder.XmlNode(_DMRAPR);
  bn.a("xmlns", "http://awss3control.amazonaws.com/doc/2018-08-20/");
  if (input[_CT] === void 0) {
    input[_CT] = (0, import_uuid.v4)();
  }
  if (input[_CT] != null) {
    bn.c(import_xml_builder.XmlNode.of(_MRAPCT, input[_CT]).n(_CT));
  }
  if (input[_De] != null) {
    bn.c(se_DeleteMultiRegionAccessPointInput(input[_De], context).n(_De));
  }
  body += bn.toString();
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_DeleteMultiRegionAccessPointCommand");
var se_DeletePublicAccessBlockCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/configuration/publicAccessBlock");
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeletePublicAccessBlockCommand");
var se_DeleteStorageLensConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/storagelens/{ConfigId}");
  b.p("ConfigId", () => input.ConfigId, "{ConfigId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteStorageLensConfigurationCommand");
var se_DeleteStorageLensConfigurationTaggingCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/storagelens/{ConfigId}/tagging");
  b.p("ConfigId", () => input.ConfigId, "{ConfigId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteStorageLensConfigurationTaggingCommand");
var se_DeleteStorageLensGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/storagelensgroup/{Name}");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteStorageLensGroupCommand");
var se_DescribeJobCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/jobs/{JobId}");
  b.p("JobId", () => input.JobId, "{JobId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeJobCommand");
var se_DescribeMultiRegionAccessPointOperationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/async-requests/mrap/{RequestTokenARN+}");
  b.p("RequestTokenARN", () => input.RequestTokenARN, "{RequestTokenARN+}", true);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeMultiRegionAccessPointOperationCommand");
var se_DissociateAccessGrantsIdentityCenterCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accessgrantsinstance/identitycenter");
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DissociateAccessGrantsIdentityCenterCommand");
var se_GetAccessGrantCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accessgrantsinstance/grant/{AccessGrantId}");
  b.p("AccessGrantId", () => input.AccessGrantId, "{AccessGrantId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetAccessGrantCommand");
var se_GetAccessGrantsInstanceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accessgrantsinstance");
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetAccessGrantsInstanceCommand");
var se_GetAccessGrantsInstanceForPrefixCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accessgrantsinstance/prefix");
  const query = (0, import_smithy_client.map)({
    [_s]: [, (0, import_smithy_client.expectNonNull)(input[_SP], `S3Prefix`)]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetAccessGrantsInstanceForPrefixCommand");
var se_GetAccessGrantsInstanceResourcePolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accessgrantsinstance/resourcepolicy");
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetAccessGrantsInstanceResourcePolicyCommand");
var se_GetAccessGrantsLocationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accessgrantsinstance/location/{AccessGrantsLocationId}");
  b.p("AccessGrantsLocationId", () => input.AccessGrantsLocationId, "{AccessGrantsLocationId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetAccessGrantsLocationCommand");
var se_GetAccessPointCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accesspoint/{Name}");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetAccessPointCommand");
var se_GetAccessPointConfigurationForObjectLambdaCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accesspointforobjectlambda/{Name}/configuration");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetAccessPointConfigurationForObjectLambdaCommand");
var se_GetAccessPointForObjectLambdaCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accesspointforobjectlambda/{Name}");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetAccessPointForObjectLambdaCommand");
var se_GetAccessPointPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accesspoint/{Name}/policy");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetAccessPointPolicyCommand");
var se_GetAccessPointPolicyForObjectLambdaCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accesspointforobjectlambda/{Name}/policy");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetAccessPointPolicyForObjectLambdaCommand");
var se_GetAccessPointPolicyStatusCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accesspoint/{Name}/policyStatus");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetAccessPointPolicyStatusCommand");
var se_GetAccessPointPolicyStatusForObjectLambdaCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accesspointforobjectlambda/{Name}/policyStatus");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetAccessPointPolicyStatusForObjectLambdaCommand");
var se_GetBucketCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/bucket/{Bucket}");
  b.p("Bucket", () => input.Bucket, "{Bucket}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetBucketCommand");
var se_GetBucketLifecycleConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/bucket/{Bucket}/lifecycleconfiguration");
  b.p("Bucket", () => input.Bucket, "{Bucket}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetBucketLifecycleConfigurationCommand");
var se_GetBucketPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/bucket/{Bucket}/policy");
  b.p("Bucket", () => input.Bucket, "{Bucket}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetBucketPolicyCommand");
var se_GetBucketReplicationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/bucket/{Bucket}/replication");
  b.p("Bucket", () => input.Bucket, "{Bucket}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetBucketReplicationCommand");
var se_GetBucketTaggingCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/bucket/{Bucket}/tagging");
  b.p("Bucket", () => input.Bucket, "{Bucket}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetBucketTaggingCommand");
var se_GetBucketVersioningCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/bucket/{Bucket}/versioning");
  b.p("Bucket", () => input.Bucket, "{Bucket}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetBucketVersioningCommand");
var se_GetDataAccessCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accessgrantsinstance/dataaccess");
  const query = (0, import_smithy_client.map)({
    [_t]: [, (0, import_smithy_client.expectNonNull)(input[_Ta], `Target`)],
    [_p]: [, (0, import_smithy_client.expectNonNull)(input[_P], `Permission`)],
    [_dS]: [() => input.DurationSeconds !== void 0, () => input[_DS].toString()],
    [_pr]: [, input[_Pri]],
    [_tT]: [, input[_TT]]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetDataAccessCommand");
var se_GetJobTaggingCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/jobs/{JobId}/tagging");
  b.p("JobId", () => input.JobId, "{JobId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetJobTaggingCommand");
var se_GetMultiRegionAccessPointCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/mrap/instances/{Name+}");
  b.p("Name", () => input.Name, "{Name+}", true);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetMultiRegionAccessPointCommand");
var se_GetMultiRegionAccessPointPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/mrap/instances/{Name+}/policy");
  b.p("Name", () => input.Name, "{Name+}", true);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetMultiRegionAccessPointPolicyCommand");
var se_GetMultiRegionAccessPointPolicyStatusCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/mrap/instances/{Name+}/policystatus");
  b.p("Name", () => input.Name, "{Name+}", true);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetMultiRegionAccessPointPolicyStatusCommand");
var se_GetMultiRegionAccessPointRoutesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/mrap/instances/{Mrap+}/routes");
  b.p("Mrap", () => input.Mrap, "{Mrap+}", true);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetMultiRegionAccessPointRoutesCommand");
var se_GetPublicAccessBlockCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/configuration/publicAccessBlock");
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetPublicAccessBlockCommand");
var se_GetStorageLensConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/storagelens/{ConfigId}");
  b.p("ConfigId", () => input.ConfigId, "{ConfigId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetStorageLensConfigurationCommand");
var se_GetStorageLensConfigurationTaggingCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/storagelens/{ConfigId}/tagging");
  b.p("ConfigId", () => input.ConfigId, "{ConfigId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetStorageLensConfigurationTaggingCommand");
var se_GetStorageLensGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/storagelensgroup/{Name}");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetStorageLensGroupCommand");
var se_ListAccessGrantsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accessgrantsinstance/grants");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_NT]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_g]: [, input[_GT]],
    [_gr]: [, input[_GI]],
    [_p]: [, input[_P]],
    [_gra]: [, input[_GS]],
    [_aa]: [, input[_AA]]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListAccessGrantsCommand");
var se_ListAccessGrantsInstancesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accessgrantsinstances");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_NT]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListAccessGrantsInstancesCommand");
var se_ListAccessGrantsLocationsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accessgrantsinstance/locations");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_NT]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_l]: [, input[_LS]]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListAccessGrantsLocationsCommand");
var se_ListAccessPointsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accesspoint");
  const query = (0, import_smithy_client.map)({
    [_b]: [, input[_B]],
    [_nT]: [, input[_NT]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListAccessPointsCommand");
var se_ListAccessPointsForObjectLambdaCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accesspointforobjectlambda");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_NT]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListAccessPointsForObjectLambdaCommand");
var se_ListJobsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/jobs");
  const query = (0, import_smithy_client.map)({
    [_jS]: [() => input.JobStatuses !== void 0, () => (input[_JS] || []).map((_entry) => _entry)],
    [_nT]: [, input[_NT]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListJobsCommand");
var se_ListMultiRegionAccessPointsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/mrap/instances");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_NT]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListMultiRegionAccessPointsCommand");
var se_ListRegionalBucketsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI],
    [_xaoi]: input[_OI]
  });
  b.bp("/v20180820/bucket");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_NT]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListRegionalBucketsCommand");
var se_ListStorageLensConfigurationsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/storagelens");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_NT]]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListStorageLensConfigurationsCommand");
var se_ListStorageLensGroupsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/storagelensgroup");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_NT]]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListStorageLensGroupsCommand");
var se_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/tags/{ResourceArn+}");
  b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn+}", true);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_ListTagsForResourceCommand");
var se_PutAccessGrantsInstanceResourcePolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accessgrantsinstance/resourcepolicy");
  let body;
  body = _ve;
  const bn = new import_xml_builder.XmlNode(_PAGIRPR);
  bn.a("xmlns", "http://awss3control.amazonaws.com/doc/2018-08-20/");
  bn.cc(input, _Or);
  if (input[_Po] != null) {
    bn.c(import_xml_builder.XmlNode.of(_PD, input[_Po]).n(_Po));
  }
  body += bn.toString();
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_PutAccessGrantsInstanceResourcePolicyCommand");
var se_PutAccessPointConfigurationForObjectLambdaCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accesspointforobjectlambda/{Name}/configuration");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  body = _ve;
  const bn = new import_xml_builder.XmlNode(_PAPCFOLR);
  bn.a("xmlns", "http://awss3control.amazonaws.com/doc/2018-08-20/");
  if (input[_C] != null) {
    bn.c(se_ObjectLambdaConfiguration(input[_C], context).n(_C));
  }
  body += bn.toString();
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_PutAccessPointConfigurationForObjectLambdaCommand");
var se_PutAccessPointPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accesspoint/{Name}/policy");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  body = _ve;
  const bn = new import_xml_builder.XmlNode(_PAPPR);
  bn.a("xmlns", "http://awss3control.amazonaws.com/doc/2018-08-20/");
  bn.cc(input, _Po);
  body += bn.toString();
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_PutAccessPointPolicyCommand");
var se_PutAccessPointPolicyForObjectLambdaCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accesspointforobjectlambda/{Name}/policy");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  body = _ve;
  const bn = new import_xml_builder.XmlNode(_PAPPFOLR);
  bn.a("xmlns", "http://awss3control.amazonaws.com/doc/2018-08-20/");
  if (input[_Po] != null) {
    bn.c(import_xml_builder.XmlNode.of(_OLP, input[_Po]).n(_Po));
  }
  body += bn.toString();
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_PutAccessPointPolicyForObjectLambdaCommand");
var se_PutBucketLifecycleConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/bucket/{Bucket}/lifecycleconfiguration");
  b.p("Bucket", () => input.Bucket, "{Bucket}", false);
  let body;
  let contents;
  if (input.LifecycleConfiguration !== void 0) {
    contents = se_LifecycleConfiguration(input.LifecycleConfiguration, context);
    body = _ve;
    contents.a("xmlns", "http://awss3control.amazonaws.com/doc/2018-08-20/");
    body += contents.toString();
  }
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_PutBucketLifecycleConfigurationCommand");
var se_PutBucketPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_xaai]: input[_AI],
    [_xacrsba]: [() => isSerializableHeaderValue(input[_CRSBA]), () => input[_CRSBA].toString()]
  });
  b.bp("/v20180820/bucket/{Bucket}/policy");
  b.p("Bucket", () => input.Bucket, "{Bucket}", false);
  let body;
  body = _ve;
  const bn = new import_xml_builder.XmlNode(_PBPR);
  bn.a("xmlns", "http://awss3control.amazonaws.com/doc/2018-08-20/");
  bn.cc(input, _Po);
  body += bn.toString();
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_PutBucketPolicyCommand");
var se_PutBucketReplicationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/bucket/{Bucket}/replication");
  b.p("Bucket", () => input.Bucket, "{Bucket}", false);
  let body;
  let contents;
  if (input.ReplicationConfiguration !== void 0) {
    contents = se_ReplicationConfiguration(input.ReplicationConfiguration, context);
    body = _ve;
    contents.a("xmlns", "http://awss3control.amazonaws.com/doc/2018-08-20/");
    body += contents.toString();
  }
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_PutBucketReplicationCommand");
var se_PutBucketTaggingCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/bucket/{Bucket}/tagging");
  b.p("Bucket", () => input.Bucket, "{Bucket}", false);
  let body;
  let contents;
  if (input.Tagging !== void 0) {
    contents = se_Tagging(input.Tagging, context);
    body = _ve;
    contents.a("xmlns", "http://awss3control.amazonaws.com/doc/2018-08-20/");
    body += contents.toString();
  }
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_PutBucketTaggingCommand");
var se_PutBucketVersioningCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_xaai]: input[_AI],
    [_xam]: input[_MFA]
  });
  b.bp("/v20180820/bucket/{Bucket}/versioning");
  b.p("Bucket", () => input.Bucket, "{Bucket}", false);
  let body;
  let contents;
  if (input.VersioningConfiguration !== void 0) {
    contents = se_VersioningConfiguration(input.VersioningConfiguration, context);
    body = _ve;
    contents.a("xmlns", "http://awss3control.amazonaws.com/doc/2018-08-20/");
    body += contents.toString();
  }
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_PutBucketVersioningCommand");
var se_PutJobTaggingCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/jobs/{JobId}/tagging");
  b.p("JobId", () => input.JobId, "{JobId}", false);
  let body;
  body = _ve;
  const bn = new import_xml_builder.XmlNode(_PJTR);
  bn.a("xmlns", "http://awss3control.amazonaws.com/doc/2018-08-20/");
  bn.lc(input, "Tags", "Tags", () => se_S3TagSet(input[_T], context));
  body += bn.toString();
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_PutJobTaggingCommand");
var se_PutMultiRegionAccessPointPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/async-requests/mrap/put-policy");
  let body;
  body = _ve;
  const bn = new import_xml_builder.XmlNode(_PMRAPPR);
  bn.a("xmlns", "http://awss3control.amazonaws.com/doc/2018-08-20/");
  if (input[_CT] === void 0) {
    input[_CT] = (0, import_uuid.v4)();
  }
  if (input[_CT] != null) {
    bn.c(import_xml_builder.XmlNode.of(_MRAPCT, input[_CT]).n(_CT));
  }
  if (input[_De] != null) {
    bn.c(se_PutMultiRegionAccessPointPolicyInput(input[_De], context).n(_De));
  }
  body += bn.toString();
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_PutMultiRegionAccessPointPolicyCommand");
var se_PutPublicAccessBlockCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/configuration/publicAccessBlock");
  let body;
  let contents;
  if (input.PublicAccessBlockConfiguration !== void 0) {
    contents = se_PublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);
    body = _ve;
    contents.a("xmlns", "http://awss3control.amazonaws.com/doc/2018-08-20/");
    body += contents.toString();
  }
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_PutPublicAccessBlockCommand");
var se_PutStorageLensConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/storagelens/{ConfigId}");
  b.p("ConfigId", () => input.ConfigId, "{ConfigId}", false);
  let body;
  body = _ve;
  const bn = new import_xml_builder.XmlNode(_PSLCR);
  bn.a("xmlns", "http://awss3control.amazonaws.com/doc/2018-08-20/");
  if (input[_SLC] != null) {
    bn.c(se_StorageLensConfiguration(input[_SLC], context).n(_SLC));
  }
  bn.lc(input, "Tags", "Tags", () => se_StorageLensTags(input[_T], context));
  body += bn.toString();
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_PutStorageLensConfigurationCommand");
var se_PutStorageLensConfigurationTaggingCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/storagelens/{ConfigId}/tagging");
  b.p("ConfigId", () => input.ConfigId, "{ConfigId}", false);
  let body;
  body = _ve;
  const bn = new import_xml_builder.XmlNode(_PSLCTR);
  bn.a("xmlns", "http://awss3control.amazonaws.com/doc/2018-08-20/");
  bn.lc(input, "Tags", "Tags", () => se_StorageLensTags(input[_T], context));
  body += bn.toString();
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_PutStorageLensConfigurationTaggingCommand");
var se_SubmitMultiRegionAccessPointRoutesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/mrap/instances/{Mrap+}/routes");
  b.p("Mrap", () => input.Mrap, "{Mrap+}", true);
  let body;
  body = _ve;
  const bn = new import_xml_builder.XmlNode(_SMRAPRR);
  bn.a("xmlns", "http://awss3control.amazonaws.com/doc/2018-08-20/");
  bn.lc(input, "RouteUpdates", "RouteUpdates", () => se_RouteList(input[_RU], context));
  body += bn.toString();
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_SubmitMultiRegionAccessPointRoutesCommand");
var se_TagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/tags/{ResourceArn+}");
  b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn+}", true);
  let body;
  body = _ve;
  const bn = new import_xml_builder.XmlNode(_TRR);
  bn.a("xmlns", "http://awss3control.amazonaws.com/doc/2018-08-20/");
  bn.lc(input, "Tags", "Tags", () => se_TagList(input[_T], context));
  body += bn.toString();
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_TagResourceCommand");
var se_UntagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/tags/{ResourceArn+}");
  b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn+}", true);
  const query = (0, import_smithy_client.map)({
    [_tK]: [
      (0, import_smithy_client.expectNonNull)(input.TagKeys, `TagKeys`) != null,
      () => (input[_TK] || []).map((_entry) => _entry)
    ]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_UntagResourceCommand");
var se_UpdateAccessGrantsLocationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/accessgrantsinstance/location/{AccessGrantsLocationId}");
  b.p("AccessGrantsLocationId", () => input.AccessGrantsLocationId, "{AccessGrantsLocationId}", false);
  let body;
  body = _ve;
  const bn = new import_xml_builder.XmlNode(_UAGLR);
  bn.a("xmlns", "http://awss3control.amazonaws.com/doc/2018-08-20/");
  bn.cc(input, _IAMRA);
  body += bn.toString();
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateAccessGrantsLocationCommand");
var se_UpdateJobPriorityCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/jobs/{JobId}/priority");
  b.p("JobId", () => input.JobId, "{JobId}", false);
  const query = (0, import_smithy_client.map)({
    [_pri]: [(0, import_smithy_client.expectNonNull)(input.Priority, `Priority`) != null, () => input[_Pr].toString()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).q(query).b(body);
  return b.build();
}, "se_UpdateJobPriorityCommand");
var se_UpdateJobStatusCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/jobs/{JobId}/status");
  b.p("JobId", () => input.JobId, "{JobId}", false);
  const query = (0, import_smithy_client.map)({
    [_rJS]: [, (0, import_smithy_client.expectNonNull)(input[_RJS], `RequestedJobStatus`)],
    [_sUR]: [, input[_SUR]]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).q(query).b(body);
  return b.build();
}, "se_UpdateJobStatusCommand");
var se_UpdateStorageLensGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, isSerializableHeaderValue, {
    "content-type": "application/xml",
    [_xaai]: input[_AI]
  });
  b.bp("/v20180820/storagelensgroup/{Name}");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  body = _ve;
  const bn = new import_xml_builder.XmlNode(_USLGR);
  bn.a("xmlns", "http://awss3control.amazonaws.com/doc/2018-08-20/");
  if (input[_SLG] != null) {
    bn.c(se_StorageLensGroup(input[_SLG], context).n(_SLG));
  }
  body += bn.toString();
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "{AccountId}." + resolvedHostname;
    if (input.AccountId === void 0) {
      throw new Error("Empty value provided for input host prefix: AccountId.");
    }
    resolvedHostname = resolvedHostname.replace("{AccountId}", input.AccountId);
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateStorageLensGroupCommand");
var de_AssociateAccessGrantsIdentityCenterCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_AssociateAccessGrantsIdentityCenterCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_AssociateAccessGrantsIdentityCenterCommand");
var de_AssociateAccessGrantsIdentityCenterCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_AssociateAccessGrantsIdentityCenterCommandError");
var de_CreateAccessGrantCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateAccessGrantCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_AGA] != null) {
    contents[_AGA] = (0, import_smithy_client.expectString)(data[_AGA]);
  }
  if (data[_AGI] != null) {
    contents[_AGI] = (0, import_smithy_client.expectString)(data[_AGI]);
  }
  if (data[_AGLC] != null) {
    contents[_AGLC] = de_AccessGrantsLocationConfiguration(data[_AGLC], context);
  }
  if (data[_AGLI] != null) {
    contents[_AGLI] = (0, import_smithy_client.expectString)(data[_AGLI]);
  }
  if (data[_AA] != null) {
    contents[_AA] = (0, import_smithy_client.expectString)(data[_AA]);
  }
  if (data[_CA] != null) {
    contents[_CA] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(data[_CA]));
  }
  if (data[_GS] != null) {
    contents[_GS] = (0, import_smithy_client.expectString)(data[_GS]);
  }
  if (data[_G] != null) {
    contents[_G] = de_Grantee(data[_G], context);
  }
  if (data[_P] != null) {
    contents[_P] = (0, import_smithy_client.expectString)(data[_P]);
  }
  return contents;
}, "de_CreateAccessGrantCommand");
var de_CreateAccessGrantCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_CreateAccessGrantCommandError");
var de_CreateAccessGrantsInstanceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateAccessGrantsInstanceCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_AGIA] != null) {
    contents[_AGIA] = (0, import_smithy_client.expectString)(data[_AGIA]);
  }
  if (data[_AGII] != null) {
    contents[_AGII] = (0, import_smithy_client.expectString)(data[_AGII]);
  }
  if (data[_CA] != null) {
    contents[_CA] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(data[_CA]));
  }
  if (data[_ICA] != null) {
    contents[_ICA] = (0, import_smithy_client.expectString)(data[_ICA]);
  }
  return contents;
}, "de_CreateAccessGrantsInstanceCommand");
var de_CreateAccessGrantsInstanceCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_CreateAccessGrantsInstanceCommandError");
var de_CreateAccessGrantsLocationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateAccessGrantsLocationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_AGLA] != null) {
    contents[_AGLA] = (0, import_smithy_client.expectString)(data[_AGLA]);
  }
  if (data[_AGLI] != null) {
    contents[_AGLI] = (0, import_smithy_client.expectString)(data[_AGLI]);
  }
  if (data[_CA] != null) {
    contents[_CA] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(data[_CA]));
  }
  if (data[_IAMRA] != null) {
    contents[_IAMRA] = (0, import_smithy_client.expectString)(data[_IAMRA]);
  }
  if (data[_LS] != null) {
    contents[_LS] = (0, import_smithy_client.expectString)(data[_LS]);
  }
  return contents;
}, "de_CreateAccessGrantsLocationCommand");
var de_CreateAccessGrantsLocationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_CreateAccessGrantsLocationCommandError");
var de_CreateAccessPointCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateAccessPointCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_APA] != null) {
    contents[_APA] = (0, import_smithy_client.expectString)(data[_APA]);
  }
  if (data[_A] != null) {
    contents[_A] = (0, import_smithy_client.expectString)(data[_A]);
  }
  return contents;
}, "de_CreateAccessPointCommand");
var de_CreateAccessPointCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_CreateAccessPointCommandError");
var de_CreateAccessPointForObjectLambdaCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateAccessPointForObjectLambdaCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_A] != null) {
    contents[_A] = de_ObjectLambdaAccessPointAlias(data[_A], context);
  }
  if (data[_OLAPA] != null) {
    contents[_OLAPA] = (0, import_smithy_client.expectString)(data[_OLAPA]);
  }
  return contents;
}, "de_CreateAccessPointForObjectLambdaCommand");
var de_CreateAccessPointForObjectLambdaCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_CreateAccessPointForObjectLambdaCommandError");
var de_CreateBucketCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateBucketCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output),
    [_L]: [, output.headers[_lo]]
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_BA] != null) {
    contents[_BA] = (0, import_smithy_client.expectString)(data[_BA]);
  }
  return contents;
}, "de_CreateBucketCommand");
var de_CreateBucketCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "BucketAlreadyExists":
    case "com.amazonaws.s3control#BucketAlreadyExists":
      throw await de_BucketAlreadyExistsRes(parsedOutput, context);
    case "BucketAlreadyOwnedByYou":
    case "com.amazonaws.s3control#BucketAlreadyOwnedByYou":
      throw await de_BucketAlreadyOwnedByYouRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
  }
}, "de_CreateBucketCommandError");
var de_CreateJobCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateJobCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_JI] != null) {
    contents[_JI] = (0, import_smithy_client.expectString)(data[_JI]);
  }
  return contents;
}, "de_CreateJobCommand");
var de_CreateJobCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "BadRequestException":
    case "com.amazonaws.s3control#BadRequestException":
      throw await de_BadRequestExceptionRes(parsedOutput, context);
    case "IdempotencyException":
    case "com.amazonaws.s3control#IdempotencyException":
      throw await de_IdempotencyExceptionRes(parsedOutput, context);
    case "InternalServiceException":
    case "com.amazonaws.s3control#InternalServiceException":
      throw await de_InternalServiceExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.s3control#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
  }
}, "de_CreateJobCommandError");
var de_CreateMultiRegionAccessPointCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateMultiRegionAccessPointCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_RTARN] != null) {
    contents[_RTARN] = (0, import_smithy_client.expectString)(data[_RTARN]);
  }
  return contents;
}, "de_CreateMultiRegionAccessPointCommand");
var de_CreateMultiRegionAccessPointCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_CreateMultiRegionAccessPointCommandError");
var de_CreateStorageLensGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CreateStorageLensGroupCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_CreateStorageLensGroupCommand");
var de_CreateStorageLensGroupCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_CreateStorageLensGroupCommandError");
var de_DeleteAccessGrantCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteAccessGrantCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteAccessGrantCommand");
var de_DeleteAccessGrantCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_DeleteAccessGrantCommandError");
var de_DeleteAccessGrantsInstanceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteAccessGrantsInstanceCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteAccessGrantsInstanceCommand");
var de_DeleteAccessGrantsInstanceCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_DeleteAccessGrantsInstanceCommandError");
var de_DeleteAccessGrantsInstanceResourcePolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteAccessGrantsInstanceResourcePolicyCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteAccessGrantsInstanceResourcePolicyCommand");
var de_DeleteAccessGrantsInstanceResourcePolicyCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_DeleteAccessGrantsInstanceResourcePolicyCommandError");
var de_DeleteAccessGrantsLocationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteAccessGrantsLocationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteAccessGrantsLocationCommand");
var de_DeleteAccessGrantsLocationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_DeleteAccessGrantsLocationCommandError");
var de_DeleteAccessPointCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteAccessPointCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteAccessPointCommand");
var de_DeleteAccessPointCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_DeleteAccessPointCommandError");
var de_DeleteAccessPointForObjectLambdaCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteAccessPointForObjectLambdaCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteAccessPointForObjectLambdaCommand");
var de_DeleteAccessPointForObjectLambdaCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_DeleteAccessPointForObjectLambdaCommandError");
var de_DeleteAccessPointPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteAccessPointPolicyCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteAccessPointPolicyCommand");
var de_DeleteAccessPointPolicyCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_DeleteAccessPointPolicyCommandError");
var de_DeleteAccessPointPolicyForObjectLambdaCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteAccessPointPolicyForObjectLambdaCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteAccessPointPolicyForObjectLambdaCommand");
var de_DeleteAccessPointPolicyForObjectLambdaCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_DeleteAccessPointPolicyForObjectLambdaCommandError");
var de_DeleteBucketCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteBucketCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteBucketCommand");
var de_DeleteBucketCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_DeleteBucketCommandError");
var de_DeleteBucketLifecycleConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteBucketLifecycleConfigurationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteBucketLifecycleConfigurationCommand");
var de_DeleteBucketLifecycleConfigurationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_DeleteBucketLifecycleConfigurationCommandError");
var de_DeleteBucketPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteBucketPolicyCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteBucketPolicyCommand");
var de_DeleteBucketPolicyCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_DeleteBucketPolicyCommandError");
var de_DeleteBucketReplicationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteBucketReplicationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteBucketReplicationCommand");
var de_DeleteBucketReplicationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_DeleteBucketReplicationCommandError");
var de_DeleteBucketTaggingCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_DeleteBucketTaggingCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteBucketTaggingCommand");
var de_DeleteBucketTaggingCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_DeleteBucketTaggingCommandError");
var de_DeleteJobTaggingCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteJobTaggingCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteJobTaggingCommand");
var de_DeleteJobTaggingCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalServiceException":
    case "com.amazonaws.s3control#InternalServiceException":
      throw await de_InternalServiceExceptionRes(parsedOutput, context);
    case "NotFoundException":
    case "com.amazonaws.s3control#NotFoundException":
      throw await de_NotFoundExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.s3control#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
  }
}, "de_DeleteJobTaggingCommandError");
var de_DeleteMultiRegionAccessPointCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteMultiRegionAccessPointCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_RTARN] != null) {
    contents[_RTARN] = (0, import_smithy_client.expectString)(data[_RTARN]);
  }
  return contents;
}, "de_DeleteMultiRegionAccessPointCommand");
var de_DeleteMultiRegionAccessPointCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_DeleteMultiRegionAccessPointCommandError");
var de_DeletePublicAccessBlockCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeletePublicAccessBlockCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeletePublicAccessBlockCommand");
var de_DeletePublicAccessBlockCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_DeletePublicAccessBlockCommandError");
var de_DeleteStorageLensConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteStorageLensConfigurationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteStorageLensConfigurationCommand");
var de_DeleteStorageLensConfigurationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_DeleteStorageLensConfigurationCommandError");
var de_DeleteStorageLensConfigurationTaggingCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteStorageLensConfigurationTaggingCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteStorageLensConfigurationTaggingCommand");
var de_DeleteStorageLensConfigurationTaggingCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_DeleteStorageLensConfigurationTaggingCommandError");
var de_DeleteStorageLensGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_DeleteStorageLensGroupCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteStorageLensGroupCommand");
var de_DeleteStorageLensGroupCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_DeleteStorageLensGroupCommandError");
var de_DescribeJobCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeJobCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_J] != null) {
    contents[_J] = de_JobDescriptor(data[_J], context);
  }
  return contents;
}, "de_DescribeJobCommand");
var de_DescribeJobCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "BadRequestException":
    case "com.amazonaws.s3control#BadRequestException":
      throw await de_BadRequestExceptionRes(parsedOutput, context);
    case "InternalServiceException":
    case "com.amazonaws.s3control#InternalServiceException":
      throw await de_InternalServiceExceptionRes(parsedOutput, context);
    case "NotFoundException":
    case "com.amazonaws.s3control#NotFoundException":
      throw await de_NotFoundExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.s3control#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
  }
}, "de_DescribeJobCommandError");
var de_DescribeMultiRegionAccessPointOperationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeMultiRegionAccessPointOperationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_AO] != null) {
    contents[_AO] = de_AsyncOperation(data[_AO], context);
  }
  return contents;
}, "de_DescribeMultiRegionAccessPointOperationCommand");
var de_DescribeMultiRegionAccessPointOperationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_DescribeMultiRegionAccessPointOperationCommandError");
var de_DissociateAccessGrantsIdentityCenterCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DissociateAccessGrantsIdentityCenterCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DissociateAccessGrantsIdentityCenterCommand");
var de_DissociateAccessGrantsIdentityCenterCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_DissociateAccessGrantsIdentityCenterCommandError");
var de_GetAccessGrantCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetAccessGrantCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_AGA] != null) {
    contents[_AGA] = (0, import_smithy_client.expectString)(data[_AGA]);
  }
  if (data[_AGI] != null) {
    contents[_AGI] = (0, import_smithy_client.expectString)(data[_AGI]);
  }
  if (data[_AGLC] != null) {
    contents[_AGLC] = de_AccessGrantsLocationConfiguration(data[_AGLC], context);
  }
  if (data[_AGLI] != null) {
    contents[_AGLI] = (0, import_smithy_client.expectString)(data[_AGLI]);
  }
  if (data[_AA] != null) {
    contents[_AA] = (0, import_smithy_client.expectString)(data[_AA]);
  }
  if (data[_CA] != null) {
    contents[_CA] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(data[_CA]));
  }
  if (data[_GS] != null) {
    contents[_GS] = (0, import_smithy_client.expectString)(data[_GS]);
  }
  if (data[_G] != null) {
    contents[_G] = de_Grantee(data[_G], context);
  }
  if (data[_P] != null) {
    contents[_P] = (0, import_smithy_client.expectString)(data[_P]);
  }
  return contents;
}, "de_GetAccessGrantCommand");
var de_GetAccessGrantCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_GetAccessGrantCommandError");
var de_GetAccessGrantsInstanceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetAccessGrantsInstanceCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_AGIA] != null) {
    contents[_AGIA] = (0, import_smithy_client.expectString)(data[_AGIA]);
  }
  if (data[_AGII] != null) {
    contents[_AGII] = (0, import_smithy_client.expectString)(data[_AGII]);
  }
  if (data[_CA] != null) {
    contents[_CA] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(data[_CA]));
  }
  if (data[_ICA] != null) {
    contents[_ICA] = (0, import_smithy_client.expectString)(data[_ICA]);
  }
  return contents;
}, "de_GetAccessGrantsInstanceCommand");
var de_GetAccessGrantsInstanceCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_GetAccessGrantsInstanceCommandError");
var de_GetAccessGrantsInstanceForPrefixCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetAccessGrantsInstanceForPrefixCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_AGIA] != null) {
    contents[_AGIA] = (0, import_smithy_client.expectString)(data[_AGIA]);
  }
  if (data[_AGII] != null) {
    contents[_AGII] = (0, import_smithy_client.expectString)(data[_AGII]);
  }
  return contents;
}, "de_GetAccessGrantsInstanceForPrefixCommand");
var de_GetAccessGrantsInstanceForPrefixCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_GetAccessGrantsInstanceForPrefixCommandError");
var de_GetAccessGrantsInstanceResourcePolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetAccessGrantsInstanceResourcePolicyCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_CA] != null) {
    contents[_CA] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(data[_CA]));
  }
  if (data[_Or] != null) {
    contents[_Or] = (0, import_smithy_client.expectString)(data[_Or]);
  }
  if (data[_Po] != null) {
    contents[_Po] = (0, import_smithy_client.expectString)(data[_Po]);
  }
  return contents;
}, "de_GetAccessGrantsInstanceResourcePolicyCommand");
var de_GetAccessGrantsInstanceResourcePolicyCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_GetAccessGrantsInstanceResourcePolicyCommandError");
var de_GetAccessGrantsLocationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetAccessGrantsLocationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_AGLA] != null) {
    contents[_AGLA] = (0, import_smithy_client.expectString)(data[_AGLA]);
  }
  if (data[_AGLI] != null) {
    contents[_AGLI] = (0, import_smithy_client.expectString)(data[_AGLI]);
  }
  if (data[_CA] != null) {
    contents[_CA] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(data[_CA]));
  }
  if (data[_IAMRA] != null) {
    contents[_IAMRA] = (0, import_smithy_client.expectString)(data[_IAMRA]);
  }
  if (data[_LS] != null) {
    contents[_LS] = (0, import_smithy_client.expectString)(data[_LS]);
  }
  return contents;
}, "de_GetAccessGrantsLocationCommand");
var de_GetAccessGrantsLocationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_GetAccessGrantsLocationCommandError");
var de_GetAccessPointCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetAccessPointCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_APA] != null) {
    contents[_APA] = (0, import_smithy_client.expectString)(data[_APA]);
  }
  if (data[_A] != null) {
    contents[_A] = (0, import_smithy_client.expectString)(data[_A]);
  }
  if (data[_B] != null) {
    contents[_B] = (0, import_smithy_client.expectString)(data[_B]);
  }
  if (data[_BAI] != null) {
    contents[_BAI] = (0, import_smithy_client.expectString)(data[_BAI]);
  }
  if (data[_CD] != null) {
    contents[_CD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(data[_CD]));
  }
  if (data.Endpoints === "") {
    contents[_E] = {};
  } else if (data[_E] != null && data[_E][_e] != null) {
    contents[_E] = de_Endpoints((0, import_smithy_client.getArrayIfSingleItem)(data[_E][_e]), context);
  }
  if (data[_N] != null) {
    contents[_N] = (0, import_smithy_client.expectString)(data[_N]);
  }
  if (data[_NO] != null) {
    contents[_NO] = (0, import_smithy_client.expectString)(data[_NO]);
  }
  if (data[_PABC] != null) {
    contents[_PABC] = de_PublicAccessBlockConfiguration(data[_PABC], context);
  }
  if (data[_VC] != null) {
    contents[_VC] = de_VpcConfiguration(data[_VC], context);
  }
  return contents;
}, "de_GetAccessPointCommand");
var de_GetAccessPointCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_GetAccessPointCommandError");
var de_GetAccessPointConfigurationForObjectLambdaCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetAccessPointConfigurationForObjectLambdaCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_C] != null) {
    contents[_C] = de_ObjectLambdaConfiguration(data[_C], context);
  }
  return contents;
}, "de_GetAccessPointConfigurationForObjectLambdaCommand");
var de_GetAccessPointConfigurationForObjectLambdaCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_GetAccessPointConfigurationForObjectLambdaCommandError");
var de_GetAccessPointForObjectLambdaCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetAccessPointForObjectLambdaCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_A] != null) {
    contents[_A] = de_ObjectLambdaAccessPointAlias(data[_A], context);
  }
  if (data[_CD] != null) {
    contents[_CD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(data[_CD]));
  }
  if (data[_N] != null) {
    contents[_N] = (0, import_smithy_client.expectString)(data[_N]);
  }
  if (data[_PABC] != null) {
    contents[_PABC] = de_PublicAccessBlockConfiguration(data[_PABC], context);
  }
  return contents;
}, "de_GetAccessPointForObjectLambdaCommand");
var de_GetAccessPointForObjectLambdaCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_GetAccessPointForObjectLambdaCommandError");
var de_GetAccessPointPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetAccessPointPolicyCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_Po] != null) {
    contents[_Po] = (0, import_smithy_client.expectString)(data[_Po]);
  }
  return contents;
}, "de_GetAccessPointPolicyCommand");
var de_GetAccessPointPolicyCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_GetAccessPointPolicyCommandError");
var de_GetAccessPointPolicyForObjectLambdaCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetAccessPointPolicyForObjectLambdaCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_Po] != null) {
    contents[_Po] = (0, import_smithy_client.expectString)(data[_Po]);
  }
  return contents;
}, "de_GetAccessPointPolicyForObjectLambdaCommand");
var de_GetAccessPointPolicyForObjectLambdaCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_GetAccessPointPolicyForObjectLambdaCommandError");
var de_GetAccessPointPolicyStatusCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetAccessPointPolicyStatusCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_PS] != null) {
    contents[_PS] = de_PolicyStatus(data[_PS], context);
  }
  return contents;
}, "de_GetAccessPointPolicyStatusCommand");
var de_GetAccessPointPolicyStatusCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_GetAccessPointPolicyStatusCommandError");
var de_GetAccessPointPolicyStatusForObjectLambdaCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetAccessPointPolicyStatusForObjectLambdaCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_PS] != null) {
    contents[_PS] = de_PolicyStatus(data[_PS], context);
  }
  return contents;
}, "de_GetAccessPointPolicyStatusForObjectLambdaCommand");
var de_GetAccessPointPolicyStatusForObjectLambdaCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_GetAccessPointPolicyStatusForObjectLambdaCommandError");
var de_GetBucketCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetBucketCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_B] != null) {
    contents[_B] = (0, import_smithy_client.expectString)(data[_B]);
  }
  if (data[_CD] != null) {
    contents[_CD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(data[_CD]));
  }
  if (data[_PABE] != null) {
    contents[_PABE] = (0, import_smithy_client.parseBoolean)(data[_PABE]);
  }
  return contents;
}, "de_GetBucketCommand");
var de_GetBucketCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_GetBucketCommandError");
var de_GetBucketLifecycleConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetBucketLifecycleConfigurationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data.Rules === "") {
    contents[_Ru] = [];
  } else if (data[_Ru] != null && data[_Ru][_Rul] != null) {
    contents[_Ru] = de_LifecycleRules((0, import_smithy_client.getArrayIfSingleItem)(data[_Ru][_Rul]), context);
  }
  return contents;
}, "de_GetBucketLifecycleConfigurationCommand");
var de_GetBucketLifecycleConfigurationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_GetBucketLifecycleConfigurationCommandError");
var de_GetBucketPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetBucketPolicyCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_Po] != null) {
    contents[_Po] = (0, import_smithy_client.expectString)(data[_Po]);
  }
  return contents;
}, "de_GetBucketPolicyCommand");
var de_GetBucketPolicyCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_GetBucketPolicyCommandError");
var de_GetBucketReplicationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetBucketReplicationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_RC] != null) {
    contents[_RC] = de_ReplicationConfiguration(data[_RC], context);
  }
  return contents;
}, "de_GetBucketReplicationCommand");
var de_GetBucketReplicationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_GetBucketReplicationCommandError");
var de_GetBucketTaggingCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetBucketTaggingCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data.TagSet === "") {
    contents[_TS] = [];
  } else if (data[_TS] != null && data[_TS][_m] != null) {
    contents[_TS] = de_S3TagSet((0, import_smithy_client.getArrayIfSingleItem)(data[_TS][_m]), context);
  }
  return contents;
}, "de_GetBucketTaggingCommand");
var de_GetBucketTaggingCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_GetBucketTaggingCommandError");
var de_GetBucketVersioningCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetBucketVersioningCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_MD] != null) {
    contents[_MFAD] = (0, import_smithy_client.expectString)(data[_MD]);
  }
  if (data[_S] != null) {
    contents[_S] = (0, import_smithy_client.expectString)(data[_S]);
  }
  return contents;
}, "de_GetBucketVersioningCommand");
var de_GetBucketVersioningCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_GetBucketVersioningCommandError");
var de_GetDataAccessCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetDataAccessCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_Cr] != null) {
    contents[_Cr] = de_Credentials(data[_Cr], context);
  }
  if (data[_MGT] != null) {
    contents[_MGT] = (0, import_smithy_client.expectString)(data[_MGT]);
  }
  return contents;
}, "de_GetDataAccessCommand");
var de_GetDataAccessCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_GetDataAccessCommandError");
var de_GetJobTaggingCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetJobTaggingCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data.Tags === "") {
    contents[_T] = [];
  } else if (data[_T] != null && data[_T][_m] != null) {
    contents[_T] = de_S3TagSet((0, import_smithy_client.getArrayIfSingleItem)(data[_T][_m]), context);
  }
  return contents;
}, "de_GetJobTaggingCommand");
var de_GetJobTaggingCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalServiceException":
    case "com.amazonaws.s3control#InternalServiceException":
      throw await de_InternalServiceExceptionRes(parsedOutput, context);
    case "NotFoundException":
    case "com.amazonaws.s3control#NotFoundException":
      throw await de_NotFoundExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.s3control#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
  }
}, "de_GetJobTaggingCommandError");
var de_GetMultiRegionAccessPointCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetMultiRegionAccessPointCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_AP] != null) {
    contents[_AP] = de_MultiRegionAccessPointReport(data[_AP], context);
  }
  return contents;
}, "de_GetMultiRegionAccessPointCommand");
var de_GetMultiRegionAccessPointCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_GetMultiRegionAccessPointCommandError");
var de_GetMultiRegionAccessPointPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetMultiRegionAccessPointPolicyCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_Po] != null) {
    contents[_Po] = de_MultiRegionAccessPointPolicyDocument(data[_Po], context);
  }
  return contents;
}, "de_GetMultiRegionAccessPointPolicyCommand");
var de_GetMultiRegionAccessPointPolicyCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_GetMultiRegionAccessPointPolicyCommandError");
var de_GetMultiRegionAccessPointPolicyStatusCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetMultiRegionAccessPointPolicyStatusCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_Es] != null) {
    contents[_Es] = de_PolicyStatus(data[_Es], context);
  }
  return contents;
}, "de_GetMultiRegionAccessPointPolicyStatusCommand");
var de_GetMultiRegionAccessPointPolicyStatusCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_GetMultiRegionAccessPointPolicyStatusCommandError");
var de_GetMultiRegionAccessPointRoutesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetMultiRegionAccessPointRoutesCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_Mr] != null) {
    contents[_Mr] = (0, import_smithy_client.expectString)(data[_Mr]);
  }
  if (data.Routes === "") {
    contents[_Ro] = [];
  } else if (data[_Ro] != null && data[_Ro][_Rou] != null) {
    contents[_Ro] = de_RouteList((0, import_smithy_client.getArrayIfSingleItem)(data[_Ro][_Rou]), context);
  }
  return contents;
}, "de_GetMultiRegionAccessPointRoutesCommand");
var de_GetMultiRegionAccessPointRoutesCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_GetMultiRegionAccessPointRoutesCommandError");
var de_GetPublicAccessBlockCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetPublicAccessBlockCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectObject)(await parseBody(output.body, context));
  contents.PublicAccessBlockConfiguration = de_PublicAccessBlockConfiguration(data, context);
  return contents;
}, "de_GetPublicAccessBlockCommand");
var de_GetPublicAccessBlockCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "NoSuchPublicAccessBlockConfiguration":
    case "com.amazonaws.s3control#NoSuchPublicAccessBlockConfiguration":
      throw await de_NoSuchPublicAccessBlockConfigurationRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
  }
}, "de_GetPublicAccessBlockCommandError");
var de_GetStorageLensConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetStorageLensConfigurationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectObject)(await parseBody(output.body, context));
  contents.StorageLensConfiguration = de_StorageLensConfiguration(data, context);
  return contents;
}, "de_GetStorageLensConfigurationCommand");
var de_GetStorageLensConfigurationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_GetStorageLensConfigurationCommandError");
var de_GetStorageLensConfigurationTaggingCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetStorageLensConfigurationTaggingCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data.Tags === "") {
    contents[_T] = [];
  } else if (data[_T] != null && data[_T][_Tag] != null) {
    contents[_T] = de_StorageLensTags((0, import_smithy_client.getArrayIfSingleItem)(data[_T][_Tag]), context);
  }
  return contents;
}, "de_GetStorageLensConfigurationTaggingCommand");
var de_GetStorageLensConfigurationTaggingCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_GetStorageLensConfigurationTaggingCommandError");
var de_GetStorageLensGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetStorageLensGroupCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectObject)(await parseBody(output.body, context));
  contents.StorageLensGroup = de_StorageLensGroup(data, context);
  return contents;
}, "de_GetStorageLensGroupCommand");
var de_GetStorageLensGroupCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_GetStorageLensGroupCommandError");
var de_ListAccessGrantsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListAccessGrantsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data.AccessGrantsList === "") {
    contents[_AGL] = [];
  } else if (data[_AGL] != null && data[_AGL][_AG] != null) {
    contents[_AGL] = de_AccessGrantsList((0, import_smithy_client.getArrayIfSingleItem)(data[_AGL][_AG]), context);
  }
  if (data[_NT] != null) {
    contents[_NT] = (0, import_smithy_client.expectString)(data[_NT]);
  }
  return contents;
}, "de_ListAccessGrantsCommand");
var de_ListAccessGrantsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_ListAccessGrantsCommandError");
var de_ListAccessGrantsInstancesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListAccessGrantsInstancesCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data.AccessGrantsInstancesList === "") {
    contents[_AGIL] = [];
  } else if (data[_AGIL] != null && data[_AGIL][_AGIc] != null) {
    contents[_AGIL] = de_AccessGrantsInstancesList((0, import_smithy_client.getArrayIfSingleItem)(data[_AGIL][_AGIc]), context);
  }
  if (data[_NT] != null) {
    contents[_NT] = (0, import_smithy_client.expectString)(data[_NT]);
  }
  return contents;
}, "de_ListAccessGrantsInstancesCommand");
var de_ListAccessGrantsInstancesCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_ListAccessGrantsInstancesCommandError");
var de_ListAccessGrantsLocationsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListAccessGrantsLocationsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data.AccessGrantsLocationsList === "") {
    contents[_AGLL] = [];
  } else if (data[_AGLL] != null && data[_AGLL][_AGLc] != null) {
    contents[_AGLL] = de_AccessGrantsLocationsList((0, import_smithy_client.getArrayIfSingleItem)(data[_AGLL][_AGLc]), context);
  }
  if (data[_NT] != null) {
    contents[_NT] = (0, import_smithy_client.expectString)(data[_NT]);
  }
  return contents;
}, "de_ListAccessGrantsLocationsCommand");
var de_ListAccessGrantsLocationsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_ListAccessGrantsLocationsCommandError");
var de_ListAccessPointsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListAccessPointsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data.AccessPointList === "") {
    contents[_APL] = [];
  } else if (data[_APL] != null && data[_APL][_AP] != null) {
    contents[_APL] = de_AccessPointList((0, import_smithy_client.getArrayIfSingleItem)(data[_APL][_AP]), context);
  }
  if (data[_NT] != null) {
    contents[_NT] = (0, import_smithy_client.expectString)(data[_NT]);
  }
  return contents;
}, "de_ListAccessPointsCommand");
var de_ListAccessPointsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_ListAccessPointsCommandError");
var de_ListAccessPointsForObjectLambdaCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListAccessPointsForObjectLambdaCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_NT] != null) {
    contents[_NT] = (0, import_smithy_client.expectString)(data[_NT]);
  }
  if (data.ObjectLambdaAccessPointList === "") {
    contents[_OLAPL] = [];
  } else if (data[_OLAPL] != null && data[_OLAPL][_OLAP] != null) {
    contents[_OLAPL] = de_ObjectLambdaAccessPointList((0, import_smithy_client.getArrayIfSingleItem)(data[_OLAPL][_OLAP]), context);
  }
  return contents;
}, "de_ListAccessPointsForObjectLambdaCommand");
var de_ListAccessPointsForObjectLambdaCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_ListAccessPointsForObjectLambdaCommandError");
var de_ListJobsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListJobsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data.Jobs === "") {
    contents[_Jo] = [];
  } else if (data[_Jo] != null && data[_Jo][_m] != null) {
    contents[_Jo] = de_JobListDescriptorList((0, import_smithy_client.getArrayIfSingleItem)(data[_Jo][_m]), context);
  }
  if (data[_NT] != null) {
    contents[_NT] = (0, import_smithy_client.expectString)(data[_NT]);
  }
  return contents;
}, "de_ListJobsCommand");
var de_ListJobsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalServiceException":
    case "com.amazonaws.s3control#InternalServiceException":
      throw await de_InternalServiceExceptionRes(parsedOutput, context);
    case "InvalidNextTokenException":
    case "com.amazonaws.s3control#InvalidNextTokenException":
      throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.s3control#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
  }
}, "de_ListJobsCommandError");
var de_ListMultiRegionAccessPointsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListMultiRegionAccessPointsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data.AccessPoints === "") {
    contents[_APc] = [];
  } else if (data[_APc] != null && data[_APc][_AP] != null) {
    contents[_APc] = de_MultiRegionAccessPointReportList((0, import_smithy_client.getArrayIfSingleItem)(data[_APc][_AP]), context);
  }
  if (data[_NT] != null) {
    contents[_NT] = (0, import_smithy_client.expectString)(data[_NT]);
  }
  return contents;
}, "de_ListMultiRegionAccessPointsCommand");
var de_ListMultiRegionAccessPointsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_ListMultiRegionAccessPointsCommandError");
var de_ListRegionalBucketsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListRegionalBucketsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_NT] != null) {
    contents[_NT] = (0, import_smithy_client.expectString)(data[_NT]);
  }
  if (data.RegionalBucketList === "") {
    contents[_RBL] = [];
  } else if (data[_RBL] != null && data[_RBL][_RB] != null) {
    contents[_RBL] = de_RegionalBucketList((0, import_smithy_client.getArrayIfSingleItem)(data[_RBL][_RB]), context);
  }
  return contents;
}, "de_ListRegionalBucketsCommand");
var de_ListRegionalBucketsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_ListRegionalBucketsCommandError");
var de_ListStorageLensConfigurationsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListStorageLensConfigurationsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_NT] != null) {
    contents[_NT] = (0, import_smithy_client.expectString)(data[_NT]);
  }
  if (data.StorageLensConfigurationList === "") {
    contents[_SLCL] = [];
  } else if (data[_SLCL] != null) {
    contents[_SLCL] = de_StorageLensConfigurationList((0, import_smithy_client.getArrayIfSingleItem)(data[_SLCL]), context);
  }
  return contents;
}, "de_ListStorageLensConfigurationsCommand");
var de_ListStorageLensConfigurationsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_ListStorageLensConfigurationsCommandError");
var de_ListStorageLensGroupsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListStorageLensGroupsCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_NT] != null) {
    contents[_NT] = (0, import_smithy_client.expectString)(data[_NT]);
  }
  if (data.StorageLensGroupList === "") {
    contents[_SLGL] = [];
  } else if (data[_SLGL] != null) {
    contents[_SLGL] = de_StorageLensGroupList((0, import_smithy_client.getArrayIfSingleItem)(data[_SLGL]), context);
  }
  return contents;
}, "de_ListStorageLensGroupsCommand");
var de_ListStorageLensGroupsCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_ListStorageLensGroupsCommandError");
var de_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListTagsForResourceCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data.Tags === "") {
    contents[_T] = [];
  } else if (data[_T] != null && data[_T][_Tag] != null) {
    contents[_T] = de_TagList((0, import_smithy_client.getArrayIfSingleItem)(data[_T][_Tag]), context);
  }
  return contents;
}, "de_ListTagsForResourceCommand");
var de_ListTagsForResourceCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_ListTagsForResourceCommandError");
var de_PutAccessGrantsInstanceResourcePolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_PutAccessGrantsInstanceResourcePolicyCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_CA] != null) {
    contents[_CA] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(data[_CA]));
  }
  if (data[_Or] != null) {
    contents[_Or] = (0, import_smithy_client.expectString)(data[_Or]);
  }
  if (data[_Po] != null) {
    contents[_Po] = (0, import_smithy_client.expectString)(data[_Po]);
  }
  return contents;
}, "de_PutAccessGrantsInstanceResourcePolicyCommand");
var de_PutAccessGrantsInstanceResourcePolicyCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_PutAccessGrantsInstanceResourcePolicyCommandError");
var de_PutAccessPointConfigurationForObjectLambdaCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_PutAccessPointConfigurationForObjectLambdaCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_PutAccessPointConfigurationForObjectLambdaCommand");
var de_PutAccessPointConfigurationForObjectLambdaCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_PutAccessPointConfigurationForObjectLambdaCommandError");
var de_PutAccessPointPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_PutAccessPointPolicyCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_PutAccessPointPolicyCommand");
var de_PutAccessPointPolicyCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_PutAccessPointPolicyCommandError");
var de_PutAccessPointPolicyForObjectLambdaCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_PutAccessPointPolicyForObjectLambdaCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_PutAccessPointPolicyForObjectLambdaCommand");
var de_PutAccessPointPolicyForObjectLambdaCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_PutAccessPointPolicyForObjectLambdaCommandError");
var de_PutBucketLifecycleConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_PutBucketLifecycleConfigurationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_PutBucketLifecycleConfigurationCommand");
var de_PutBucketLifecycleConfigurationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_PutBucketLifecycleConfigurationCommandError");
var de_PutBucketPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_PutBucketPolicyCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_PutBucketPolicyCommand");
var de_PutBucketPolicyCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_PutBucketPolicyCommandError");
var de_PutBucketReplicationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_PutBucketReplicationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_PutBucketReplicationCommand");
var de_PutBucketReplicationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_PutBucketReplicationCommandError");
var de_PutBucketTaggingCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_PutBucketTaggingCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_PutBucketTaggingCommand");
var de_PutBucketTaggingCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_PutBucketTaggingCommandError");
var de_PutBucketVersioningCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_PutBucketVersioningCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_PutBucketVersioningCommand");
var de_PutBucketVersioningCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_PutBucketVersioningCommandError");
var de_PutJobTaggingCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_PutJobTaggingCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_PutJobTaggingCommand");
var de_PutJobTaggingCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalServiceException":
    case "com.amazonaws.s3control#InternalServiceException":
      throw await de_InternalServiceExceptionRes(parsedOutput, context);
    case "NotFoundException":
    case "com.amazonaws.s3control#NotFoundException":
      throw await de_NotFoundExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.s3control#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    case "TooManyTagsException":
    case "com.amazonaws.s3control#TooManyTagsException":
      throw await de_TooManyTagsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
  }
}, "de_PutJobTaggingCommandError");
var de_PutMultiRegionAccessPointPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_PutMultiRegionAccessPointPolicyCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_RTARN] != null) {
    contents[_RTARN] = (0, import_smithy_client.expectString)(data[_RTARN]);
  }
  return contents;
}, "de_PutMultiRegionAccessPointPolicyCommand");
var de_PutMultiRegionAccessPointPolicyCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_PutMultiRegionAccessPointPolicyCommandError");
var de_PutPublicAccessBlockCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_PutPublicAccessBlockCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_PutPublicAccessBlockCommand");
var de_PutPublicAccessBlockCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_PutPublicAccessBlockCommandError");
var de_PutStorageLensConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_PutStorageLensConfigurationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_PutStorageLensConfigurationCommand");
var de_PutStorageLensConfigurationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_PutStorageLensConfigurationCommandError");
var de_PutStorageLensConfigurationTaggingCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_PutStorageLensConfigurationTaggingCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_PutStorageLensConfigurationTaggingCommand");
var de_PutStorageLensConfigurationTaggingCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_PutStorageLensConfigurationTaggingCommandError");
var de_SubmitMultiRegionAccessPointRoutesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_SubmitMultiRegionAccessPointRoutesCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_SubmitMultiRegionAccessPointRoutesCommand");
var de_SubmitMultiRegionAccessPointRoutesCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_SubmitMultiRegionAccessPointRoutesCommandError");
var de_TagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_TagResourceCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_TagResourceCommand");
var de_TagResourceCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_TagResourceCommandError");
var de_UntagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_UntagResourceCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UntagResourceCommand");
var de_UntagResourceCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_UntagResourceCommandError");
var de_UpdateAccessGrantsLocationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateAccessGrantsLocationCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_AGLA] != null) {
    contents[_AGLA] = (0, import_smithy_client.expectString)(data[_AGLA]);
  }
  if (data[_AGLI] != null) {
    contents[_AGLI] = (0, import_smithy_client.expectString)(data[_AGLI]);
  }
  if (data[_CA] != null) {
    contents[_CA] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(data[_CA]));
  }
  if (data[_IAMRA] != null) {
    contents[_IAMRA] = (0, import_smithy_client.expectString)(data[_IAMRA]);
  }
  if (data[_LS] != null) {
    contents[_LS] = (0, import_smithy_client.expectString)(data[_LS]);
  }
  return contents;
}, "de_UpdateAccessGrantsLocationCommand");
var de_UpdateAccessGrantsLocationCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_UpdateAccessGrantsLocationCommandError");
var de_UpdateJobPriorityCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateJobPriorityCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_JI] != null) {
    contents[_JI] = (0, import_smithy_client.expectString)(data[_JI]);
  }
  if (data[_Pr] != null) {
    contents[_Pr] = (0, import_smithy_client.strictParseInt32)(data[_Pr]);
  }
  return contents;
}, "de_UpdateJobPriorityCommand");
var de_UpdateJobPriorityCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "BadRequestException":
    case "com.amazonaws.s3control#BadRequestException":
      throw await de_BadRequestExceptionRes(parsedOutput, context);
    case "InternalServiceException":
    case "com.amazonaws.s3control#InternalServiceException":
      throw await de_InternalServiceExceptionRes(parsedOutput, context);
    case "NotFoundException":
    case "com.amazonaws.s3control#NotFoundException":
      throw await de_NotFoundExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.s3control#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
  }
}, "de_UpdateJobPriorityCommandError");
var de_UpdateJobStatusCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateJobStatusCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await parseBody(output.body, context)), "body");
  if (data[_JI] != null) {
    contents[_JI] = (0, import_smithy_client.expectString)(data[_JI]);
  }
  if (data[_S] != null) {
    contents[_S] = (0, import_smithy_client.expectString)(data[_S]);
  }
  if (data[_SUR] != null) {
    contents[_SUR] = (0, import_smithy_client.expectString)(data[_SUR]);
  }
  return contents;
}, "de_UpdateJobStatusCommand");
var de_UpdateJobStatusCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "BadRequestException":
    case "com.amazonaws.s3control#BadRequestException":
      throw await de_BadRequestExceptionRes(parsedOutput, context);
    case "InternalServiceException":
    case "com.amazonaws.s3control#InternalServiceException":
      throw await de_InternalServiceExceptionRes(parsedOutput, context);
    case "JobStatusException":
    case "com.amazonaws.s3control#JobStatusException":
      throw await de_JobStatusExceptionRes(parsedOutput, context);
    case "NotFoundException":
    case "com.amazonaws.s3control#NotFoundException":
      throw await de_NotFoundExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.s3control#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
  }
}, "de_UpdateJobStatusCommandError");
var de_UpdateStorageLensGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_UpdateStorageLensGroupCommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UpdateStorageLensGroupCommand");
var de_UpdateStorageLensGroupCommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseErrorBody(output.body, context)
  };
  const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Error,
    errorCode
  });
}, "de_UpdateStorageLensGroupCommandError");
var throwDefaultError = (0, import_smithy_client.withBaseException)(S3ControlServiceException);
var de_BadRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(data[_Me]);
  }
  const exception = new BadRequestException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body.Error);
}, "de_BadRequestExceptionRes");
var de_BucketAlreadyExistsRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body.Error;
  const exception = new BucketAlreadyExists({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body.Error);
}, "de_BucketAlreadyExistsRes");
var de_BucketAlreadyOwnedByYouRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body.Error;
  const exception = new BucketAlreadyOwnedByYou({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body.Error);
}, "de_BucketAlreadyOwnedByYouRes");
var de_IdempotencyExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(data[_Me]);
  }
  const exception = new IdempotencyException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body.Error);
}, "de_IdempotencyExceptionRes");
var de_InternalServiceExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(data[_Me]);
  }
  const exception = new InternalServiceException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body.Error);
}, "de_InternalServiceExceptionRes");
var de_InvalidNextTokenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(data[_Me]);
  }
  const exception = new InvalidNextTokenException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body.Error);
}, "de_InvalidNextTokenExceptionRes");
var de_InvalidRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(data[_Me]);
  }
  const exception = new InvalidRequestException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body.Error);
}, "de_InvalidRequestExceptionRes");
var de_JobStatusExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(data[_Me]);
  }
  const exception = new JobStatusException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body.Error);
}, "de_JobStatusExceptionRes");
var de_NoSuchPublicAccessBlockConfigurationRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(data[_Me]);
  }
  const exception = new NoSuchPublicAccessBlockConfiguration({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body.Error);
}, "de_NoSuchPublicAccessBlockConfigurationRes");
var de_NotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(data[_Me]);
  }
  const exception = new NotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body.Error);
}, "de_NotFoundExceptionRes");
var de_TooManyRequestsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(data[_Me]);
  }
  const exception = new TooManyRequestsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body.Error);
}, "de_TooManyRequestsExceptionRes");
var de_TooManyTagsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body.Error;
  if (data[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(data[_Me]);
  }
  const exception = new TooManyTagsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body.Error);
}, "de_TooManyTagsExceptionRes");
var se_AbortIncompleteMultipartUpload = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_AIMU);
  if (input[_DAI] != null) {
    bn.c(import_xml_builder.XmlNode.of(_DAI, String(input[_DAI])).n(_DAI));
  }
  return bn;
}, "se_AbortIncompleteMultipartUpload");
var se_AccessControlTranslation = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_ACT);
  if (input[_Ow] != null) {
    bn.c(import_xml_builder.XmlNode.of(_OO, input[_Ow]).n(_Ow));
  }
  return bn;
}, "se_AccessControlTranslation");
var se_AccessGrantsLocationConfiguration = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_AGLC);
  if (input[_SSP] != null) {
    bn.c(import_xml_builder.XmlNode.of(_SP, input[_SSP]).n(_SSP));
  }
  return bn;
}, "se_AccessGrantsLocationConfiguration");
var se_AccountLevel = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_AL);
  if (input[_AM] != null) {
    bn.c(se_ActivityMetrics(input[_AM], context).n(_AM));
  }
  if (input[_BL] != null) {
    bn.c(se_BucketLevel(input[_BL], context).n(_BL));
  }
  if (input[_ACOM] != null) {
    bn.c(se_AdvancedCostOptimizationMetrics(input[_ACOM], context).n(_ACOM));
  }
  if (input[_ADPM] != null) {
    bn.c(se_AdvancedDataProtectionMetrics(input[_ADPM], context).n(_ADPM));
  }
  if (input[_DSCM] != null) {
    bn.c(se_DetailedStatusCodesMetrics(input[_DSCM], context).n(_DSCM));
  }
  if (input[_SLGLt] != null) {
    bn.c(se_StorageLensGroupLevel(input[_SLGLt], context).n(_SLGLt));
  }
  return bn;
}, "se_AccountLevel");
var se_ActivityMetrics = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_AM);
  if (input[_IE] != null) {
    bn.c(import_xml_builder.XmlNode.of(_IE, String(input[_IE])).n(_IE));
  }
  return bn;
}, "se_ActivityMetrics");
var se_AdvancedCostOptimizationMetrics = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_ACOM);
  if (input[_IE] != null) {
    bn.c(import_xml_builder.XmlNode.of(_IE, String(input[_IE])).n(_IE));
  }
  return bn;
}, "se_AdvancedCostOptimizationMetrics");
var se_AdvancedDataProtectionMetrics = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_ADPM);
  if (input[_IE] != null) {
    bn.c(import_xml_builder.XmlNode.of(_IE, String(input[_IE])).n(_IE));
  }
  return bn;
}, "se_AdvancedDataProtectionMetrics");
var se_AwsLambdaTransformation = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_ALT);
  if (input[_FA] != null) {
    bn.c(import_xml_builder.XmlNode.of(_FAS, input[_FA]).n(_FA));
  }
  if (input[_FP] != null) {
    bn.c(import_xml_builder.XmlNode.of(_ALTP, input[_FP]).n(_FP));
  }
  return bn;
}, "se_AwsLambdaTransformation");
var se_BucketLevel = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_BL);
  if (input[_AM] != null) {
    bn.c(se_ActivityMetrics(input[_AM], context).n(_AM));
  }
  if (input[_PL] != null) {
    bn.c(se_PrefixLevel(input[_PL], context).n(_PL));
  }
  if (input[_ACOM] != null) {
    bn.c(se_AdvancedCostOptimizationMetrics(input[_ACOM], context).n(_ACOM));
  }
  if (input[_ADPM] != null) {
    bn.c(se_AdvancedDataProtectionMetrics(input[_ADPM], context).n(_ADPM));
  }
  if (input[_DSCM] != null) {
    bn.c(se_DetailedStatusCodesMetrics(input[_DSCM], context).n(_DSCM));
  }
  return bn;
}, "se_BucketLevel");
var se_Buckets = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    const n = import_xml_builder.XmlNode.of(_SBAS, entry);
    return n.n(_Ar);
  });
}, "se_Buckets");
var se_CloudWatchMetrics = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_CWM);
  if (input[_IE] != null) {
    bn.c(import_xml_builder.XmlNode.of(_IE, String(input[_IE])).n(_IE));
  }
  return bn;
}, "se_CloudWatchMetrics");
var se_CreateBucketConfiguration = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_CBC);
  if (input[_LC] != null) {
    bn.c(import_xml_builder.XmlNode.of(_BLC, input[_LC]).n(_LC));
  }
  return bn;
}, "se_CreateBucketConfiguration");
var se_CreateMultiRegionAccessPointInput = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_CMRAPI);
  if (input[_N] != null) {
    bn.c(import_xml_builder.XmlNode.of(_MRAPN, input[_N]).n(_N));
  }
  if (input[_PAB] != null) {
    bn.c(se_PublicAccessBlockConfiguration(input[_PAB], context).n(_PAB));
  }
  bn.lc(input, "Regions", "Regions", () => se_RegionCreationList(input[_Re], context));
  return bn;
}, "se_CreateMultiRegionAccessPointInput");
var se_DeleteMarkerReplication = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_DMR);
  if (input[_S] != null) {
    bn.c(import_xml_builder.XmlNode.of(_DMRS, input[_S]).n(_S));
  }
  return bn;
}, "se_DeleteMarkerReplication");
var se_DeleteMultiRegionAccessPointInput = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_DMRAPI);
  if (input[_N] != null) {
    bn.c(import_xml_builder.XmlNode.of(_MRAPN, input[_N]).n(_N));
  }
  return bn;
}, "se_DeleteMultiRegionAccessPointInput");
var se_Destination = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_Des);
  if (input[_Ac] != null) {
    bn.c(import_xml_builder.XmlNode.of(_AI, input[_Ac]).n(_Ac));
  }
  if (input[_B] != null) {
    bn.c(import_xml_builder.XmlNode.of(_BIS, input[_B]).n(_B));
  }
  if (input[_RT] != null) {
    bn.c(se_ReplicationTime(input[_RT], context).n(_RT));
  }
  if (input[_ACT] != null) {
    bn.c(se_AccessControlTranslation(input[_ACT], context).n(_ACT));
  }
  if (input[_EC] != null) {
    bn.c(se_EncryptionConfiguration(input[_EC], context).n(_EC));
  }
  if (input[_Met] != null) {
    bn.c(se_Metrics(input[_Met], context).n(_Met));
  }
  if (input[_SC] != null) {
    bn.c(import_xml_builder.XmlNode.of(_RSC, input[_SC]).n(_SC));
  }
  return bn;
}, "se_Destination");
var se_DetailedStatusCodesMetrics = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_DSCM);
  if (input[_IE] != null) {
    bn.c(import_xml_builder.XmlNode.of(_IE, String(input[_IE])).n(_IE));
  }
  return bn;
}, "se_DetailedStatusCodesMetrics");
var se_EncryptionConfiguration = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_EC);
  bn.cc(input, _RKKID);
  return bn;
}, "se_EncryptionConfiguration");
var se__Exclude = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_Ex);
  bn.lc(input, "Buckets", "Buckets", () => se_Buckets(input[_Bu], context));
  bn.lc(input, "Regions", "Regions", () => se_Regions(input[_Re], context));
  return bn;
}, "se__Exclude");
var se_ExistingObjectReplication = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_EOR);
  if (input[_S] != null) {
    bn.c(import_xml_builder.XmlNode.of(_EORS, input[_S]).n(_S));
  }
  return bn;
}, "se_ExistingObjectReplication");
var se_GeneratedManifestEncryption = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_GME);
  if (input[_SSES] != null) {
    bn.c(se_SSES3Encryption(input[_SSES], context).n(_SS));
  }
  if (input[_SSEKMS] != null) {
    bn.c(se_SSEKMSEncryption(input[_SSEKMS], context).n(_SK));
  }
  return bn;
}, "se_GeneratedManifestEncryption");
var se_Grantee = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_G);
  bn.cc(input, _GT);
  bn.cc(input, _GI);
  return bn;
}, "se_Grantee");
var se_Include = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_I);
  bn.lc(input, "Buckets", "Buckets", () => se_Buckets(input[_Bu], context));
  bn.lc(input, "Regions", "Regions", () => se_Regions(input[_Re], context));
  return bn;
}, "se_Include");
var se_JobManifest = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_JM);
  if (input[_Sp] != null) {
    bn.c(se_JobManifestSpec(input[_Sp], context).n(_Sp));
  }
  if (input[_L] != null) {
    bn.c(se_JobManifestLocation(input[_L], context).n(_L));
  }
  return bn;
}, "se_JobManifest");
var se_JobManifestFieldList = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    const n = import_xml_builder.XmlNode.of(_JMFN, entry);
    return n.n(_m);
  });
}, "se_JobManifestFieldList");
var se_JobManifestGenerator = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_JMG);
  JobManifestGenerator.visit(input, {
    S3JobManifestGenerator: (value) => {
      if (input[_SJMG] != null) {
        bn.c(se_S3JobManifestGenerator(value, context).n(_SJMG));
      }
    },
    _: (name, value) => {
      if (!(value instanceof import_xml_builder.XmlNode || value instanceof import_xml_builder.XmlText)) {
        throw new Error("Unable to serialize unknown union members in XML.");
      }
      bn.c(new import_xml_builder.XmlNode(name).c(value));
    }
  });
  return bn;
}, "se_JobManifestGenerator");
var se_JobManifestGeneratorFilter = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_JMGF);
  if (input[_EFR] != null) {
    bn.c(import_xml_builder.XmlNode.of(_Bo, String(input[_EFR])).n(_EFR));
  }
  if (input[_CAr] != null) {
    bn.c(import_xml_builder.XmlNode.of(_OCT, input[_CAr].toISOString().split(".")[0] + "Z").n(_CAr));
  }
  if (input[_CB] != null) {
    bn.c(import_xml_builder.XmlNode.of(_OCT, input[_CB].toISOString().split(".")[0] + "Z").n(_CB));
  }
  bn.lc(
    input,
    "ObjectReplicationStatuses",
    "ObjectReplicationStatuses",
    () => se_ReplicationStatusFilterList(input[_ORS], context)
  );
  if (input[_KNC] != null) {
    bn.c(se_KeyNameConstraint(input[_KNC], context).n(_KNC));
  }
  if (input[_OSGTB] != null) {
    bn.c(import_xml_builder.XmlNode.of(_OSGTB, String(input[_OSGTB])).n(_OSGTB));
  }
  if (input[_OSLTB] != null) {
    bn.c(import_xml_builder.XmlNode.of(_OSLTB, String(input[_OSLTB])).n(_OSLTB));
  }
  bn.lc(input, "MatchAnyStorageClass", "MatchAnyStorageClass", () => se_StorageClassList(input[_MASC], context));
  return bn;
}, "se_JobManifestGeneratorFilter");
var se_JobManifestLocation = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_JML);
  if (input[_OA] != null) {
    bn.c(import_xml_builder.XmlNode.of(_SKAS, input[_OA]).n(_OA));
  }
  if (input[_OVI] != null) {
    bn.c(import_xml_builder.XmlNode.of(_SOVI, input[_OVI]).n(_OVI));
  }
  if (input[_ET] != null) {
    bn.c(import_xml_builder.XmlNode.of(_NEMLSon, input[_ET]).n(_ET));
  }
  return bn;
}, "se_JobManifestLocation");
var se_JobManifestSpec = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_JMS);
  if (input[_F] != null) {
    bn.c(import_xml_builder.XmlNode.of(_JMF, input[_F]).n(_F));
  }
  bn.lc(input, "Fields", "Fields", () => se_JobManifestFieldList(input[_Fi], context));
  return bn;
}, "se_JobManifestSpec");
var se_JobOperation = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_JO);
  if (input[_LI] != null) {
    bn.c(se_LambdaInvokeOperation(input[_LI], context).n(_LI));
  }
  if (input[_SPOC] != null) {
    bn.c(se_S3CopyObjectOperation(input[_SPOC], context).n(_SPOC));
  }
  if (input[_SPOA] != null) {
    bn.c(se_S3SetObjectAclOperation(input[_SPOA], context).n(_SPOA));
  }
  if (input[_SPOT] != null) {
    bn.c(se_S3SetObjectTaggingOperation(input[_SPOT], context).n(_SPOT));
  }
  if (input[_SDOT] != null) {
    bn.c(se_S3DeleteObjectTaggingOperation(input[_SDOT], context).n(_SDOT));
  }
  if (input[_SIRO] != null) {
    bn.c(se_S3InitiateRestoreObjectOperation(input[_SIRO], context).n(_SIRO));
  }
  if (input[_SPOLH] != null) {
    bn.c(se_S3SetObjectLegalHoldOperation(input[_SPOLH], context).n(_SPOLH));
  }
  if (input[_SPOR] != null) {
    bn.c(se_S3SetObjectRetentionOperation(input[_SPOR], context).n(_SPOR));
  }
  if (input[_SRO] != null) {
    bn.c(se_S3ReplicateObjectOperation(input[_SRO], context).n(_SRO));
  }
  return bn;
}, "se_JobOperation");
var se_JobReport = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_JR);
  if (input[_B] != null) {
    bn.c(import_xml_builder.XmlNode.of(_SBAS, input[_B]).n(_B));
  }
  if (input[_F] != null) {
    bn.c(import_xml_builder.XmlNode.of(_JRF, input[_F]).n(_F));
  }
  if (input[_En] != null) {
    bn.c(import_xml_builder.XmlNode.of(_Bo, String(input[_En])).n(_En));
  }
  if (input[_Pre] != null) {
    bn.c(import_xml_builder.XmlNode.of(_RPS, input[_Pre]).n(_Pre));
  }
  if (input[_RS] != null) {
    bn.c(import_xml_builder.XmlNode.of(_JRS, input[_RS]).n(_RS));
  }
  return bn;
}, "se_JobReport");
var se_KeyNameConstraint = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_KNC);
  bn.lc(input, "MatchAnyPrefix", "MatchAnyPrefix", () => se_NonEmptyMaxLength1024StringList(input[_MAP], context));
  bn.lc(input, "MatchAnySuffix", "MatchAnySuffix", () => se_NonEmptyMaxLength1024StringList(input[_MAS], context));
  bn.lc(
    input,
    "MatchAnySubstring",
    "MatchAnySubstring",
    () => se_NonEmptyMaxLength1024StringList(input[_MASa], context)
  );
  return bn;
}, "se_KeyNameConstraint");
var se_LambdaInvokeOperation = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_LIO);
  if (input[_FA] != null) {
    bn.c(import_xml_builder.XmlNode.of(_FAS, input[_FA]).n(_FA));
  }
  if (input[_ISV] != null) {
    bn.c(import_xml_builder.XmlNode.of(_NEMLS, input[_ISV]).n(_ISV));
  }
  bn.lc(input, "UserArguments", "UserArguments", () => se_UserArguments(input[_UA], context));
  return bn;
}, "se_LambdaInvokeOperation");
var se_LifecycleConfiguration = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_LCi);
  bn.lc(input, "Rules", "Rules", () => se_LifecycleRules(input[_Ru], context));
  return bn;
}, "se_LifecycleConfiguration");
var se_LifecycleExpiration = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_LE);
  if (input[_Da] != null) {
    bn.c(import_xml_builder.XmlNode.of(_Da, input[_Da].toISOString().split(".")[0] + "Z").n(_Da));
  }
  if (input[_Day] != null) {
    bn.c(import_xml_builder.XmlNode.of(_Day, String(input[_Day])).n(_Day));
  }
  if (input[_EODM] != null) {
    bn.c(import_xml_builder.XmlNode.of(_EODM, String(input[_EODM])).n(_EODM));
  }
  return bn;
}, "se_LifecycleExpiration");
var se_LifecycleRule = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_LR);
  if (input[_Exp] != null) {
    bn.c(se_LifecycleExpiration(input[_Exp], context).n(_Exp));
  }
  bn.cc(input, _ID);
  if (input[_Fil] != null) {
    bn.c(se_LifecycleRuleFilter(input[_Fil], context).n(_Fil));
  }
  if (input[_S] != null) {
    bn.c(import_xml_builder.XmlNode.of(_ES, input[_S]).n(_S));
  }
  bn.lc(input, "Transitions", "Transitions", () => se_TransitionList(input[_Tr], context));
  bn.lc(
    input,
    "NoncurrentVersionTransitions",
    "NoncurrentVersionTransitions",
    () => se_NoncurrentVersionTransitionList(input[_NVT], context)
  );
  if (input[_NVE] != null) {
    bn.c(se_NoncurrentVersionExpiration(input[_NVE], context).n(_NVE));
  }
  if (input[_AIMU] != null) {
    bn.c(se_AbortIncompleteMultipartUpload(input[_AIMU], context).n(_AIMU));
  }
  return bn;
}, "se_LifecycleRule");
var se_LifecycleRuleAndOperator = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_LRAO);
  bn.cc(input, _Pre);
  bn.lc(input, "Tags", "Tags", () => se_S3TagSet(input[_T], context));
  if (input[_OSGT] != null) {
    bn.c(import_xml_builder.XmlNode.of(_OSGTB, String(input[_OSGT])).n(_OSGT));
  }
  if (input[_OSLT] != null) {
    bn.c(import_xml_builder.XmlNode.of(_OSLTB, String(input[_OSLT])).n(_OSLT));
  }
  return bn;
}, "se_LifecycleRuleAndOperator");
var se_LifecycleRuleFilter = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_LRF);
  bn.cc(input, _Pre);
  if (input[_Tag] != null) {
    bn.c(se_S3Tag(input[_Tag], context).n(_Tag));
  }
  if (input[_An] != null) {
    bn.c(se_LifecycleRuleAndOperator(input[_An], context).n(_An));
  }
  if (input[_OSGT] != null) {
    bn.c(import_xml_builder.XmlNode.of(_OSGTB, String(input[_OSGT])).n(_OSGT));
  }
  if (input[_OSLT] != null) {
    bn.c(import_xml_builder.XmlNode.of(_OSLTB, String(input[_OSLT])).n(_OSLT));
  }
  return bn;
}, "se_LifecycleRuleFilter");
var se_LifecycleRules = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    const n = se_LifecycleRule(entry, context);
    return n.n(_Rul);
  });
}, "se_LifecycleRules");
var se_MatchAnyPrefix = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    const n = import_xml_builder.XmlNode.of(_Pre, entry);
    return n.n(_Pre);
  });
}, "se_MatchAnyPrefix");
var se_MatchAnySuffix = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    const n = import_xml_builder.XmlNode.of(_Su, entry);
    return n.n(_Su);
  });
}, "se_MatchAnySuffix");
var se_MatchAnyTag = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    const n = se_S3Tag(entry, context);
    return n.n(_Tag);
  });
}, "se_MatchAnyTag");
var se_MatchObjectAge = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_MOA);
  if (input[_DGT] != null) {
    bn.c(import_xml_builder.XmlNode.of(_OAV, String(input[_DGT])).n(_DGT));
  }
  if (input[_DLT] != null) {
    bn.c(import_xml_builder.XmlNode.of(_OAV, String(input[_DLT])).n(_DLT));
  }
  return bn;
}, "se_MatchObjectAge");
var se_MatchObjectSize = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_MOS);
  if (input[_BGT] != null) {
    bn.c(import_xml_builder.XmlNode.of(_OSV, String(input[_BGT])).n(_BGT));
  }
  if (input[_BLT] != null) {
    bn.c(import_xml_builder.XmlNode.of(_OSV, String(input[_BLT])).n(_BLT));
  }
  return bn;
}, "se_MatchObjectSize");
var se_Metrics = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_Met);
  if (input[_S] != null) {
    bn.c(import_xml_builder.XmlNode.of(_MS, input[_S]).n(_S));
  }
  if (input[_ETv] != null) {
    bn.c(se_ReplicationTimeValue(input[_ETv], context).n(_ETv));
  }
  return bn;
}, "se_Metrics");
var se_MultiRegionAccessPointRoute = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_MRAPR);
  if (input[_B] != null) {
    bn.c(import_xml_builder.XmlNode.of(_BN, input[_B]).n(_B));
  }
  if (input[_Reg] != null) {
    bn.c(import_xml_builder.XmlNode.of(_RN, input[_Reg]).n(_Reg));
  }
  if (input[_TDP] != null) {
    bn.c(import_xml_builder.XmlNode.of(_TDP, String(input[_TDP])).n(_TDP));
  }
  return bn;
}, "se_MultiRegionAccessPointRoute");
var se_NoncurrentVersionExpiration = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_NVE);
  if (input[_ND] != null) {
    bn.c(import_xml_builder.XmlNode.of(_Day, String(input[_ND])).n(_ND));
  }
  if (input[_NNV] != null) {
    bn.c(import_xml_builder.XmlNode.of(_NVC, String(input[_NNV])).n(_NNV));
  }
  return bn;
}, "se_NoncurrentVersionExpiration");
var se_NoncurrentVersionTransition = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_NVTo);
  if (input[_ND] != null) {
    bn.c(import_xml_builder.XmlNode.of(_Day, String(input[_ND])).n(_ND));
  }
  if (input[_SC] != null) {
    bn.c(import_xml_builder.XmlNode.of(_TSC, input[_SC]).n(_SC));
  }
  return bn;
}, "se_NoncurrentVersionTransition");
var se_NoncurrentVersionTransitionList = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    const n = se_NoncurrentVersionTransition(entry, context);
    return n.n(_NVTo);
  });
}, "se_NoncurrentVersionTransitionList");
var se_NonEmptyMaxLength1024StringList = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    const n = import_xml_builder.XmlNode.of(_NEMLSon, entry);
    return n.n(_m);
  });
}, "se_NonEmptyMaxLength1024StringList");
var se_ObjectLambdaAllowedFeaturesList = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    const n = import_xml_builder.XmlNode.of(_OLAF, entry);
    return n.n(_AF);
  });
}, "se_ObjectLambdaAllowedFeaturesList");
var se_ObjectLambdaConfiguration = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_OLC);
  if (input[_SAP] != null) {
    bn.c(import_xml_builder.XmlNode.of(_OLSAPA, input[_SAP]).n(_SAP));
  }
  if (input[_CWME] != null) {
    bn.c(import_xml_builder.XmlNode.of(_Bo, String(input[_CWME])).n(_CWME));
  }
  bn.lc(input, "AllowedFeatures", "AllowedFeatures", () => se_ObjectLambdaAllowedFeaturesList(input[_AFl], context));
  bn.lc(
    input,
    "TransformationConfigurations",
    "TransformationConfigurations",
    () => se_ObjectLambdaTransformationConfigurationsList(input[_TC], context)
  );
  return bn;
}, "se_ObjectLambdaConfiguration");
var se_ObjectLambdaContentTransformation = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_OLCT);
  ObjectLambdaContentTransformation.visit(input, {
    AwsLambda: (value) => {
      if (input[_ALw] != null) {
        bn.c(se_AwsLambdaTransformation(value, context).n(_ALw));
      }
    },
    _: (name, value) => {
      if (!(value instanceof import_xml_builder.XmlNode || value instanceof import_xml_builder.XmlText)) {
        throw new Error("Unable to serialize unknown union members in XML.");
      }
      bn.c(new import_xml_builder.XmlNode(name).c(value));
    }
  });
  return bn;
}, "se_ObjectLambdaContentTransformation");
var se_ObjectLambdaTransformationConfiguration = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_OLTC);
  bn.lc(
    input,
    "Actions",
    "Actions",
    () => se_ObjectLambdaTransformationConfigurationActionsList(input[_Act], context)
  );
  if (input[_CTo] != null) {
    bn.c(se_ObjectLambdaContentTransformation(input[_CTo], context).n(_CTo));
  }
  return bn;
}, "se_ObjectLambdaTransformationConfiguration");
var se_ObjectLambdaTransformationConfigurationActionsList = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    const n = import_xml_builder.XmlNode.of(_OLTCA, entry);
    return n.n(_Acti);
  });
}, "se_ObjectLambdaTransformationConfigurationActionsList");
var se_ObjectLambdaTransformationConfigurationsList = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    const n = se_ObjectLambdaTransformationConfiguration(entry, context);
    return n.n(_TCr);
  });
}, "se_ObjectLambdaTransformationConfigurationsList");
var se_PrefixLevel = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_PL);
  if (input[_SM] != null) {
    bn.c(se_PrefixLevelStorageMetrics(input[_SM], context).n(_SM));
  }
  return bn;
}, "se_PrefixLevel");
var se_PrefixLevelStorageMetrics = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_PLSM);
  if (input[_IE] != null) {
    bn.c(import_xml_builder.XmlNode.of(_IE, String(input[_IE])).n(_IE));
  }
  if (input[_SCe] != null) {
    bn.c(se_SelectionCriteria(input[_SCe], context).n(_SCe));
  }
  return bn;
}, "se_PrefixLevelStorageMetrics");
var se_PublicAccessBlockConfiguration = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_PABC);
  if (input[_BPA] != null) {
    bn.c(import_xml_builder.XmlNode.of(_Se, String(input[_BPA])).n(_BPA));
  }
  if (input[_IPA] != null) {
    bn.c(import_xml_builder.XmlNode.of(_Se, String(input[_IPA])).n(_IPA));
  }
  if (input[_BPP] != null) {
    bn.c(import_xml_builder.XmlNode.of(_Se, String(input[_BPP])).n(_BPP));
  }
  if (input[_RPB] != null) {
    bn.c(import_xml_builder.XmlNode.of(_Se, String(input[_RPB])).n(_RPB));
  }
  return bn;
}, "se_PublicAccessBlockConfiguration");
var se_PutMultiRegionAccessPointPolicyInput = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_PMRAPPI);
  if (input[_N] != null) {
    bn.c(import_xml_builder.XmlNode.of(_MRAPN, input[_N]).n(_N));
  }
  bn.cc(input, _Po);
  return bn;
}, "se_PutMultiRegionAccessPointPolicyInput");
var se_Region = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_Reg);
  if (input[_B] != null) {
    bn.c(import_xml_builder.XmlNode.of(_BN, input[_B]).n(_B));
  }
  if (input[_BAI] != null) {
    bn.c(import_xml_builder.XmlNode.of(_AI, input[_BAI]).n(_BAI));
  }
  return bn;
}, "se_Region");
var se_RegionCreationList = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    const n = se_Region(entry, context);
    return n.n(_Reg);
  });
}, "se_RegionCreationList");
var se_Regions = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    const n = import_xml_builder.XmlNode.of(_SAWSR, entry);
    return n.n(_Reg);
  });
}, "se_Regions");
var se_ReplicaModifications = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_RM);
  if (input[_S] != null) {
    bn.c(import_xml_builder.XmlNode.of(_RMS, input[_S]).n(_S));
  }
  return bn;
}, "se_ReplicaModifications");
var se_ReplicationConfiguration = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_RC);
  bn.cc(input, _Rol);
  bn.lc(input, "Rules", "Rules", () => se_ReplicationRules(input[_Ru], context));
  return bn;
}, "se_ReplicationConfiguration");
var se_ReplicationRule = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_RR);
  bn.cc(input, _ID);
  if (input[_Pr] != null) {
    bn.c(import_xml_builder.XmlNode.of(_Pr, String(input[_Pr])).n(_Pr));
  }
  bn.cc(input, _Pre);
  if (input[_Fil] != null) {
    bn.c(se_ReplicationRuleFilter(input[_Fil], context).n(_Fil));
  }
  if (input[_S] != null) {
    bn.c(import_xml_builder.XmlNode.of(_RRS, input[_S]).n(_S));
  }
  if (input[_SSC] != null) {
    bn.c(se_SourceSelectionCriteria(input[_SSC], context).n(_SSC));
  }
  if (input[_EOR] != null) {
    bn.c(se_ExistingObjectReplication(input[_EOR], context).n(_EOR));
  }
  if (input[_Des] != null) {
    bn.c(se_Destination(input[_Des], context).n(_Des));
  }
  if (input[_DMR] != null) {
    bn.c(se_DeleteMarkerReplication(input[_DMR], context).n(_DMR));
  }
  if (input[_B] != null) {
    bn.c(import_xml_builder.XmlNode.of(_BIS, input[_B]).n(_B));
  }
  return bn;
}, "se_ReplicationRule");
var se_ReplicationRuleAndOperator = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_RRAO);
  bn.cc(input, _Pre);
  bn.lc(input, "Tags", "Tags", () => se_S3TagSet(input[_T], context));
  return bn;
}, "se_ReplicationRuleAndOperator");
var se_ReplicationRuleFilter = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_RRF);
  bn.cc(input, _Pre);
  if (input[_Tag] != null) {
    bn.c(se_S3Tag(input[_Tag], context).n(_Tag));
  }
  if (input[_An] != null) {
    bn.c(se_ReplicationRuleAndOperator(input[_An], context).n(_An));
  }
  return bn;
}, "se_ReplicationRuleFilter");
var se_ReplicationRules = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    const n = se_ReplicationRule(entry, context);
    return n.n(_Rul);
  });
}, "se_ReplicationRules");
var se_ReplicationStatusFilterList = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    const n = import_xml_builder.XmlNode.of(_RSe, entry);
    return n.n(_m);
  });
}, "se_ReplicationStatusFilterList");
var se_ReplicationTime = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_RT);
  if (input[_S] != null) {
    bn.c(import_xml_builder.XmlNode.of(_RTS, input[_S]).n(_S));
  }
  if (input[_Ti] != null) {
    bn.c(se_ReplicationTimeValue(input[_Ti], context).n(_Ti));
  }
  return bn;
}, "se_ReplicationTime");
var se_ReplicationTimeValue = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_RTV);
  if (input[_Mi] != null) {
    bn.c(import_xml_builder.XmlNode.of(_Mi, String(input[_Mi])).n(_Mi));
  }
  return bn;
}, "se_ReplicationTimeValue");
var se_RouteList = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    const n = se_MultiRegionAccessPointRoute(entry, context);
    return n.n(_Rou);
  });
}, "se_RouteList");
var se_S3AccessControlList = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SACL);
  if (input[_Ow] != null) {
    bn.c(se_S3ObjectOwner(input[_Ow], context).n(_Ow));
  }
  bn.lc(input, "Grants", "Grants", () => se_S3GrantList(input[_Gr], context));
  return bn;
}, "se_S3AccessControlList");
var se_S3AccessControlPolicy = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SACP);
  if (input[_ACLc] != null) {
    bn.c(se_S3AccessControlList(input[_ACLc], context).n(_ACLc));
  }
  if (input[_CACL] != null) {
    bn.c(import_xml_builder.XmlNode.of(_SCACL, input[_CACL]).n(_CACL));
  }
  return bn;
}, "se_S3AccessControlPolicy");
var se_S3BucketDestination = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SBD);
  bn.cc(input, _F);
  bn.cc(input, _OSVu);
  bn.cc(input, _AI);
  if (input[_Ar] != null) {
    bn.c(import_xml_builder.XmlNode.of(_SBAS, input[_Ar]).n(_Ar));
  }
  bn.cc(input, _Pre);
  if (input[_Enc] != null) {
    bn.c(se_StorageLensDataExportEncryption(input[_Enc], context).n(_Enc));
  }
  return bn;
}, "se_S3BucketDestination");
var se_S3CopyObjectOperation = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SCOO);
  if (input[_TR] != null) {
    bn.c(import_xml_builder.XmlNode.of(_SROSEBAS, input[_TR]).n(_TR));
  }
  if (input[_CACL] != null) {
    bn.c(import_xml_builder.XmlNode.of(_SCACL, input[_CACL]).n(_CACL));
  }
  bn.lc(input, "AccessControlGrants", "AccessControlGrants", () => se_S3GrantList(input[_ACG], context));
  if (input[_MDe] != null) {
    bn.c(import_xml_builder.XmlNode.of(_SMD, input[_MDe]).n(_MDe));
  }
  if (input[_MSC] != null) {
    bn.c(import_xml_builder.XmlNode.of(_TSi, input[_MSC].toISOString().split(".")[0] + "Z").n(_MSC));
  }
  if (input[_NOM] != null) {
    bn.c(se_S3ObjectMetadata(input[_NOM], context).n(_NOM));
  }
  bn.lc(input, "NewObjectTagging", "NewObjectTagging", () => se_S3TagSet(input[_NOT], context));
  if (input[_RL] != null) {
    bn.c(import_xml_builder.XmlNode.of(_NEMLSonm, input[_RL]).n(_RL));
  }
  if (input[_RP] != null) {
    bn.c(import_xml_builder.XmlNode.of(_Bo, String(input[_RP])).n(_RP));
  }
  if (input[_SC] != null) {
    bn.c(import_xml_builder.XmlNode.of(_SSCt, input[_SC]).n(_SC));
  }
  if (input[_UMSC] != null) {
    bn.c(import_xml_builder.XmlNode.of(_TSi, input[_UMSC].toISOString().split(".")[0] + "Z").n(_UMSC));
  }
  if (input[_SSEAKKI] != null) {
    bn.c(import_xml_builder.XmlNode.of(_KKAS, input[_SSEAKKI]).n(_SSEAKKI));
  }
  if (input[_TKP] != null) {
    bn.c(import_xml_builder.XmlNode.of(_NEMLSon, input[_TKP]).n(_TKP));
  }
  if (input[_OLLHS] != null) {
    bn.c(import_xml_builder.XmlNode.of(_SOLLHS, input[_OLLHS]).n(_OLLHS));
  }
  if (input[_OLM] != null) {
    bn.c(import_xml_builder.XmlNode.of(_SOLM, input[_OLM]).n(_OLM));
  }
  if (input[_OLRUD] != null) {
    bn.c(import_xml_builder.XmlNode.of(_TSi, input[_OLRUD].toISOString().split(".")[0] + "Z").n(_OLRUD));
  }
  if (input[_BKE] != null) {
    bn.c(import_xml_builder.XmlNode.of(_Bo, String(input[_BKE])).n(_BKE));
  }
  if (input[_CAh] != null) {
    bn.c(import_xml_builder.XmlNode.of(_SCA, input[_CAh]).n(_CAh));
  }
  return bn;
}, "se_S3CopyObjectOperation");
var se_S3DeleteObjectTaggingOperation = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SDOTO);
  return bn;
}, "se_S3DeleteObjectTaggingOperation");
var se_S3Grant = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SG);
  if (input[_G] != null) {
    bn.c(se_S3Grantee(input[_G], context).n(_G));
  }
  if (input[_P] != null) {
    bn.c(import_xml_builder.XmlNode.of(_SPe, input[_P]).n(_P));
  }
  return bn;
}, "se_S3Grant");
var se_S3Grantee = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SGr);
  if (input[_TI] != null) {
    bn.c(import_xml_builder.XmlNode.of(_SGTI, input[_TI]).n(_TI));
  }
  if (input[_Id] != null) {
    bn.c(import_xml_builder.XmlNode.of(_NEMLSon, input[_Id]).n(_Id));
  }
  if (input[_DN] != null) {
    bn.c(import_xml_builder.XmlNode.of(_NEMLSon, input[_DN]).n(_DN));
  }
  return bn;
}, "se_S3Grantee");
var se_S3GrantList = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    const n = se_S3Grant(entry, context);
    return n.n(_m);
  });
}, "se_S3GrantList");
var se_S3InitiateRestoreObjectOperation = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SIROO);
  if (input[_EID] != null) {
    bn.c(import_xml_builder.XmlNode.of(_SEID, String(input[_EID])).n(_EID));
  }
  if (input[_GJT] != null) {
    bn.c(import_xml_builder.XmlNode.of(_SGJT, input[_GJT]).n(_GJT));
  }
  return bn;
}, "se_S3InitiateRestoreObjectOperation");
var se_S3JobManifestGenerator = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SJMG);
  if (input[_EBO] != null) {
    bn.c(import_xml_builder.XmlNode.of(_AI, input[_EBO]).n(_EBO));
  }
  if (input[_SB] != null) {
    bn.c(import_xml_builder.XmlNode.of(_SBAS, input[_SB]).n(_SB));
  }
  if (input[_MOL] != null) {
    bn.c(se_S3ManifestOutputLocation(input[_MOL], context).n(_MOL));
  }
  if (input[_Fil] != null) {
    bn.c(se_JobManifestGeneratorFilter(input[_Fil], context).n(_Fil));
  }
  if (input[_EMO] != null) {
    bn.c(import_xml_builder.XmlNode.of(_Bo, String(input[_EMO])).n(_EMO));
  }
  return bn;
}, "se_S3JobManifestGenerator");
var se_S3ManifestOutputLocation = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SMOL);
  if (input[_EMBO] != null) {
    bn.c(import_xml_builder.XmlNode.of(_AI, input[_EMBO]).n(_EMBO));
  }
  if (input[_B] != null) {
    bn.c(import_xml_builder.XmlNode.of(_SBAS, input[_B]).n(_B));
  }
  if (input[_MP] != null) {
    bn.c(import_xml_builder.XmlNode.of(_MPS, input[_MP]).n(_MP));
  }
  if (input[_ME] != null) {
    bn.c(se_GeneratedManifestEncryption(input[_ME], context).n(_ME));
  }
  if (input[_MF] != null) {
    bn.c(import_xml_builder.XmlNode.of(_GMF, input[_MF]).n(_MF));
  }
  return bn;
}, "se_S3ManifestOutputLocation");
var se_S3ObjectLockLegalHold = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SOLLH);
  if (input[_S] != null) {
    bn.c(import_xml_builder.XmlNode.of(_SOLLHS, input[_S]).n(_S));
  }
  return bn;
}, "se_S3ObjectLockLegalHold");
var se_S3ObjectMetadata = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SOM);
  if (input[_CC] != null) {
    bn.c(import_xml_builder.XmlNode.of(_NEMLSon, input[_CC]).n(_CC));
  }
  if (input[_CDo] != null) {
    bn.c(import_xml_builder.XmlNode.of(_NEMLSon, input[_CDo]).n(_CDo));
  }
  if (input[_CE] != null) {
    bn.c(import_xml_builder.XmlNode.of(_NEMLSon, input[_CE]).n(_CE));
  }
  if (input[_CL] != null) {
    bn.c(import_xml_builder.XmlNode.of(_NEMLSon, input[_CL]).n(_CL));
  }
  bn.lc(input, "UserMetadata", "UserMetadata", () => se_S3UserMetadata(input[_UM], context));
  if (input[_CLo] != null) {
    bn.c(import_xml_builder.XmlNode.of(_SCL, String(input[_CLo])).n(_CLo));
  }
  if (input[_CMD] != null) {
    bn.c(import_xml_builder.XmlNode.of(_NEMLSon, input[_CMD]).n(_CMD));
  }
  if (input[_CTon] != null) {
    bn.c(import_xml_builder.XmlNode.of(_NEMLSon, input[_CTon]).n(_CTon));
  }
  if (input[_HED] != null) {
    bn.c(import_xml_builder.XmlNode.of(_TSi, input[_HED].toISOString().split(".")[0] + "Z").n(_HED));
  }
  if (input[_RCe] != null) {
    bn.c(import_xml_builder.XmlNode.of(_Bo, String(input[_RCe])).n(_RCe));
  }
  if (input[_SSEA] != null) {
    bn.c(import_xml_builder.XmlNode.of(_SSSEA, input[_SSEA]).n(_SSEA));
  }
  return bn;
}, "se_S3ObjectMetadata");
var se_S3ObjectOwner = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SOO);
  if (input[_ID] != null) {
    bn.c(import_xml_builder.XmlNode.of(_NEMLSon, input[_ID]).n(_ID));
  }
  if (input[_DN] != null) {
    bn.c(import_xml_builder.XmlNode.of(_NEMLSon, input[_DN]).n(_DN));
  }
  return bn;
}, "se_S3ObjectOwner");
var se_S3ReplicateObjectOperation = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SROO);
  return bn;
}, "se_S3ReplicateObjectOperation");
var se_S3Retention = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SR);
  if (input[_RUD] != null) {
    bn.c(import_xml_builder.XmlNode.of(_TSi, input[_RUD].toISOString().split(".")[0] + "Z").n(_RUD));
  }
  if (input[_Mo] != null) {
    bn.c(import_xml_builder.XmlNode.of(_SOLRM, input[_Mo]).n(_Mo));
  }
  return bn;
}, "se_S3Retention");
var se_S3SetObjectAclOperation = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SSOAO);
  if (input[_ACP] != null) {
    bn.c(se_S3AccessControlPolicy(input[_ACP], context).n(_ACP));
  }
  return bn;
}, "se_S3SetObjectAclOperation");
var se_S3SetObjectLegalHoldOperation = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SSOLHO);
  if (input[_LH] != null) {
    bn.c(se_S3ObjectLockLegalHold(input[_LH], context).n(_LH));
  }
  return bn;
}, "se_S3SetObjectLegalHoldOperation");
var se_S3SetObjectRetentionOperation = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SSORO);
  if (input[_BGR] != null) {
    bn.c(import_xml_builder.XmlNode.of(_Bo, String(input[_BGR])).n(_BGR));
  }
  if (input[_Ret] != null) {
    bn.c(se_S3Retention(input[_Ret], context).n(_Ret));
  }
  return bn;
}, "se_S3SetObjectRetentionOperation");
var se_S3SetObjectTaggingOperation = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SSOTO);
  bn.lc(input, "TagSet", "TagSet", () => se_S3TagSet(input[_TS], context));
  return bn;
}, "se_S3SetObjectTaggingOperation");
var se_S3Tag = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_ST);
  if (input[_K] != null) {
    bn.c(import_xml_builder.XmlNode.of(_TKS, input[_K]).n(_K));
  }
  if (input[_V] != null) {
    bn.c(import_xml_builder.XmlNode.of(_TVS, input[_V]).n(_V));
  }
  return bn;
}, "se_S3Tag");
var se_S3TagSet = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    const n = se_S3Tag(entry, context);
    return n.n(_m);
  });
}, "se_S3TagSet");
var se_S3UserMetadata = /* @__PURE__ */ __name((input, context) => {
  return Object.keys(input).filter((key) => input[key] != null).map((key) => {
    const entryNode = new import_xml_builder.XmlNode("entry");
    const keyNode = import_xml_builder.XmlNode.of(_NEMLSon, key).n("key");
    entryNode.c(keyNode);
    let n;
    n = import_xml_builder.XmlNode.of(_MLS, input[key]);
    entryNode.c(n.n(_v));
    return entryNode;
  });
}, "se_S3UserMetadata");
var se_SelectionCriteria = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SCe);
  if (input[_Del] != null) {
    bn.c(import_xml_builder.XmlNode.of(_SLPLD, input[_Del]).n(_Del));
  }
  if (input[_MDa] != null) {
    bn.c(import_xml_builder.XmlNode.of(_SLPLMD, String(input[_MDa])).n(_MDa));
  }
  if (input[_MSBP] != null) {
    bn.c(import_xml_builder.XmlNode.of(_MSBP, String(input[_MSBP])).n(_MSBP));
  }
  return bn;
}, "se_SelectionCriteria");
var se_SourceSelectionCriteria = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SSC);
  if (input[_SKEO] != null) {
    bn.c(se_SseKmsEncryptedObjects(input[_SKEO], context).n(_SKEO));
  }
  if (input[_RM] != null) {
    bn.c(se_ReplicaModifications(input[_RM], context).n(_RM));
  }
  return bn;
}, "se_SourceSelectionCriteria");
var se_SSEKMS = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SK);
  if (input[_KI] != null) {
    bn.c(import_xml_builder.XmlNode.of(_SSEKMSKI, input[_KI]).n(_KI));
  }
  return bn;
}, "se_SSEKMS");
var se_SseKmsEncryptedObjects = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SKEO);
  if (input[_S] != null) {
    bn.c(import_xml_builder.XmlNode.of(_SKEOS, input[_S]).n(_S));
  }
  return bn;
}, "se_SseKmsEncryptedObjects");
var se_SSEKMSEncryption = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SK);
  if (input[_KI] != null) {
    bn.c(import_xml_builder.XmlNode.of(_KKAS, input[_KI]).n(_KI));
  }
  return bn;
}, "se_SSEKMSEncryption");
var se_SSES3 = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SS);
  return bn;
}, "se_SSES3");
var se_SSES3Encryption = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SS);
  return bn;
}, "se_SSES3Encryption");
var se_StorageClassList = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    const n = import_xml_builder.XmlNode.of(_SSCt, entry);
    return n.n(_m);
  });
}, "se_StorageClassList");
var se_StorageLensAwsOrg = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SLAO);
  if (input[_Ar] != null) {
    bn.c(import_xml_builder.XmlNode.of(_AOA, input[_Ar]).n(_Ar));
  }
  return bn;
}, "se_StorageLensAwsOrg");
var se_StorageLensConfiguration = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SLC);
  if (input[_Id_] != null) {
    bn.c(import_xml_builder.XmlNode.of(_CI, input[_Id_]).n(_Id_));
  }
  if (input[_AL] != null) {
    bn.c(se_AccountLevel(input[_AL], context).n(_AL));
  }
  if (input[_I] != null) {
    bn.c(se_Include(input[_I], context).n(_I));
  }
  if (input[_Ex] != null) {
    bn.c(se__Exclude(input[_Ex], context).n(_Ex));
  }
  if (input[_DE] != null) {
    bn.c(se_StorageLensDataExport(input[_DE], context).n(_DE));
  }
  if (input[_IE] != null) {
    bn.c(import_xml_builder.XmlNode.of(_IE, String(input[_IE])).n(_IE));
  }
  if (input[_AOw] != null) {
    bn.c(se_StorageLensAwsOrg(input[_AOw], context).n(_AOw));
  }
  bn.cc(input, _SLA);
  return bn;
}, "se_StorageLensConfiguration");
var se_StorageLensDataExport = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SLDE);
  if (input[_SBD] != null) {
    bn.c(se_S3BucketDestination(input[_SBD], context).n(_SBD));
  }
  if (input[_CWM] != null) {
    bn.c(se_CloudWatchMetrics(input[_CWM], context).n(_CWM));
  }
  return bn;
}, "se_StorageLensDataExport");
var se_StorageLensDataExportEncryption = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SLDEE);
  if (input[_SSES] != null) {
    bn.c(se_SSES3(input[_SSES], context).n(_SS));
  }
  if (input[_SSEKMS] != null) {
    bn.c(se_SSEKMS(input[_SSEKMS], context).n(_SK));
  }
  return bn;
}, "se_StorageLensDataExportEncryption");
var se_StorageLensGroup = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SLG);
  if (input[_N] != null) {
    bn.c(import_xml_builder.XmlNode.of(_SLGN, input[_N]).n(_N));
  }
  if (input[_Fil] != null) {
    bn.c(se_StorageLensGroupFilter(input[_Fil], context).n(_Fil));
  }
  bn.cc(input, _SLGA);
  return bn;
}, "se_StorageLensGroup");
var se_StorageLensGroupAndOperator = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SLGAO);
  bn.lc(input, "MatchAnyPrefix", "MatchAnyPrefix", () => se_MatchAnyPrefix(input[_MAP], context));
  bn.lc(input, "MatchAnySuffix", "MatchAnySuffix", () => se_MatchAnySuffix(input[_MAS], context));
  bn.lc(input, "MatchAnyTag", "MatchAnyTag", () => se_MatchAnyTag(input[_MAT], context));
  if (input[_MOA] != null) {
    bn.c(se_MatchObjectAge(input[_MOA], context).n(_MOA));
  }
  if (input[_MOS] != null) {
    bn.c(se_MatchObjectSize(input[_MOS], context).n(_MOS));
  }
  return bn;
}, "se_StorageLensGroupAndOperator");
var se_StorageLensGroupFilter = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SLGF);
  bn.lc(input, "MatchAnyPrefix", "MatchAnyPrefix", () => se_MatchAnyPrefix(input[_MAP], context));
  bn.lc(input, "MatchAnySuffix", "MatchAnySuffix", () => se_MatchAnySuffix(input[_MAS], context));
  bn.lc(input, "MatchAnyTag", "MatchAnyTag", () => se_MatchAnyTag(input[_MAT], context));
  if (input[_MOA] != null) {
    bn.c(se_MatchObjectAge(input[_MOA], context).n(_MOA));
  }
  if (input[_MOS] != null) {
    bn.c(se_MatchObjectSize(input[_MOS], context).n(_MOS));
  }
  if (input[_An] != null) {
    bn.c(se_StorageLensGroupAndOperator(input[_An], context).n(_An));
  }
  if (input[_Or_] != null) {
    bn.c(se_StorageLensGroupOrOperator(input[_Or_], context).n(_Or_));
  }
  return bn;
}, "se_StorageLensGroupFilter");
var se_StorageLensGroupLevel = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SLGLt);
  if (input[_SCe] != null) {
    bn.c(se_StorageLensGroupLevelSelectionCriteria(input[_SCe], context).n(_SCe));
  }
  return bn;
}, "se_StorageLensGroupLevel");
var se_StorageLensGroupLevelExclude = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    const n = import_xml_builder.XmlNode.of(_SLGA, entry);
    return n.n(_Ar);
  });
}, "se_StorageLensGroupLevelExclude");
var se_StorageLensGroupLevelInclude = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    const n = import_xml_builder.XmlNode.of(_SLGA, entry);
    return n.n(_Ar);
  });
}, "se_StorageLensGroupLevelInclude");
var se_StorageLensGroupLevelSelectionCriteria = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SLGLSC);
  bn.lc(input, "Include", "Include", () => se_StorageLensGroupLevelInclude(input[_I], context));
  bn.lc(input, "Exclude", "Exclude", () => se_StorageLensGroupLevelExclude(input[_Ex], context));
  return bn;
}, "se_StorageLensGroupLevelSelectionCriteria");
var se_StorageLensGroupOrOperator = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SLGOO);
  bn.lc(input, "MatchAnyPrefix", "MatchAnyPrefix", () => se_MatchAnyPrefix(input[_MAP], context));
  bn.lc(input, "MatchAnySuffix", "MatchAnySuffix", () => se_MatchAnySuffix(input[_MAS], context));
  bn.lc(input, "MatchAnyTag", "MatchAnyTag", () => se_MatchAnyTag(input[_MAT], context));
  if (input[_MOA] != null) {
    bn.c(se_MatchObjectAge(input[_MOA], context).n(_MOA));
  }
  if (input[_MOS] != null) {
    bn.c(se_MatchObjectSize(input[_MOS], context).n(_MOS));
  }
  return bn;
}, "se_StorageLensGroupOrOperator");
var se_StorageLensTag = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_SLT);
  if (input[_K] != null) {
    bn.c(import_xml_builder.XmlNode.of(_TKS, input[_K]).n(_K));
  }
  if (input[_V] != null) {
    bn.c(import_xml_builder.XmlNode.of(_TVS, input[_V]).n(_V));
  }
  return bn;
}, "se_StorageLensTag");
var se_StorageLensTags = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    const n = se_StorageLensTag(entry, context);
    return n.n(_Tag);
  });
}, "se_StorageLensTags");
var se_Tag = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_Tag);
  if (input[_K] != null) {
    bn.c(import_xml_builder.XmlNode.of(_TKS, input[_K]).n(_K));
  }
  if (input[_V] != null) {
    bn.c(import_xml_builder.XmlNode.of(_TVS, input[_V]).n(_V));
  }
  return bn;
}, "se_Tag");
var se_Tagging = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_Tagg);
  bn.lc(input, "TagSet", "TagSet", () => se_S3TagSet(input[_TS], context));
  return bn;
}, "se_Tagging");
var se_TagList = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    const n = se_Tag(entry, context);
    return n.n(_Tag);
  });
}, "se_TagList");
var se_Transition = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_Tra);
  if (input[_Da] != null) {
    bn.c(import_xml_builder.XmlNode.of(_Da, input[_Da].toISOString().split(".")[0] + "Z").n(_Da));
  }
  if (input[_Day] != null) {
    bn.c(import_xml_builder.XmlNode.of(_Day, String(input[_Day])).n(_Day));
  }
  if (input[_SC] != null) {
    bn.c(import_xml_builder.XmlNode.of(_TSC, input[_SC]).n(_SC));
  }
  return bn;
}, "se_Transition");
var se_TransitionList = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    const n = se_Transition(entry, context);
    return n.n(_Tra);
  });
}, "se_TransitionList");
var se_UserArguments = /* @__PURE__ */ __name((input, context) => {
  return Object.keys(input).filter((key) => input[key] != null).map((key) => {
    const entryNode = new import_xml_builder.XmlNode("entry");
    const keyNode = import_xml_builder.XmlNode.of(_NEMLS, key).n("key");
    entryNode.c(keyNode);
    let n;
    n = import_xml_builder.XmlNode.of(_MLS, input[key]);
    entryNode.c(n.n(_v));
    return entryNode;
  });
}, "se_UserArguments");
var se_VersioningConfiguration = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_VCe);
  if (input[_MFAD] != null) {
    bn.c(import_xml_builder.XmlNode.of(_MFAD, input[_MFAD]).n(_MD));
  }
  if (input[_S] != null) {
    bn.c(import_xml_builder.XmlNode.of(_BVS, input[_S]).n(_S));
  }
  return bn;
}, "se_VersioningConfiguration");
var se_VpcConfiguration = /* @__PURE__ */ __name((input, context) => {
  const bn = new import_xml_builder.XmlNode(_VC);
  bn.cc(input, _VI);
  return bn;
}, "se_VpcConfiguration");
var de_AbortIncompleteMultipartUpload = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DAI] != null) {
    contents[_DAI] = (0, import_smithy_client.strictParseInt32)(output[_DAI]);
  }
  return contents;
}, "de_AbortIncompleteMultipartUpload");
var de_AccessControlTranslation = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Ow] != null) {
    contents[_Ow] = (0, import_smithy_client.expectString)(output[_Ow]);
  }
  return contents;
}, "de_AccessControlTranslation");
var de_AccessGrantsInstancesList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_ListAccessGrantsInstanceEntry(entry, context);
  });
}, "de_AccessGrantsInstancesList");
var de_AccessGrantsList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_ListAccessGrantEntry(entry, context);
  });
}, "de_AccessGrantsList");
var de_AccessGrantsLocationConfiguration = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_SSP] != null) {
    contents[_SSP] = (0, import_smithy_client.expectString)(output[_SSP]);
  }
  return contents;
}, "de_AccessGrantsLocationConfiguration");
var de_AccessGrantsLocationsList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_ListAccessGrantsLocationsEntry(entry, context);
  });
}, "de_AccessGrantsLocationsList");
var de_AccessPoint = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_N] != null) {
    contents[_N] = (0, import_smithy_client.expectString)(output[_N]);
  }
  if (output[_NO] != null) {
    contents[_NO] = (0, import_smithy_client.expectString)(output[_NO]);
  }
  if (output[_VC] != null) {
    contents[_VC] = de_VpcConfiguration(output[_VC], context);
  }
  if (output[_B] != null) {
    contents[_B] = (0, import_smithy_client.expectString)(output[_B]);
  }
  if (output[_APA] != null) {
    contents[_APA] = (0, import_smithy_client.expectString)(output[_APA]);
  }
  if (output[_A] != null) {
    contents[_A] = (0, import_smithy_client.expectString)(output[_A]);
  }
  if (output[_BAI] != null) {
    contents[_BAI] = (0, import_smithy_client.expectString)(output[_BAI]);
  }
  return contents;
}, "de_AccessPoint");
var de_AccessPointList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_AccessPoint(entry, context);
  });
}, "de_AccessPointList");
var de_AccountLevel = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_AM] != null) {
    contents[_AM] = de_ActivityMetrics(output[_AM], context);
  }
  if (output[_BL] != null) {
    contents[_BL] = de_BucketLevel(output[_BL], context);
  }
  if (output[_ACOM] != null) {
    contents[_ACOM] = de_AdvancedCostOptimizationMetrics(output[_ACOM], context);
  }
  if (output[_ADPM] != null) {
    contents[_ADPM] = de_AdvancedDataProtectionMetrics(output[_ADPM], context);
  }
  if (output[_DSCM] != null) {
    contents[_DSCM] = de_DetailedStatusCodesMetrics(output[_DSCM], context);
  }
  if (output[_SLGLt] != null) {
    contents[_SLGLt] = de_StorageLensGroupLevel(output[_SLGLt], context);
  }
  return contents;
}, "de_AccountLevel");
var de_ActivityMetrics = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_IE] != null) {
    contents[_IE] = (0, import_smithy_client.parseBoolean)(output[_IE]);
  }
  return contents;
}, "de_ActivityMetrics");
var de_AdvancedCostOptimizationMetrics = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_IE] != null) {
    contents[_IE] = (0, import_smithy_client.parseBoolean)(output[_IE]);
  }
  return contents;
}, "de_AdvancedCostOptimizationMetrics");
var de_AdvancedDataProtectionMetrics = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_IE] != null) {
    contents[_IE] = (0, import_smithy_client.parseBoolean)(output[_IE]);
  }
  return contents;
}, "de_AdvancedDataProtectionMetrics");
var de_AsyncErrorDetails = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Co] != null) {
    contents[_Co] = (0, import_smithy_client.expectString)(output[_Co]);
  }
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  if (output[_Res] != null) {
    contents[_Res] = (0, import_smithy_client.expectString)(output[_Res]);
  }
  if (output[_RI] != null) {
    contents[_RI] = (0, import_smithy_client.expectString)(output[_RI]);
  }
  return contents;
}, "de_AsyncErrorDetails");
var de_AsyncOperation = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CTr] != null) {
    contents[_CTr] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CTr]));
  }
  if (output[_O] != null) {
    contents[_O] = (0, import_smithy_client.expectString)(output[_O]);
  }
  if (output[_RTARN] != null) {
    contents[_RTARN] = (0, import_smithy_client.expectString)(output[_RTARN]);
  }
  if (output[_RPe] != null) {
    contents[_RPe] = de_AsyncRequestParameters(output[_RPe], context);
  }
  if (output[_RSeq] != null) {
    contents[_RSeq] = (0, import_smithy_client.expectString)(output[_RSeq]);
  }
  if (output[_RD] != null) {
    contents[_RD] = de_AsyncResponseDetails(output[_RD], context);
  }
  return contents;
}, "de_AsyncOperation");
var de_AsyncRequestParameters = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CMRAPR] != null) {
    contents[_CMRAPR] = de_CreateMultiRegionAccessPointInput(output[_CMRAPR], context);
  }
  if (output[_DMRAPR] != null) {
    contents[_DMRAPR] = de_DeleteMultiRegionAccessPointInput(output[_DMRAPR], context);
  }
  if (output[_PMRAPPR] != null) {
    contents[_PMRAPPR] = de_PutMultiRegionAccessPointPolicyInput(output[_PMRAPPR], context);
  }
  return contents;
}, "de_AsyncRequestParameters");
var de_AsyncResponseDetails = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_MRAPD] != null) {
    contents[_MRAPD] = de_MultiRegionAccessPointsAsyncResponse(output[_MRAPD], context);
  }
  if (output[_ED] != null) {
    contents[_ED] = de_AsyncErrorDetails(output[_ED], context);
  }
  return contents;
}, "de_AsyncResponseDetails");
var de_AwsLambdaTransformation = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_FA] != null) {
    contents[_FA] = (0, import_smithy_client.expectString)(output[_FA]);
  }
  if (output[_FP] != null) {
    contents[_FP] = (0, import_smithy_client.expectString)(output[_FP]);
  }
  return contents;
}, "de_AwsLambdaTransformation");
var de_BucketLevel = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_AM] != null) {
    contents[_AM] = de_ActivityMetrics(output[_AM], context);
  }
  if (output[_PL] != null) {
    contents[_PL] = de_PrefixLevel(output[_PL], context);
  }
  if (output[_ACOM] != null) {
    contents[_ACOM] = de_AdvancedCostOptimizationMetrics(output[_ACOM], context);
  }
  if (output[_ADPM] != null) {
    contents[_ADPM] = de_AdvancedDataProtectionMetrics(output[_ADPM], context);
  }
  if (output[_DSCM] != null) {
    contents[_DSCM] = de_DetailedStatusCodesMetrics(output[_DSCM], context);
  }
  return contents;
}, "de_BucketLevel");
var de_Buckets = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_Buckets");
var de_CloudWatchMetrics = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_IE] != null) {
    contents[_IE] = (0, import_smithy_client.parseBoolean)(output[_IE]);
  }
  return contents;
}, "de_CloudWatchMetrics");
var de_CreateMultiRegionAccessPointInput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_N] != null) {
    contents[_N] = (0, import_smithy_client.expectString)(output[_N]);
  }
  if (output[_PAB] != null) {
    contents[_PAB] = de_PublicAccessBlockConfiguration(output[_PAB], context);
  }
  if (output.Regions === "") {
    contents[_Re] = [];
  } else if (output[_Re] != null && output[_Re][_Reg] != null) {
    contents[_Re] = de_RegionCreationList((0, import_smithy_client.getArrayIfSingleItem)(output[_Re][_Reg]), context);
  }
  return contents;
}, "de_CreateMultiRegionAccessPointInput");
var de_Credentials = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_AKI] != null) {
    contents[_AKI] = (0, import_smithy_client.expectString)(output[_AKI]);
  }
  if (output[_SAK] != null) {
    contents[_SAK] = (0, import_smithy_client.expectString)(output[_SAK]);
  }
  if (output[_STe] != null) {
    contents[_STe] = (0, import_smithy_client.expectString)(output[_STe]);
  }
  if (output[_Exp] != null) {
    contents[_Exp] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_Exp]));
  }
  return contents;
}, "de_Credentials");
var de_DeleteMarkerReplication = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_S] != null) {
    contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
  }
  return contents;
}, "de_DeleteMarkerReplication");
var de_DeleteMultiRegionAccessPointInput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_N] != null) {
    contents[_N] = (0, import_smithy_client.expectString)(output[_N]);
  }
  return contents;
}, "de_DeleteMultiRegionAccessPointInput");
var de_Destination = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Ac] != null) {
    contents[_Ac] = (0, import_smithy_client.expectString)(output[_Ac]);
  }
  if (output[_B] != null) {
    contents[_B] = (0, import_smithy_client.expectString)(output[_B]);
  }
  if (output[_RT] != null) {
    contents[_RT] = de_ReplicationTime(output[_RT], context);
  }
  if (output[_ACT] != null) {
    contents[_ACT] = de_AccessControlTranslation(output[_ACT], context);
  }
  if (output[_EC] != null) {
    contents[_EC] = de_EncryptionConfiguration(output[_EC], context);
  }
  if (output[_Met] != null) {
    contents[_Met] = de_Metrics(output[_Met], context);
  }
  if (output[_SC] != null) {
    contents[_SC] = (0, import_smithy_client.expectString)(output[_SC]);
  }
  return contents;
}, "de_Destination");
var de_DetailedStatusCodesMetrics = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_IE] != null) {
    contents[_IE] = (0, import_smithy_client.parseBoolean)(output[_IE]);
  }
  return contents;
}, "de_DetailedStatusCodesMetrics");
var de_EncryptionConfiguration = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_RKKID] != null) {
    contents[_RKKID] = (0, import_smithy_client.expectString)(output[_RKKID]);
  }
  return contents;
}, "de_EncryptionConfiguration");
var de_Endpoints = /* @__PURE__ */ __name((output, context) => {
  return output.reduce((acc, pair) => {
    if (pair["value"] === null) {
      return acc;
    }
    acc[pair["key"]] = (0, import_smithy_client.expectString)(pair["value"]);
    return acc;
  }, {});
}, "de_Endpoints");
var de_EstablishedMultiRegionAccessPointPolicy = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Po] != null) {
    contents[_Po] = (0, import_smithy_client.expectString)(output[_Po]);
  }
  return contents;
}, "de_EstablishedMultiRegionAccessPointPolicy");
var de__Exclude = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Buckets === "") {
    contents[_Bu] = [];
  } else if (output[_Bu] != null && output[_Bu][_Ar] != null) {
    contents[_Bu] = de_Buckets((0, import_smithy_client.getArrayIfSingleItem)(output[_Bu][_Ar]), context);
  }
  if (output.Regions === "") {
    contents[_Re] = [];
  } else if (output[_Re] != null && output[_Re][_Reg] != null) {
    contents[_Re] = de_Regions((0, import_smithy_client.getArrayIfSingleItem)(output[_Re][_Reg]), context);
  }
  return contents;
}, "de__Exclude");
var de_ExistingObjectReplication = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_S] != null) {
    contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
  }
  return contents;
}, "de_ExistingObjectReplication");
var de_GeneratedManifestEncryption = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_SS] != null) {
    contents[_SSES] = de_SSES3Encryption(output[_SS], context);
  }
  if (output[_SK] != null) {
    contents[_SSEKMS] = de_SSEKMSEncryption(output[_SK], context);
  }
  return contents;
}, "de_GeneratedManifestEncryption");
var de_Grantee = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_GT] != null) {
    contents[_GT] = (0, import_smithy_client.expectString)(output[_GT]);
  }
  if (output[_GI] != null) {
    contents[_GI] = (0, import_smithy_client.expectString)(output[_GI]);
  }
  return contents;
}, "de_Grantee");
var de_Include = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Buckets === "") {
    contents[_Bu] = [];
  } else if (output[_Bu] != null && output[_Bu][_Ar] != null) {
    contents[_Bu] = de_Buckets((0, import_smithy_client.getArrayIfSingleItem)(output[_Bu][_Ar]), context);
  }
  if (output.Regions === "") {
    contents[_Re] = [];
  } else if (output[_Re] != null && output[_Re][_Reg] != null) {
    contents[_Re] = de_Regions((0, import_smithy_client.getArrayIfSingleItem)(output[_Re][_Reg]), context);
  }
  return contents;
}, "de_Include");
var de_JobDescriptor = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_JI] != null) {
    contents[_JI] = (0, import_smithy_client.expectString)(output[_JI]);
  }
  if (output[_CR] != null) {
    contents[_CR] = (0, import_smithy_client.parseBoolean)(output[_CR]);
  }
  if (output[_D] != null) {
    contents[_D] = (0, import_smithy_client.expectString)(output[_D]);
  }
  if (output[_JA] != null) {
    contents[_JA] = (0, import_smithy_client.expectString)(output[_JA]);
  }
  if (output[_S] != null) {
    contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
  }
  if (output[_M] != null) {
    contents[_M] = de_JobManifest(output[_M], context);
  }
  if (output[_O] != null) {
    contents[_O] = de_JobOperation(output[_O], context);
  }
  if (output[_Pr] != null) {
    contents[_Pr] = (0, import_smithy_client.strictParseInt32)(output[_Pr]);
  }
  if (output[_PSr] != null) {
    contents[_PSr] = de_JobProgressSummary(output[_PSr], context);
  }
  if (output[_SUR] != null) {
    contents[_SUR] = (0, import_smithy_client.expectString)(output[_SUR]);
  }
  if (output.FailureReasons === "") {
    contents[_FR] = [];
  } else if (output[_FR] != null && output[_FR][_m] != null) {
    contents[_FR] = de_JobFailureList((0, import_smithy_client.getArrayIfSingleItem)(output[_FR][_m]), context);
  }
  if (output[_R] != null) {
    contents[_R] = de_JobReport(output[_R], context);
  }
  if (output[_CTr] != null) {
    contents[_CTr] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CTr]));
  }
  if (output[_TD] != null) {
    contents[_TD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_TD]));
  }
  if (output[_RA] != null) {
    contents[_RA] = (0, import_smithy_client.expectString)(output[_RA]);
  }
  if (output[_SD] != null) {
    contents[_SD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_SD]));
  }
  if (output[_SCu] != null) {
    contents[_SCu] = (0, import_smithy_client.expectString)(output[_SCu]);
  }
  if (output.ManifestGenerator === "") {
  } else if (output[_MG] != null) {
    contents[_MG] = de_JobManifestGenerator((0, import_smithy_client.expectUnion)(output[_MG]), context);
  }
  if (output[_GMD] != null) {
    contents[_GMD] = de_S3GeneratedManifestDescriptor(output[_GMD], context);
  }
  return contents;
}, "de_JobDescriptor");
var de_JobFailure = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_FC] != null) {
    contents[_FC] = (0, import_smithy_client.expectString)(output[_FC]);
  }
  if (output[_FRa] != null) {
    contents[_FRa] = (0, import_smithy_client.expectString)(output[_FRa]);
  }
  return contents;
}, "de_JobFailure");
var de_JobFailureList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_JobFailure(entry, context);
  });
}, "de_JobFailureList");
var de_JobListDescriptor = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_JI] != null) {
    contents[_JI] = (0, import_smithy_client.expectString)(output[_JI]);
  }
  if (output[_D] != null) {
    contents[_D] = (0, import_smithy_client.expectString)(output[_D]);
  }
  if (output[_O] != null) {
    contents[_O] = (0, import_smithy_client.expectString)(output[_O]);
  }
  if (output[_Pr] != null) {
    contents[_Pr] = (0, import_smithy_client.strictParseInt32)(output[_Pr]);
  }
  if (output[_S] != null) {
    contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
  }
  if (output[_CTr] != null) {
    contents[_CTr] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CTr]));
  }
  if (output[_TD] != null) {
    contents[_TD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_TD]));
  }
  if (output[_PSr] != null) {
    contents[_PSr] = de_JobProgressSummary(output[_PSr], context);
  }
  return contents;
}, "de_JobListDescriptor");
var de_JobListDescriptorList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_JobListDescriptor(entry, context);
  });
}, "de_JobListDescriptorList");
var de_JobManifest = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Sp] != null) {
    contents[_Sp] = de_JobManifestSpec(output[_Sp], context);
  }
  if (output[_L] != null) {
    contents[_L] = de_JobManifestLocation(output[_L], context);
  }
  return contents;
}, "de_JobManifest");
var de_JobManifestFieldList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_JobManifestFieldList");
var de_JobManifestGenerator = /* @__PURE__ */ __name((output, context) => {
  if (output[_SJMG] != null) {
    return {
      S3JobManifestGenerator: de_S3JobManifestGenerator(output[_SJMG], context)
    };
  }
  return { $unknown: Object.entries(output)[0] };
}, "de_JobManifestGenerator");
var de_JobManifestGeneratorFilter = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_EFR] != null) {
    contents[_EFR] = (0, import_smithy_client.parseBoolean)(output[_EFR]);
  }
  if (output[_CAr] != null) {
    contents[_CAr] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CAr]));
  }
  if (output[_CB] != null) {
    contents[_CB] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CB]));
  }
  if (output.ObjectReplicationStatuses === "") {
    contents[_ORS] = [];
  } else if (output[_ORS] != null && output[_ORS][_m] != null) {
    contents[_ORS] = de_ReplicationStatusFilterList((0, import_smithy_client.getArrayIfSingleItem)(output[_ORS][_m]), context);
  }
  if (output[_KNC] != null) {
    contents[_KNC] = de_KeyNameConstraint(output[_KNC], context);
  }
  if (output[_OSGTB] != null) {
    contents[_OSGTB] = (0, import_smithy_client.strictParseLong)(output[_OSGTB]);
  }
  if (output[_OSLTB] != null) {
    contents[_OSLTB] = (0, import_smithy_client.strictParseLong)(output[_OSLTB]);
  }
  if (output.MatchAnyStorageClass === "") {
    contents[_MASC] = [];
  } else if (output[_MASC] != null && output[_MASC][_m] != null) {
    contents[_MASC] = de_StorageClassList((0, import_smithy_client.getArrayIfSingleItem)(output[_MASC][_m]), context);
  }
  return contents;
}, "de_JobManifestGeneratorFilter");
var de_JobManifestLocation = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_OA] != null) {
    contents[_OA] = (0, import_smithy_client.expectString)(output[_OA]);
  }
  if (output[_OVI] != null) {
    contents[_OVI] = (0, import_smithy_client.expectString)(output[_OVI]);
  }
  if (output[_ET] != null) {
    contents[_ET] = (0, import_smithy_client.expectString)(output[_ET]);
  }
  return contents;
}, "de_JobManifestLocation");
var de_JobManifestSpec = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_F] != null) {
    contents[_F] = (0, import_smithy_client.expectString)(output[_F]);
  }
  if (output.Fields === "") {
    contents[_Fi] = [];
  } else if (output[_Fi] != null && output[_Fi][_m] != null) {
    contents[_Fi] = de_JobManifestFieldList((0, import_smithy_client.getArrayIfSingleItem)(output[_Fi][_m]), context);
  }
  return contents;
}, "de_JobManifestSpec");
var de_JobOperation = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_LI] != null) {
    contents[_LI] = de_LambdaInvokeOperation(output[_LI], context);
  }
  if (output[_SPOC] != null) {
    contents[_SPOC] = de_S3CopyObjectOperation(output[_SPOC], context);
  }
  if (output[_SPOA] != null) {
    contents[_SPOA] = de_S3SetObjectAclOperation(output[_SPOA], context);
  }
  if (output[_SPOT] != null) {
    contents[_SPOT] = de_S3SetObjectTaggingOperation(output[_SPOT], context);
  }
  if (output[_SDOT] != null) {
    contents[_SDOT] = de_S3DeleteObjectTaggingOperation(output[_SDOT], context);
  }
  if (output[_SIRO] != null) {
    contents[_SIRO] = de_S3InitiateRestoreObjectOperation(output[_SIRO], context);
  }
  if (output[_SPOLH] != null) {
    contents[_SPOLH] = de_S3SetObjectLegalHoldOperation(output[_SPOLH], context);
  }
  if (output[_SPOR] != null) {
    contents[_SPOR] = de_S3SetObjectRetentionOperation(output[_SPOR], context);
  }
  if (output[_SRO] != null) {
    contents[_SRO] = de_S3ReplicateObjectOperation(output[_SRO], context);
  }
  return contents;
}, "de_JobOperation");
var de_JobProgressSummary = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_TNOT] != null) {
    contents[_TNOT] = (0, import_smithy_client.strictParseLong)(output[_TNOT]);
  }
  if (output[_NOTS] != null) {
    contents[_NOTS] = (0, import_smithy_client.strictParseLong)(output[_NOTS]);
  }
  if (output[_NOTF] != null) {
    contents[_NOTF] = (0, import_smithy_client.strictParseLong)(output[_NOTF]);
  }
  if (output[_Tim] != null) {
    contents[_Tim] = de_JobTimers(output[_Tim], context);
  }
  return contents;
}, "de_JobProgressSummary");
var de_JobReport = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_B] != null) {
    contents[_B] = (0, import_smithy_client.expectString)(output[_B]);
  }
  if (output[_F] != null) {
    contents[_F] = (0, import_smithy_client.expectString)(output[_F]);
  }
  if (output[_En] != null) {
    contents[_En] = (0, import_smithy_client.parseBoolean)(output[_En]);
  }
  if (output[_Pre] != null) {
    contents[_Pre] = (0, import_smithy_client.expectString)(output[_Pre]);
  }
  if (output[_RS] != null) {
    contents[_RS] = (0, import_smithy_client.expectString)(output[_RS]);
  }
  return contents;
}, "de_JobReport");
var de_JobTimers = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_ETIAS] != null) {
    contents[_ETIAS] = (0, import_smithy_client.strictParseLong)(output[_ETIAS]);
  }
  return contents;
}, "de_JobTimers");
var de_KeyNameConstraint = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.MatchAnyPrefix === "") {
    contents[_MAP] = [];
  } else if (output[_MAP] != null && output[_MAP][_m] != null) {
    contents[_MAP] = de_NonEmptyMaxLength1024StringList((0, import_smithy_client.getArrayIfSingleItem)(output[_MAP][_m]), context);
  }
  if (output.MatchAnySuffix === "") {
    contents[_MAS] = [];
  } else if (output[_MAS] != null && output[_MAS][_m] != null) {
    contents[_MAS] = de_NonEmptyMaxLength1024StringList((0, import_smithy_client.getArrayIfSingleItem)(output[_MAS][_m]), context);
  }
  if (output.MatchAnySubstring === "") {
    contents[_MASa] = [];
  } else if (output[_MASa] != null && output[_MASa][_m] != null) {
    contents[_MASa] = de_NonEmptyMaxLength1024StringList((0, import_smithy_client.getArrayIfSingleItem)(output[_MASa][_m]), context);
  }
  return contents;
}, "de_KeyNameConstraint");
var de_LambdaInvokeOperation = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_FA] != null) {
    contents[_FA] = (0, import_smithy_client.expectString)(output[_FA]);
  }
  if (output[_ISV] != null) {
    contents[_ISV] = (0, import_smithy_client.expectString)(output[_ISV]);
  }
  if (output.UserArguments === "") {
    contents[_UA] = {};
  } else if (output[_UA] != null && output[_UA][_e] != null) {
    contents[_UA] = de_UserArguments((0, import_smithy_client.getArrayIfSingleItem)(output[_UA][_e]), context);
  }
  return contents;
}, "de_LambdaInvokeOperation");
var de_LifecycleExpiration = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Da] != null) {
    contents[_Da] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_Da]));
  }
  if (output[_Day] != null) {
    contents[_Day] = (0, import_smithy_client.strictParseInt32)(output[_Day]);
  }
  if (output[_EODM] != null) {
    contents[_EODM] = (0, import_smithy_client.parseBoolean)(output[_EODM]);
  }
  return contents;
}, "de_LifecycleExpiration");
var de_LifecycleRule = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Exp] != null) {
    contents[_Exp] = de_LifecycleExpiration(output[_Exp], context);
  }
  if (output[_ID] != null) {
    contents[_ID] = (0, import_smithy_client.expectString)(output[_ID]);
  }
  if (output[_Fil] != null) {
    contents[_Fil] = de_LifecycleRuleFilter(output[_Fil], context);
  }
  if (output[_S] != null) {
    contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
  }
  if (output.Transitions === "") {
    contents[_Tr] = [];
  } else if (output[_Tr] != null && output[_Tr][_Tra] != null) {
    contents[_Tr] = de_TransitionList((0, import_smithy_client.getArrayIfSingleItem)(output[_Tr][_Tra]), context);
  }
  if (output.NoncurrentVersionTransitions === "") {
    contents[_NVT] = [];
  } else if (output[_NVT] != null && output[_NVT][_NVTo] != null) {
    contents[_NVT] = de_NoncurrentVersionTransitionList((0, import_smithy_client.getArrayIfSingleItem)(output[_NVT][_NVTo]), context);
  }
  if (output[_NVE] != null) {
    contents[_NVE] = de_NoncurrentVersionExpiration(output[_NVE], context);
  }
  if (output[_AIMU] != null) {
    contents[_AIMU] = de_AbortIncompleteMultipartUpload(output[_AIMU], context);
  }
  return contents;
}, "de_LifecycleRule");
var de_LifecycleRuleAndOperator = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Pre] != null) {
    contents[_Pre] = (0, import_smithy_client.expectString)(output[_Pre]);
  }
  if (output.Tags === "") {
    contents[_T] = [];
  } else if (output[_T] != null && output[_T][_m] != null) {
    contents[_T] = de_S3TagSet((0, import_smithy_client.getArrayIfSingleItem)(output[_T][_m]), context);
  }
  if (output[_OSGT] != null) {
    contents[_OSGT] = (0, import_smithy_client.strictParseLong)(output[_OSGT]);
  }
  if (output[_OSLT] != null) {
    contents[_OSLT] = (0, import_smithy_client.strictParseLong)(output[_OSLT]);
  }
  return contents;
}, "de_LifecycleRuleAndOperator");
var de_LifecycleRuleFilter = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Pre] != null) {
    contents[_Pre] = (0, import_smithy_client.expectString)(output[_Pre]);
  }
  if (output[_Tag] != null) {
    contents[_Tag] = de_S3Tag(output[_Tag], context);
  }
  if (output[_An] != null) {
    contents[_An] = de_LifecycleRuleAndOperator(output[_An], context);
  }
  if (output[_OSGT] != null) {
    contents[_OSGT] = (0, import_smithy_client.strictParseLong)(output[_OSGT]);
  }
  if (output[_OSLT] != null) {
    contents[_OSLT] = (0, import_smithy_client.strictParseLong)(output[_OSLT]);
  }
  return contents;
}, "de_LifecycleRuleFilter");
var de_LifecycleRules = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_LifecycleRule(entry, context);
  });
}, "de_LifecycleRules");
var de_ListAccessGrantEntry = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CA] != null) {
    contents[_CA] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CA]));
  }
  if (output[_AGI] != null) {
    contents[_AGI] = (0, import_smithy_client.expectString)(output[_AGI]);
  }
  if (output[_AGA] != null) {
    contents[_AGA] = (0, import_smithy_client.expectString)(output[_AGA]);
  }
  if (output[_G] != null) {
    contents[_G] = de_Grantee(output[_G], context);
  }
  if (output[_P] != null) {
    contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
  }
  if (output[_AGLI] != null) {
    contents[_AGLI] = (0, import_smithy_client.expectString)(output[_AGLI]);
  }
  if (output[_AGLC] != null) {
    contents[_AGLC] = de_AccessGrantsLocationConfiguration(output[_AGLC], context);
  }
  if (output[_GS] != null) {
    contents[_GS] = (0, import_smithy_client.expectString)(output[_GS]);
  }
  if (output[_AA] != null) {
    contents[_AA] = (0, import_smithy_client.expectString)(output[_AA]);
  }
  return contents;
}, "de_ListAccessGrantEntry");
var de_ListAccessGrantsInstanceEntry = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_AGII] != null) {
    contents[_AGII] = (0, import_smithy_client.expectString)(output[_AGII]);
  }
  if (output[_AGIA] != null) {
    contents[_AGIA] = (0, import_smithy_client.expectString)(output[_AGIA]);
  }
  if (output[_CA] != null) {
    contents[_CA] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CA]));
  }
  if (output[_ICA] != null) {
    contents[_ICA] = (0, import_smithy_client.expectString)(output[_ICA]);
  }
  return contents;
}, "de_ListAccessGrantsInstanceEntry");
var de_ListAccessGrantsLocationsEntry = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CA] != null) {
    contents[_CA] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CA]));
  }
  if (output[_AGLI] != null) {
    contents[_AGLI] = (0, import_smithy_client.expectString)(output[_AGLI]);
  }
  if (output[_AGLA] != null) {
    contents[_AGLA] = (0, import_smithy_client.expectString)(output[_AGLA]);
  }
  if (output[_LS] != null) {
    contents[_LS] = (0, import_smithy_client.expectString)(output[_LS]);
  }
  if (output[_IAMRA] != null) {
    contents[_IAMRA] = (0, import_smithy_client.expectString)(output[_IAMRA]);
  }
  return contents;
}, "de_ListAccessGrantsLocationsEntry");
var de_ListStorageLensConfigurationEntry = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Id_] != null) {
    contents[_Id_] = (0, import_smithy_client.expectString)(output[_Id_]);
  }
  if (output[_SLA] != null) {
    contents[_SLA] = (0, import_smithy_client.expectString)(output[_SLA]);
  }
  if (output[_HR] != null) {
    contents[_HR] = (0, import_smithy_client.expectString)(output[_HR]);
  }
  if (output[_IE] != null) {
    contents[_IE] = (0, import_smithy_client.parseBoolean)(output[_IE]);
  }
  return contents;
}, "de_ListStorageLensConfigurationEntry");
var de_ListStorageLensGroupEntry = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_N] != null) {
    contents[_N] = (0, import_smithy_client.expectString)(output[_N]);
  }
  if (output[_SLGA] != null) {
    contents[_SLGA] = (0, import_smithy_client.expectString)(output[_SLGA]);
  }
  if (output[_HR] != null) {
    contents[_HR] = (0, import_smithy_client.expectString)(output[_HR]);
  }
  return contents;
}, "de_ListStorageLensGroupEntry");
var de_MatchAnyPrefix = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_MatchAnyPrefix");
var de_MatchAnySuffix = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_MatchAnySuffix");
var de_MatchAnyTag = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_S3Tag(entry, context);
  });
}, "de_MatchAnyTag");
var de_MatchObjectAge = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_DGT] != null) {
    contents[_DGT] = (0, import_smithy_client.strictParseInt32)(output[_DGT]);
  }
  if (output[_DLT] != null) {
    contents[_DLT] = (0, import_smithy_client.strictParseInt32)(output[_DLT]);
  }
  return contents;
}, "de_MatchObjectAge");
var de_MatchObjectSize = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_BGT] != null) {
    contents[_BGT] = (0, import_smithy_client.strictParseLong)(output[_BGT]);
  }
  if (output[_BLT] != null) {
    contents[_BLT] = (0, import_smithy_client.strictParseLong)(output[_BLT]);
  }
  return contents;
}, "de_MatchObjectSize");
var de_Metrics = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_S] != null) {
    contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
  }
  if (output[_ETv] != null) {
    contents[_ETv] = de_ReplicationTimeValue(output[_ETv], context);
  }
  return contents;
}, "de_Metrics");
var de_MultiRegionAccessPointPolicyDocument = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Es] != null) {
    contents[_Es] = de_EstablishedMultiRegionAccessPointPolicy(output[_Es], context);
  }
  if (output[_Pro] != null) {
    contents[_Pro] = de_ProposedMultiRegionAccessPointPolicy(output[_Pro], context);
  }
  return contents;
}, "de_MultiRegionAccessPointPolicyDocument");
var de_MultiRegionAccessPointRegionalResponse = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_N] != null) {
    contents[_N] = (0, import_smithy_client.expectString)(output[_N]);
  }
  if (output[_RSeq] != null) {
    contents[_RSeq] = (0, import_smithy_client.expectString)(output[_RSeq]);
  }
  return contents;
}, "de_MultiRegionAccessPointRegionalResponse");
var de_MultiRegionAccessPointRegionalResponseList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_MultiRegionAccessPointRegionalResponse(entry, context);
  });
}, "de_MultiRegionAccessPointRegionalResponseList");
var de_MultiRegionAccessPointReport = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_N] != null) {
    contents[_N] = (0, import_smithy_client.expectString)(output[_N]);
  }
  if (output[_A] != null) {
    contents[_A] = (0, import_smithy_client.expectString)(output[_A]);
  }
  if (output[_CA] != null) {
    contents[_CA] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CA]));
  }
  if (output[_PAB] != null) {
    contents[_PAB] = de_PublicAccessBlockConfiguration(output[_PAB], context);
  }
  if (output[_S] != null) {
    contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
  }
  if (output.Regions === "") {
    contents[_Re] = [];
  } else if (output[_Re] != null && output[_Re][_Reg] != null) {
    contents[_Re] = de_RegionReportList((0, import_smithy_client.getArrayIfSingleItem)(output[_Re][_Reg]), context);
  }
  return contents;
}, "de_MultiRegionAccessPointReport");
var de_MultiRegionAccessPointReportList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_MultiRegionAccessPointReport(entry, context);
  });
}, "de_MultiRegionAccessPointReportList");
var de_MultiRegionAccessPointRoute = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_B] != null) {
    contents[_B] = (0, import_smithy_client.expectString)(output[_B]);
  }
  if (output[_Reg] != null) {
    contents[_Reg] = (0, import_smithy_client.expectString)(output[_Reg]);
  }
  if (output[_TDP] != null) {
    contents[_TDP] = (0, import_smithy_client.strictParseInt32)(output[_TDP]);
  }
  return contents;
}, "de_MultiRegionAccessPointRoute");
var de_MultiRegionAccessPointsAsyncResponse = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Regions === "") {
    contents[_Re] = [];
  } else if (output[_Re] != null && output[_Re][_Reg] != null) {
    contents[_Re] = de_MultiRegionAccessPointRegionalResponseList((0, import_smithy_client.getArrayIfSingleItem)(output[_Re][_Reg]), context);
  }
  return contents;
}, "de_MultiRegionAccessPointsAsyncResponse");
var de_NoncurrentVersionExpiration = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_ND] != null) {
    contents[_ND] = (0, import_smithy_client.strictParseInt32)(output[_ND]);
  }
  if (output[_NNV] != null) {
    contents[_NNV] = (0, import_smithy_client.strictParseInt32)(output[_NNV]);
  }
  return contents;
}, "de_NoncurrentVersionExpiration");
var de_NoncurrentVersionTransition = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_ND] != null) {
    contents[_ND] = (0, import_smithy_client.strictParseInt32)(output[_ND]);
  }
  if (output[_SC] != null) {
    contents[_SC] = (0, import_smithy_client.expectString)(output[_SC]);
  }
  return contents;
}, "de_NoncurrentVersionTransition");
var de_NoncurrentVersionTransitionList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_NoncurrentVersionTransition(entry, context);
  });
}, "de_NoncurrentVersionTransitionList");
var de_NonEmptyMaxLength1024StringList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_NonEmptyMaxLength1024StringList");
var de_ObjectLambdaAccessPoint = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_N] != null) {
    contents[_N] = (0, import_smithy_client.expectString)(output[_N]);
  }
  if (output[_OLAPA] != null) {
    contents[_OLAPA] = (0, import_smithy_client.expectString)(output[_OLAPA]);
  }
  if (output[_A] != null) {
    contents[_A] = de_ObjectLambdaAccessPointAlias(output[_A], context);
  }
  return contents;
}, "de_ObjectLambdaAccessPoint");
var de_ObjectLambdaAccessPointAlias = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_V] != null) {
    contents[_V] = (0, import_smithy_client.expectString)(output[_V]);
  }
  if (output[_S] != null) {
    contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
  }
  return contents;
}, "de_ObjectLambdaAccessPointAlias");
var de_ObjectLambdaAccessPointList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_ObjectLambdaAccessPoint(entry, context);
  });
}, "de_ObjectLambdaAccessPointList");
var de_ObjectLambdaAllowedFeaturesList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_ObjectLambdaAllowedFeaturesList");
var de_ObjectLambdaConfiguration = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_SAP] != null) {
    contents[_SAP] = (0, import_smithy_client.expectString)(output[_SAP]);
  }
  if (output[_CWME] != null) {
    contents[_CWME] = (0, import_smithy_client.parseBoolean)(output[_CWME]);
  }
  if (output.AllowedFeatures === "") {
    contents[_AFl] = [];
  } else if (output[_AFl] != null && output[_AFl][_AF] != null) {
    contents[_AFl] = de_ObjectLambdaAllowedFeaturesList((0, import_smithy_client.getArrayIfSingleItem)(output[_AFl][_AF]), context);
  }
  if (output.TransformationConfigurations === "") {
    contents[_TC] = [];
  } else if (output[_TC] != null && output[_TC][_TCr] != null) {
    contents[_TC] = de_ObjectLambdaTransformationConfigurationsList((0, import_smithy_client.getArrayIfSingleItem)(output[_TC][_TCr]), context);
  }
  return contents;
}, "de_ObjectLambdaConfiguration");
var de_ObjectLambdaContentTransformation = /* @__PURE__ */ __name((output, context) => {
  if (output[_ALw] != null) {
    return {
      AwsLambda: de_AwsLambdaTransformation(output[_ALw], context)
    };
  }
  return { $unknown: Object.entries(output)[0] };
}, "de_ObjectLambdaContentTransformation");
var de_ObjectLambdaTransformationConfiguration = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Actions === "") {
    contents[_Act] = [];
  } else if (output[_Act] != null && output[_Act][_Acti] != null) {
    contents[_Act] = de_ObjectLambdaTransformationConfigurationActionsList(
      (0, import_smithy_client.getArrayIfSingleItem)(output[_Act][_Acti]),
      context
    );
  }
  if (output.ContentTransformation === "") {
  } else if (output[_CTo] != null) {
    contents[_CTo] = de_ObjectLambdaContentTransformation((0, import_smithy_client.expectUnion)(output[_CTo]), context);
  }
  return contents;
}, "de_ObjectLambdaTransformationConfiguration");
var de_ObjectLambdaTransformationConfigurationActionsList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_ObjectLambdaTransformationConfigurationActionsList");
var de_ObjectLambdaTransformationConfigurationsList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_ObjectLambdaTransformationConfiguration(entry, context);
  });
}, "de_ObjectLambdaTransformationConfigurationsList");
var de_PolicyStatus = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_IP] != null) {
    contents[_IP] = (0, import_smithy_client.parseBoolean)(output[_IP]);
  }
  return contents;
}, "de_PolicyStatus");
var de_PrefixLevel = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_SM] != null) {
    contents[_SM] = de_PrefixLevelStorageMetrics(output[_SM], context);
  }
  return contents;
}, "de_PrefixLevel");
var de_PrefixLevelStorageMetrics = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_IE] != null) {
    contents[_IE] = (0, import_smithy_client.parseBoolean)(output[_IE]);
  }
  if (output[_SCe] != null) {
    contents[_SCe] = de_SelectionCriteria(output[_SCe], context);
  }
  return contents;
}, "de_PrefixLevelStorageMetrics");
var de_ProposedMultiRegionAccessPointPolicy = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Po] != null) {
    contents[_Po] = (0, import_smithy_client.expectString)(output[_Po]);
  }
  return contents;
}, "de_ProposedMultiRegionAccessPointPolicy");
var de_PublicAccessBlockConfiguration = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_BPA] != null) {
    contents[_BPA] = (0, import_smithy_client.parseBoolean)(output[_BPA]);
  }
  if (output[_IPA] != null) {
    contents[_IPA] = (0, import_smithy_client.parseBoolean)(output[_IPA]);
  }
  if (output[_BPP] != null) {
    contents[_BPP] = (0, import_smithy_client.parseBoolean)(output[_BPP]);
  }
  if (output[_RPB] != null) {
    contents[_RPB] = (0, import_smithy_client.parseBoolean)(output[_RPB]);
  }
  return contents;
}, "de_PublicAccessBlockConfiguration");
var de_PutMultiRegionAccessPointPolicyInput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_N] != null) {
    contents[_N] = (0, import_smithy_client.expectString)(output[_N]);
  }
  if (output[_Po] != null) {
    contents[_Po] = (0, import_smithy_client.expectString)(output[_Po]);
  }
  return contents;
}, "de_PutMultiRegionAccessPointPolicyInput");
var de_Region = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_B] != null) {
    contents[_B] = (0, import_smithy_client.expectString)(output[_B]);
  }
  if (output[_BAI] != null) {
    contents[_BAI] = (0, import_smithy_client.expectString)(output[_BAI]);
  }
  return contents;
}, "de_Region");
var de_RegionalBucket = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_B] != null) {
    contents[_B] = (0, import_smithy_client.expectString)(output[_B]);
  }
  if (output[_BA] != null) {
    contents[_BA] = (0, import_smithy_client.expectString)(output[_BA]);
  }
  if (output[_PABE] != null) {
    contents[_PABE] = (0, import_smithy_client.parseBoolean)(output[_PABE]);
  }
  if (output[_CD] != null) {
    contents[_CD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CD]));
  }
  if (output[_OI] != null) {
    contents[_OI] = (0, import_smithy_client.expectString)(output[_OI]);
  }
  return contents;
}, "de_RegionalBucket");
var de_RegionalBucketList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_RegionalBucket(entry, context);
  });
}, "de_RegionalBucketList");
var de_RegionCreationList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_Region(entry, context);
  });
}, "de_RegionCreationList");
var de_RegionReport = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_B] != null) {
    contents[_B] = (0, import_smithy_client.expectString)(output[_B]);
  }
  if (output[_Reg] != null) {
    contents[_Reg] = (0, import_smithy_client.expectString)(output[_Reg]);
  }
  if (output[_BAI] != null) {
    contents[_BAI] = (0, import_smithy_client.expectString)(output[_BAI]);
  }
  return contents;
}, "de_RegionReport");
var de_RegionReportList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_RegionReport(entry, context);
  });
}, "de_RegionReportList");
var de_Regions = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_Regions");
var de_ReplicaModifications = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_S] != null) {
    contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
  }
  return contents;
}, "de_ReplicaModifications");
var de_ReplicationConfiguration = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Rol] != null) {
    contents[_Rol] = (0, import_smithy_client.expectString)(output[_Rol]);
  }
  if (output.Rules === "") {
    contents[_Ru] = [];
  } else if (output[_Ru] != null && output[_Ru][_Rul] != null) {
    contents[_Ru] = de_ReplicationRules((0, import_smithy_client.getArrayIfSingleItem)(output[_Ru][_Rul]), context);
  }
  return contents;
}, "de_ReplicationConfiguration");
var de_ReplicationRule = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_ID] != null) {
    contents[_ID] = (0, import_smithy_client.expectString)(output[_ID]);
  }
  if (output[_Pr] != null) {
    contents[_Pr] = (0, import_smithy_client.strictParseInt32)(output[_Pr]);
  }
  if (output[_Pre] != null) {
    contents[_Pre] = (0, import_smithy_client.expectString)(output[_Pre]);
  }
  if (output[_Fil] != null) {
    contents[_Fil] = de_ReplicationRuleFilter(output[_Fil], context);
  }
  if (output[_S] != null) {
    contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
  }
  if (output[_SSC] != null) {
    contents[_SSC] = de_SourceSelectionCriteria(output[_SSC], context);
  }
  if (output[_EOR] != null) {
    contents[_EOR] = de_ExistingObjectReplication(output[_EOR], context);
  }
  if (output[_Des] != null) {
    contents[_Des] = de_Destination(output[_Des], context);
  }
  if (output[_DMR] != null) {
    contents[_DMR] = de_DeleteMarkerReplication(output[_DMR], context);
  }
  if (output[_B] != null) {
    contents[_B] = (0, import_smithy_client.expectString)(output[_B]);
  }
  return contents;
}, "de_ReplicationRule");
var de_ReplicationRuleAndOperator = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Pre] != null) {
    contents[_Pre] = (0, import_smithy_client.expectString)(output[_Pre]);
  }
  if (output.Tags === "") {
    contents[_T] = [];
  } else if (output[_T] != null && output[_T][_m] != null) {
    contents[_T] = de_S3TagSet((0, import_smithy_client.getArrayIfSingleItem)(output[_T][_m]), context);
  }
  return contents;
}, "de_ReplicationRuleAndOperator");
var de_ReplicationRuleFilter = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Pre] != null) {
    contents[_Pre] = (0, import_smithy_client.expectString)(output[_Pre]);
  }
  if (output[_Tag] != null) {
    contents[_Tag] = de_S3Tag(output[_Tag], context);
  }
  if (output[_An] != null) {
    contents[_An] = de_ReplicationRuleAndOperator(output[_An], context);
  }
  return contents;
}, "de_ReplicationRuleFilter");
var de_ReplicationRules = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_ReplicationRule(entry, context);
  });
}, "de_ReplicationRules");
var de_ReplicationStatusFilterList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_ReplicationStatusFilterList");
var de_ReplicationTime = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_S] != null) {
    contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
  }
  if (output[_Ti] != null) {
    contents[_Ti] = de_ReplicationTimeValue(output[_Ti], context);
  }
  return contents;
}, "de_ReplicationTime");
var de_ReplicationTimeValue = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Mi] != null) {
    contents[_Mi] = (0, import_smithy_client.strictParseInt32)(output[_Mi]);
  }
  return contents;
}, "de_ReplicationTimeValue");
var de_RouteList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_MultiRegionAccessPointRoute(entry, context);
  });
}, "de_RouteList");
var de_S3AccessControlList = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Ow] != null) {
    contents[_Ow] = de_S3ObjectOwner(output[_Ow], context);
  }
  if (output.Grants === "") {
    contents[_Gr] = [];
  } else if (output[_Gr] != null && output[_Gr][_m] != null) {
    contents[_Gr] = de_S3GrantList((0, import_smithy_client.getArrayIfSingleItem)(output[_Gr][_m]), context);
  }
  return contents;
}, "de_S3AccessControlList");
var de_S3AccessControlPolicy = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_ACLc] != null) {
    contents[_ACLc] = de_S3AccessControlList(output[_ACLc], context);
  }
  if (output[_CACL] != null) {
    contents[_CACL] = (0, import_smithy_client.expectString)(output[_CACL]);
  }
  return contents;
}, "de_S3AccessControlPolicy");
var de_S3BucketDestination = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_F] != null) {
    contents[_F] = (0, import_smithy_client.expectString)(output[_F]);
  }
  if (output[_OSVu] != null) {
    contents[_OSVu] = (0, import_smithy_client.expectString)(output[_OSVu]);
  }
  if (output[_AI] != null) {
    contents[_AI] = (0, import_smithy_client.expectString)(output[_AI]);
  }
  if (output[_Ar] != null) {
    contents[_Ar] = (0, import_smithy_client.expectString)(output[_Ar]);
  }
  if (output[_Pre] != null) {
    contents[_Pre] = (0, import_smithy_client.expectString)(output[_Pre]);
  }
  if (output[_Enc] != null) {
    contents[_Enc] = de_StorageLensDataExportEncryption(output[_Enc], context);
  }
  return contents;
}, "de_S3BucketDestination");
var de_S3CopyObjectOperation = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_TR] != null) {
    contents[_TR] = (0, import_smithy_client.expectString)(output[_TR]);
  }
  if (output[_CACL] != null) {
    contents[_CACL] = (0, import_smithy_client.expectString)(output[_CACL]);
  }
  if (output.AccessControlGrants === "") {
    contents[_ACG] = [];
  } else if (output[_ACG] != null && output[_ACG][_m] != null) {
    contents[_ACG] = de_S3GrantList((0, import_smithy_client.getArrayIfSingleItem)(output[_ACG][_m]), context);
  }
  if (output[_MDe] != null) {
    contents[_MDe] = (0, import_smithy_client.expectString)(output[_MDe]);
  }
  if (output[_MSC] != null) {
    contents[_MSC] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_MSC]));
  }
  if (output[_NOM] != null) {
    contents[_NOM] = de_S3ObjectMetadata(output[_NOM], context);
  }
  if (output.NewObjectTagging === "") {
    contents[_NOT] = [];
  } else if (output[_NOT] != null && output[_NOT][_m] != null) {
    contents[_NOT] = de_S3TagSet((0, import_smithy_client.getArrayIfSingleItem)(output[_NOT][_m]), context);
  }
  if (output[_RL] != null) {
    contents[_RL] = (0, import_smithy_client.expectString)(output[_RL]);
  }
  if (output[_RP] != null) {
    contents[_RP] = (0, import_smithy_client.parseBoolean)(output[_RP]);
  }
  if (output[_SC] != null) {
    contents[_SC] = (0, import_smithy_client.expectString)(output[_SC]);
  }
  if (output[_UMSC] != null) {
    contents[_UMSC] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_UMSC]));
  }
  if (output[_SSEAKKI] != null) {
    contents[_SSEAKKI] = (0, import_smithy_client.expectString)(output[_SSEAKKI]);
  }
  if (output[_TKP] != null) {
    contents[_TKP] = (0, import_smithy_client.expectString)(output[_TKP]);
  }
  if (output[_OLLHS] != null) {
    contents[_OLLHS] = (0, import_smithy_client.expectString)(output[_OLLHS]);
  }
  if (output[_OLM] != null) {
    contents[_OLM] = (0, import_smithy_client.expectString)(output[_OLM]);
  }
  if (output[_OLRUD] != null) {
    contents[_OLRUD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_OLRUD]));
  }
  if (output[_BKE] != null) {
    contents[_BKE] = (0, import_smithy_client.parseBoolean)(output[_BKE]);
  }
  if (output[_CAh] != null) {
    contents[_CAh] = (0, import_smithy_client.expectString)(output[_CAh]);
  }
  return contents;
}, "de_S3CopyObjectOperation");
var de_S3DeleteObjectTaggingOperation = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  return contents;
}, "de_S3DeleteObjectTaggingOperation");
var de_S3GeneratedManifestDescriptor = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_F] != null) {
    contents[_F] = (0, import_smithy_client.expectString)(output[_F]);
  }
  if (output[_L] != null) {
    contents[_L] = de_JobManifestLocation(output[_L], context);
  }
  return contents;
}, "de_S3GeneratedManifestDescriptor");
var de_S3Grant = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_G] != null) {
    contents[_G] = de_S3Grantee(output[_G], context);
  }
  if (output[_P] != null) {
    contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
  }
  return contents;
}, "de_S3Grant");
var de_S3Grantee = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_TI] != null) {
    contents[_TI] = (0, import_smithy_client.expectString)(output[_TI]);
  }
  if (output[_Id] != null) {
    contents[_Id] = (0, import_smithy_client.expectString)(output[_Id]);
  }
  if (output[_DN] != null) {
    contents[_DN] = (0, import_smithy_client.expectString)(output[_DN]);
  }
  return contents;
}, "de_S3Grantee");
var de_S3GrantList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_S3Grant(entry, context);
  });
}, "de_S3GrantList");
var de_S3InitiateRestoreObjectOperation = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_EID] != null) {
    contents[_EID] = (0, import_smithy_client.strictParseInt32)(output[_EID]);
  }
  if (output[_GJT] != null) {
    contents[_GJT] = (0, import_smithy_client.expectString)(output[_GJT]);
  }
  return contents;
}, "de_S3InitiateRestoreObjectOperation");
var de_S3JobManifestGenerator = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_EBO] != null) {
    contents[_EBO] = (0, import_smithy_client.expectString)(output[_EBO]);
  }
  if (output[_SB] != null) {
    contents[_SB] = (0, import_smithy_client.expectString)(output[_SB]);
  }
  if (output[_MOL] != null) {
    contents[_MOL] = de_S3ManifestOutputLocation(output[_MOL], context);
  }
  if (output[_Fil] != null) {
    contents[_Fil] = de_JobManifestGeneratorFilter(output[_Fil], context);
  }
  if (output[_EMO] != null) {
    contents[_EMO] = (0, import_smithy_client.parseBoolean)(output[_EMO]);
  }
  return contents;
}, "de_S3JobManifestGenerator");
var de_S3ManifestOutputLocation = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_EMBO] != null) {
    contents[_EMBO] = (0, import_smithy_client.expectString)(output[_EMBO]);
  }
  if (output[_B] != null) {
    contents[_B] = (0, import_smithy_client.expectString)(output[_B]);
  }
  if (output[_MP] != null) {
    contents[_MP] = (0, import_smithy_client.expectString)(output[_MP]);
  }
  if (output[_ME] != null) {
    contents[_ME] = de_GeneratedManifestEncryption(output[_ME], context);
  }
  if (output[_MF] != null) {
    contents[_MF] = (0, import_smithy_client.expectString)(output[_MF]);
  }
  return contents;
}, "de_S3ManifestOutputLocation");
var de_S3ObjectLockLegalHold = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_S] != null) {
    contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
  }
  return contents;
}, "de_S3ObjectLockLegalHold");
var de_S3ObjectMetadata = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CC] != null) {
    contents[_CC] = (0, import_smithy_client.expectString)(output[_CC]);
  }
  if (output[_CDo] != null) {
    contents[_CDo] = (0, import_smithy_client.expectString)(output[_CDo]);
  }
  if (output[_CE] != null) {
    contents[_CE] = (0, import_smithy_client.expectString)(output[_CE]);
  }
  if (output[_CL] != null) {
    contents[_CL] = (0, import_smithy_client.expectString)(output[_CL]);
  }
  if (output.UserMetadata === "") {
    contents[_UM] = {};
  } else if (output[_UM] != null && output[_UM][_e] != null) {
    contents[_UM] = de_S3UserMetadata((0, import_smithy_client.getArrayIfSingleItem)(output[_UM][_e]), context);
  }
  if (output[_CLo] != null) {
    contents[_CLo] = (0, import_smithy_client.strictParseLong)(output[_CLo]);
  }
  if (output[_CMD] != null) {
    contents[_CMD] = (0, import_smithy_client.expectString)(output[_CMD]);
  }
  if (output[_CTon] != null) {
    contents[_CTon] = (0, import_smithy_client.expectString)(output[_CTon]);
  }
  if (output[_HED] != null) {
    contents[_HED] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_HED]));
  }
  if (output[_RCe] != null) {
    contents[_RCe] = (0, import_smithy_client.parseBoolean)(output[_RCe]);
  }
  if (output[_SSEA] != null) {
    contents[_SSEA] = (0, import_smithy_client.expectString)(output[_SSEA]);
  }
  return contents;
}, "de_S3ObjectMetadata");
var de_S3ObjectOwner = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_ID] != null) {
    contents[_ID] = (0, import_smithy_client.expectString)(output[_ID]);
  }
  if (output[_DN] != null) {
    contents[_DN] = (0, import_smithy_client.expectString)(output[_DN]);
  }
  return contents;
}, "de_S3ObjectOwner");
var de_S3ReplicateObjectOperation = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  return contents;
}, "de_S3ReplicateObjectOperation");
var de_S3Retention = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_RUD] != null) {
    contents[_RUD] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_RUD]));
  }
  if (output[_Mo] != null) {
    contents[_Mo] = (0, import_smithy_client.expectString)(output[_Mo]);
  }
  return contents;
}, "de_S3Retention");
var de_S3SetObjectAclOperation = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_ACP] != null) {
    contents[_ACP] = de_S3AccessControlPolicy(output[_ACP], context);
  }
  return contents;
}, "de_S3SetObjectAclOperation");
var de_S3SetObjectLegalHoldOperation = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_LH] != null) {
    contents[_LH] = de_S3ObjectLockLegalHold(output[_LH], context);
  }
  return contents;
}, "de_S3SetObjectLegalHoldOperation");
var de_S3SetObjectRetentionOperation = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_BGR] != null) {
    contents[_BGR] = (0, import_smithy_client.parseBoolean)(output[_BGR]);
  }
  if (output[_Ret] != null) {
    contents[_Ret] = de_S3Retention(output[_Ret], context);
  }
  return contents;
}, "de_S3SetObjectRetentionOperation");
var de_S3SetObjectTaggingOperation = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.TagSet === "") {
    contents[_TS] = [];
  } else if (output[_TS] != null && output[_TS][_m] != null) {
    contents[_TS] = de_S3TagSet((0, import_smithy_client.getArrayIfSingleItem)(output[_TS][_m]), context);
  }
  return contents;
}, "de_S3SetObjectTaggingOperation");
var de_S3Tag = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_K] != null) {
    contents[_K] = (0, import_smithy_client.expectString)(output[_K]);
  }
  if (output[_V] != null) {
    contents[_V] = (0, import_smithy_client.expectString)(output[_V]);
  }
  return contents;
}, "de_S3Tag");
var de_S3TagSet = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_S3Tag(entry, context);
  });
}, "de_S3TagSet");
var de_S3UserMetadata = /* @__PURE__ */ __name((output, context) => {
  return output.reduce((acc, pair) => {
    if (pair["value"] === null) {
      return acc;
    }
    acc[pair["key"]] = (0, import_smithy_client.expectString)(pair["value"]);
    return acc;
  }, {});
}, "de_S3UserMetadata");
var de_SelectionCriteria = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Del] != null) {
    contents[_Del] = (0, import_smithy_client.expectString)(output[_Del]);
  }
  if (output[_MDa] != null) {
    contents[_MDa] = (0, import_smithy_client.strictParseInt32)(output[_MDa]);
  }
  if (output[_MSBP] != null) {
    contents[_MSBP] = (0, import_smithy_client.strictParseFloat)(output[_MSBP]);
  }
  return contents;
}, "de_SelectionCriteria");
var de_SourceSelectionCriteria = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_SKEO] != null) {
    contents[_SKEO] = de_SseKmsEncryptedObjects(output[_SKEO], context);
  }
  if (output[_RM] != null) {
    contents[_RM] = de_ReplicaModifications(output[_RM], context);
  }
  return contents;
}, "de_SourceSelectionCriteria");
var de_SSEKMS = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_KI] != null) {
    contents[_KI] = (0, import_smithy_client.expectString)(output[_KI]);
  }
  return contents;
}, "de_SSEKMS");
var de_SseKmsEncryptedObjects = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_S] != null) {
    contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
  }
  return contents;
}, "de_SseKmsEncryptedObjects");
var de_SSEKMSEncryption = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_KI] != null) {
    contents[_KI] = (0, import_smithy_client.expectString)(output[_KI]);
  }
  return contents;
}, "de_SSEKMSEncryption");
var de_SSES3 = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  return contents;
}, "de_SSES3");
var de_SSES3Encryption = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  return contents;
}, "de_SSES3Encryption");
var de_StorageClassList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_StorageClassList");
var de_StorageLensAwsOrg = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Ar] != null) {
    contents[_Ar] = (0, import_smithy_client.expectString)(output[_Ar]);
  }
  return contents;
}, "de_StorageLensAwsOrg");
var de_StorageLensConfiguration = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Id_] != null) {
    contents[_Id_] = (0, import_smithy_client.expectString)(output[_Id_]);
  }
  if (output[_AL] != null) {
    contents[_AL] = de_AccountLevel(output[_AL], context);
  }
  if (output[_I] != null) {
    contents[_I] = de_Include(output[_I], context);
  }
  if (output[_Ex] != null) {
    contents[_Ex] = de__Exclude(output[_Ex], context);
  }
  if (output[_DE] != null) {
    contents[_DE] = de_StorageLensDataExport(output[_DE], context);
  }
  if (output[_IE] != null) {
    contents[_IE] = (0, import_smithy_client.parseBoolean)(output[_IE]);
  }
  if (output[_AOw] != null) {
    contents[_AOw] = de_StorageLensAwsOrg(output[_AOw], context);
  }
  if (output[_SLA] != null) {
    contents[_SLA] = (0, import_smithy_client.expectString)(output[_SLA]);
  }
  return contents;
}, "de_StorageLensConfiguration");
var de_StorageLensConfigurationList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_ListStorageLensConfigurationEntry(entry, context);
  });
}, "de_StorageLensConfigurationList");
var de_StorageLensDataExport = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_SBD] != null) {
    contents[_SBD] = de_S3BucketDestination(output[_SBD], context);
  }
  if (output[_CWM] != null) {
    contents[_CWM] = de_CloudWatchMetrics(output[_CWM], context);
  }
  return contents;
}, "de_StorageLensDataExport");
var de_StorageLensDataExportEncryption = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_SS] != null) {
    contents[_SSES] = de_SSES3(output[_SS], context);
  }
  if (output[_SK] != null) {
    contents[_SSEKMS] = de_SSEKMS(output[_SK], context);
  }
  return contents;
}, "de_StorageLensDataExportEncryption");
var de_StorageLensGroup = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_N] != null) {
    contents[_N] = (0, import_smithy_client.expectString)(output[_N]);
  }
  if (output[_Fil] != null) {
    contents[_Fil] = de_StorageLensGroupFilter(output[_Fil], context);
  }
  if (output[_SLGA] != null) {
    contents[_SLGA] = (0, import_smithy_client.expectString)(output[_SLGA]);
  }
  return contents;
}, "de_StorageLensGroup");
var de_StorageLensGroupAndOperator = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.MatchAnyPrefix === "") {
    contents[_MAP] = [];
  } else if (output[_MAP] != null && output[_MAP][_Pre] != null) {
    contents[_MAP] = de_MatchAnyPrefix((0, import_smithy_client.getArrayIfSingleItem)(output[_MAP][_Pre]), context);
  }
  if (output.MatchAnySuffix === "") {
    contents[_MAS] = [];
  } else if (output[_MAS] != null && output[_MAS][_Su] != null) {
    contents[_MAS] = de_MatchAnySuffix((0, import_smithy_client.getArrayIfSingleItem)(output[_MAS][_Su]), context);
  }
  if (output.MatchAnyTag === "") {
    contents[_MAT] = [];
  } else if (output[_MAT] != null && output[_MAT][_Tag] != null) {
    contents[_MAT] = de_MatchAnyTag((0, import_smithy_client.getArrayIfSingleItem)(output[_MAT][_Tag]), context);
  }
  if (output[_MOA] != null) {
    contents[_MOA] = de_MatchObjectAge(output[_MOA], context);
  }
  if (output[_MOS] != null) {
    contents[_MOS] = de_MatchObjectSize(output[_MOS], context);
  }
  return contents;
}, "de_StorageLensGroupAndOperator");
var de_StorageLensGroupFilter = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.MatchAnyPrefix === "") {
    contents[_MAP] = [];
  } else if (output[_MAP] != null && output[_MAP][_Pre] != null) {
    contents[_MAP] = de_MatchAnyPrefix((0, import_smithy_client.getArrayIfSingleItem)(output[_MAP][_Pre]), context);
  }
  if (output.MatchAnySuffix === "") {
    contents[_MAS] = [];
  } else if (output[_MAS] != null && output[_MAS][_Su] != null) {
    contents[_MAS] = de_MatchAnySuffix((0, import_smithy_client.getArrayIfSingleItem)(output[_MAS][_Su]), context);
  }
  if (output.MatchAnyTag === "") {
    contents[_MAT] = [];
  } else if (output[_MAT] != null && output[_MAT][_Tag] != null) {
    contents[_MAT] = de_MatchAnyTag((0, import_smithy_client.getArrayIfSingleItem)(output[_MAT][_Tag]), context);
  }
  if (output[_MOA] != null) {
    contents[_MOA] = de_MatchObjectAge(output[_MOA], context);
  }
  if (output[_MOS] != null) {
    contents[_MOS] = de_MatchObjectSize(output[_MOS], context);
  }
  if (output[_An] != null) {
    contents[_An] = de_StorageLensGroupAndOperator(output[_An], context);
  }
  if (output[_Or_] != null) {
    contents[_Or_] = de_StorageLensGroupOrOperator(output[_Or_], context);
  }
  return contents;
}, "de_StorageLensGroupFilter");
var de_StorageLensGroupLevel = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_SCe] != null) {
    contents[_SCe] = de_StorageLensGroupLevelSelectionCriteria(output[_SCe], context);
  }
  return contents;
}, "de_StorageLensGroupLevel");
var de_StorageLensGroupLevelExclude = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_StorageLensGroupLevelExclude");
var de_StorageLensGroupLevelInclude = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_StorageLensGroupLevelInclude");
var de_StorageLensGroupLevelSelectionCriteria = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Include === "") {
    contents[_I] = [];
  } else if (output[_I] != null && output[_I][_Ar] != null) {
    contents[_I] = de_StorageLensGroupLevelInclude((0, import_smithy_client.getArrayIfSingleItem)(output[_I][_Ar]), context);
  }
  if (output.Exclude === "") {
    contents[_Ex] = [];
  } else if (output[_Ex] != null && output[_Ex][_Ar] != null) {
    contents[_Ex] = de_StorageLensGroupLevelExclude((0, import_smithy_client.getArrayIfSingleItem)(output[_Ex][_Ar]), context);
  }
  return contents;
}, "de_StorageLensGroupLevelSelectionCriteria");
var de_StorageLensGroupList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_ListStorageLensGroupEntry(entry, context);
  });
}, "de_StorageLensGroupList");
var de_StorageLensGroupOrOperator = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.MatchAnyPrefix === "") {
    contents[_MAP] = [];
  } else if (output[_MAP] != null && output[_MAP][_Pre] != null) {
    contents[_MAP] = de_MatchAnyPrefix((0, import_smithy_client.getArrayIfSingleItem)(output[_MAP][_Pre]), context);
  }
  if (output.MatchAnySuffix === "") {
    contents[_MAS] = [];
  } else if (output[_MAS] != null && output[_MAS][_Su] != null) {
    contents[_MAS] = de_MatchAnySuffix((0, import_smithy_client.getArrayIfSingleItem)(output[_MAS][_Su]), context);
  }
  if (output.MatchAnyTag === "") {
    contents[_MAT] = [];
  } else if (output[_MAT] != null && output[_MAT][_Tag] != null) {
    contents[_MAT] = de_MatchAnyTag((0, import_smithy_client.getArrayIfSingleItem)(output[_MAT][_Tag]), context);
  }
  if (output[_MOA] != null) {
    contents[_MOA] = de_MatchObjectAge(output[_MOA], context);
  }
  if (output[_MOS] != null) {
    contents[_MOS] = de_MatchObjectSize(output[_MOS], context);
  }
  return contents;
}, "de_StorageLensGroupOrOperator");
var de_StorageLensTag = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_K] != null) {
    contents[_K] = (0, import_smithy_client.expectString)(output[_K]);
  }
  if (output[_V] != null) {
    contents[_V] = (0, import_smithy_client.expectString)(output[_V]);
  }
  return contents;
}, "de_StorageLensTag");
var de_StorageLensTags = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_StorageLensTag(entry, context);
  });
}, "de_StorageLensTags");
var de_Tag = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_K] != null) {
    contents[_K] = (0, import_smithy_client.expectString)(output[_K]);
  }
  if (output[_V] != null) {
    contents[_V] = (0, import_smithy_client.expectString)(output[_V]);
  }
  return contents;
}, "de_Tag");
var de_TagList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_Tag(entry, context);
  });
}, "de_TagList");
var de_Transition = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Da] != null) {
    contents[_Da] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_Da]));
  }
  if (output[_Day] != null) {
    contents[_Day] = (0, import_smithy_client.strictParseInt32)(output[_Day]);
  }
  if (output[_SC] != null) {
    contents[_SC] = (0, import_smithy_client.expectString)(output[_SC]);
  }
  return contents;
}, "de_Transition");
var de_TransitionList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_Transition(entry, context);
  });
}, "de_TransitionList");
var de_UserArguments = /* @__PURE__ */ __name((output, context) => {
  return output.reduce((acc, pair) => {
    if (pair["value"] === null) {
      return acc;
    }
    acc[pair["key"]] = (0, import_smithy_client.expectString)(pair["value"]);
    return acc;
  }, {});
}, "de_UserArguments");
var de_VpcConfiguration = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_VI] != null) {
    contents[_VI] = (0, import_smithy_client.expectString)(output[_VI]);
  }
  return contents;
}, "de_VpcConfiguration");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var collectBodyString = /* @__PURE__ */ __name((streamBody, context) => (0, import_smithy_client.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body)), "collectBodyString");
var isSerializableHeaderValue = /* @__PURE__ */ __name((value) => value !== void 0 && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0), "isSerializableHeaderValue");
var _A = "Alias";
var _AA = "ApplicationArn";
var _AAGICR = "AssociateAccessGrantsIdentityCenterRequest";
var _ACG = "AccessControlGrants";
var _ACL = "ACL";
var _ACLc = "AccessControlList";
var _ACOM = "AdvancedCostOptimizationMetrics";
var _ACP = "AccessControlPolicy";
var _ACT = "AccessControlTranslation";
var _ADPM = "AdvancedDataProtectionMetrics";
var _AF = "AllowedFeature";
var _AFl = "AllowedFeatures";
var _AG = "AccessGrant";
var _AGA = "AccessGrantArn";
var _AGI = "AccessGrantId";
var _AGIA = "AccessGrantsInstanceArn";
var _AGII = "AccessGrantsInstanceId";
var _AGIL = "AccessGrantsInstancesList";
var _AGIc = "AccessGrantsInstance";
var _AGL = "AccessGrantsList";
var _AGLA = "AccessGrantsLocationArn";
var _AGLC = "AccessGrantsLocationConfiguration";
var _AGLI = "AccessGrantsLocationId";
var _AGLL = "AccessGrantsLocationsList";
var _AGLc = "AccessGrantsLocation";
var _AI = "AccountId";
var _AIMU = "AbortIncompleteMultipartUpload";
var _AKI = "AccessKeyId";
var _AL = "AccountLevel";
var _ALT = "AwsLambdaTransformation";
var _ALTP = "AwsLambdaTransformationPayload";
var _ALw = "AwsLambda";
var _AM = "ActivityMetrics";
var _AO = "AsyncOperation";
var _AOA = "AwsOrgArn";
var _AOw = "AwsOrg";
var _AP = "AccessPoint";
var _APA = "AccessPointArn";
var _APL = "AccessPointList";
var _APc = "AccessPoints";
var _Ac = "Account";
var _Act = "Actions";
var _Acti = "Action";
var _An = "And";
var _Ar = "Arn";
var _B = "Bucket";
var _BA = "BucketArn";
var _BAI = "BucketAccountId";
var _BGR = "BypassGovernanceRetention";
var _BGT = "BytesGreaterThan";
var _BIS = "BucketIdentifierString";
var _BKE = "BucketKeyEnabled";
var _BL = "BucketLevel";
var _BLC = "BucketLocationConstraint";
var _BLT = "BytesLessThan";
var _BN = "BucketName";
var _BPA = "BlockPublicAcls";
var _BPP = "BlockPublicPolicy";
var _BVS = "BucketVersioningStatus";
var _Bo = "Boolean";
var _Bu = "Buckets";
var _C = "Configuration";
var _CA = "CreatedAt";
var _CACL = "CannedAccessControlList";
var _CAGIR = "CreateAccessGrantsInstanceRequest";
var _CAGLR = "CreateAccessGrantsLocationRequest";
var _CAGR = "CreateAccessGrantRequest";
var _CAPFOLR = "CreateAccessPointForObjectLambdaRequest";
var _CAPR = "CreateAccessPointRequest";
var _CAh = "ChecksumAlgorithm";
var _CAr = "CreatedAfter";
var _CB = "CreatedBefore";
var _CBC = "CreateBucketConfiguration";
var _CC = "CacheControl";
var _CD = "CreationDate";
var _CDo = "ContentDisposition";
var _CE = "ContentEncoding";
var _CI = "ConfigId";
var _CJR = "CreateJobRequest";
var _CL = "ContentLanguage";
var _CLo = "ContentLength";
var _CMD = "ContentMD5";
var _CMRAPI = "CreateMultiRegionAccessPointInput";
var _CMRAPR = "CreateMultiRegionAccessPointRequest";
var _CR = "ConfirmationRequired";
var _CRSBA = "ConfirmRemoveSelfBucketAccess";
var _CRT = "ClientRequestToken";
var _CSLGR = "CreateStorageLensGroupRequest";
var _CT = "ClientToken";
var _CTo = "ContentTransformation";
var _CTon = "ContentType";
var _CTr = "CreationTime";
var _CWM = "CloudWatchMetrics";
var _CWME = "CloudWatchMetricsEnabled";
var _Co = "Code";
var _Cr = "Credentials";
var _D = "Description";
var _DAI = "DaysAfterInitiation";
var _DE = "DataExport";
var _DGT = "DaysGreaterThan";
var _DLT = "DaysLessThan";
var _DMR = "DeleteMarkerReplication";
var _DMRAPI = "DeleteMultiRegionAccessPointInput";
var _DMRAPR = "DeleteMultiRegionAccessPointRequest";
var _DMRS = "DeleteMarkerReplicationStatus";
var _DN = "DisplayName";
var _DS = "DurationSeconds";
var _DSCM = "DetailedStatusCodesMetrics";
var _Da = "Date";
var _Day = "Days";
var _De = "Details";
var _Del = "Delimiter";
var _Des = "Destination";
var _E = "Endpoints";
var _EBO = "ExpectedBucketOwner";
var _EC = "EncryptionConfiguration";
var _ED = "ErrorDetails";
var _EFR = "EligibleForReplication";
var _EID = "ExpirationInDays";
var _EMBO = "ExpectedManifestBucketOwner";
var _EMO = "EnableManifestOutput";
var _EODM = "ExpiredObjectDeleteMarker";
var _EOR = "ExistingObjectReplication";
var _EORS = "ExistingObjectReplicationStatus";
var _ES = "ExpirationStatus";
var _ET = "ETag";
var _ETIAS = "ElapsedTimeInActiveSeconds";
var _ETv = "EventThreshold";
var _En = "Enabled";
var _Enc = "Encryption";
var _Es = "Established";
var _Ex = "Exclude";
var _Exp = "Expiration";
var _F = "Format";
var _FA = "FunctionArn";
var _FAS = "FunctionArnString";
var _FC = "FailureCode";
var _FP = "FunctionPayload";
var _FR = "FailureReasons";
var _FRa = "FailureReason";
var _Fi = "Fields";
var _Fil = "Filter";
var _G = "Grantee";
var _GFC = "GrantFullControl";
var _GI = "GranteeIdentifier";
var _GJT = "GlacierJobTier";
var _GMD = "GeneratedManifestDescriptor";
var _GME = "GeneratedManifestEncryption";
var _GMF = "GeneratedManifestFormat";
var _GR = "GrantRead";
var _GRACP = "GrantReadACP";
var _GS = "GrantScope";
var _GT = "GranteeType";
var _GW = "GrantWrite";
var _GWACP = "GrantWriteACP";
var _Gr = "Grants";
var _HED = "HttpExpiresDate";
var _HR = "HomeRegion";
var _I = "Include";
var _IAMRA = "IAMRoleArn";
var _ICA = "IdentityCenterArn";
var _ICAA = "IdentityCenterApplicationArn";
var _ID = "ID";
var _IE = "IsEnabled";
var _IP = "IsPublic";
var _IPA = "IgnorePublicAcls";
var _ISV = "InvocationSchemaVersion";
var _Id = "Identifier";
var _Id_ = "Id";
var _J = "Job";
var _JA = "JobArn";
var _JI = "JobId";
var _JM = "JobManifest";
var _JMF = "JobManifestFormat";
var _JMFN = "JobManifestFieldName";
var _JMG = "JobManifestGenerator";
var _JMGF = "JobManifestGeneratorFilter";
var _JML = "JobManifestLocation";
var _JMS = "JobManifestSpec";
var _JO = "JobOperation";
var _JP = "JobPriority";
var _JR = "JobReport";
var _JRF = "JobReportFormat";
var _JRS = "JobReportScope";
var _JS = "JobStatuses";
var _Jo = "Jobs";
var _K = "Key";
var _KI = "KeyId";
var _KKAS = "KmsKeyArnString";
var _KNC = "KeyNameConstraint";
var _L = "Location";
var _LC = "LocationConstraint";
var _LCi = "LifecycleConfiguration";
var _LE = "LifecycleExpiration";
var _LH = "LegalHold";
var _LI = "LambdaInvoke";
var _LIO = "LambdaInvokeOperation";
var _LR = "LifecycleRule";
var _LRAO = "LifecycleRuleAndOperator";
var _LRF = "LifecycleRuleFilter";
var _LS = "LocationScope";
var _M = "Manifest";
var _MAP = "MatchAnyPrefix";
var _MAS = "MatchAnySuffix";
var _MASC = "MatchAnyStorageClass";
var _MASa = "MatchAnySubstring";
var _MAT = "MatchAnyTag";
var _MD = "MfaDelete";
var _MDa = "MaxDepth";
var _MDe = "MetadataDirective";
var _ME = "ManifestEncryption";
var _MF = "ManifestFormat";
var _MFA = "MFA";
var _MFAD = "MFADelete";
var _MG = "ManifestGenerator";
var _MGT = "MatchedGrantTarget";
var _MLS = "MaxLength1024String";
var _MOA = "MatchObjectAge";
var _MOL = "ManifestOutputLocation";
var _MOS = "MatchObjectSize";
var _MP = "ManifestPrefix";
var _MPS = "ManifestPrefixString";
var _MR = "MaxResults";
var _MRAPCT = "MultiRegionAccessPointClientToken";
var _MRAPD = "MultiRegionAccessPointDetails";
var _MRAPN = "MultiRegionAccessPointName";
var _MRAPR = "MultiRegionAccessPointRoute";
var _MS = "MetricsStatus";
var _MSBP = "MinStorageBytesPercentage";
var _MSC = "ModifiedSinceConstraint";
var _Me = "Message";
var _Met = "Metrics";
var _Mi = "Minutes";
var _Mo = "Mode";
var _Mr = "Mrap";
var _N = "Name";
var _ND = "NoncurrentDays";
var _NEMLS = "NonEmptyMaxLength64String";
var _NEMLSo = "NonEmptyMaxLength256String";
var _NEMLSon = "NonEmptyMaxLength1024String";
var _NEMLSonm = "NonEmptyMaxLength2048String";
var _NNV = "NewerNoncurrentVersions";
var _NO = "NetworkOrigin";
var _NOM = "NewObjectMetadata";
var _NOT = "NewObjectTagging";
var _NOTF = "NumberOfTasksFailed";
var _NOTS = "NumberOfTasksSucceeded";
var _NT = "NextToken";
var _NVC = "NoncurrentVersionCount";
var _NVE = "NoncurrentVersionExpiration";
var _NVT = "NoncurrentVersionTransitions";
var _NVTo = "NoncurrentVersionTransition";
var _O = "Operation";
var _OA = "ObjectArn";
var _OAV = "ObjectAgeValue";
var _OCT = "ObjectCreationTime";
var _OI = "OutpostId";
var _OLAF = "ObjectLambdaAllowedFeature";
var _OLAP = "ObjectLambdaAccessPoint";
var _OLAPA = "ObjectLambdaAccessPointArn";
var _OLAPL = "ObjectLambdaAccessPointList";
var _OLC = "ObjectLambdaConfiguration";
var _OLCT = "ObjectLambdaContentTransformation";
var _OLEFB = "ObjectLockEnabledForBucket";
var _OLLHS = "ObjectLockLegalHoldStatus";
var _OLM = "ObjectLockMode";
var _OLP = "ObjectLambdaPolicy";
var _OLRUD = "ObjectLockRetainUntilDate";
var _OLSAPA = "ObjectLambdaSupportingAccessPointArn";
var _OLTC = "ObjectLambdaTransformationConfiguration";
var _OLTCA = "ObjectLambdaTransformationConfigurationAction";
var _OO = "OwnerOverride";
var _ORS = "ObjectReplicationStatuses";
var _OSGT = "ObjectSizeGreaterThan";
var _OSGTB = "ObjectSizeGreaterThanBytes";
var _OSLT = "ObjectSizeLessThan";
var _OSLTB = "ObjectSizeLessThanBytes";
var _OSV = "ObjectSizeValue";
var _OSVu = "OutputSchemaVersion";
var _OVI = "ObjectVersionId";
var _Or = "Organization";
var _Or_ = "Or";
var _Ow = "Owner";
var _P = "Permission";
var _PAB = "PublicAccessBlock";
var _PABC = "PublicAccessBlockConfiguration";
var _PABE = "PublicAccessBlockEnabled";
var _PAGIRPR = "PutAccessGrantsInstanceResourcePolicyRequest";
var _PAPCFOLR = "PutAccessPointConfigurationForObjectLambdaRequest";
var _PAPPFOLR = "PutAccessPointPolicyForObjectLambdaRequest";
var _PAPPR = "PutAccessPointPolicyRequest";
var _PBPR = "PutBucketPolicyRequest";
var _PD = "PolicyDocument";
var _PJTR = "PutJobTaggingRequest";
var _PL = "PrefixLevel";
var _PLSM = "PrefixLevelStorageMetrics";
var _PMRAPPI = "PutMultiRegionAccessPointPolicyInput";
var _PMRAPPR = "PutMultiRegionAccessPointPolicyRequest";
var _PS = "PolicyStatus";
var _PSLCR = "PutStorageLensConfigurationRequest";
var _PSLCTR = "PutStorageLensConfigurationTaggingRequest";
var _PSr = "ProgressSummary";
var _Po = "Policy";
var _Pr = "Priority";
var _Pre = "Prefix";
var _Pri = "Privilege";
var _Pro = "Proposed";
var _R = "Report";
var _RA = "RoleArn";
var _RB = "RegionalBucket";
var _RBL = "RegionalBucketList";
var _RC = "ReplicationConfiguration";
var _RCe = "RequesterCharged";
var _RD = "ResponseDetails";
var _RI = "RequestId";
var _RJS = "RequestedJobStatus";
var _RKKID = "ReplicaKmsKeyID";
var _RL = "RedirectLocation";
var _RM = "ReplicaModifications";
var _RMS = "ReplicaModificationsStatus";
var _RN = "RegionName";
var _RP = "RequesterPays";
var _RPB = "RestrictPublicBuckets";
var _RPS = "ReportPrefixString";
var _RPe = "RequestParameters";
var _RR = "ReplicationRule";
var _RRAO = "ReplicationRuleAndOperator";
var _RRF = "ReplicationRuleFilter";
var _RRS = "ReplicationRuleStatus";
var _RS = "ReportScope";
var _RSC = "ReplicationStorageClass";
var _RSe = "ReplicationStatus";
var _RSeq = "RequestStatus";
var _RT = "ReplicationTime";
var _RTARN = "RequestTokenARN";
var _RTS = "ReplicationTimeStatus";
var _RTV = "ReplicationTimeValue";
var _RU = "RouteUpdates";
var _RUD = "RetainUntilDate";
var _Re = "Regions";
var _Reg = "Region";
var _Res = "Resource";
var _Ret = "Retention";
var _Ro = "Routes";
var _Rol = "Role";
var _Rou = "Route";
var _Ru = "Rules";
var _Rul = "Rule";
var _S = "Status";
var _SACL = "S3AccessControlList";
var _SACP = "S3AccessControlPolicy";
var _SAK = "SecretAccessKey";
var _SAP = "SupportingAccessPoint";
var _SAWSR = "S3AWSRegion";
var _SB = "SourceBucket";
var _SBAS = "S3BucketArnString";
var _SBD = "S3BucketDestination";
var _SC = "StorageClass";
var _SCA = "S3ChecksumAlgorithm";
var _SCACL = "S3CannedAccessControlList";
var _SCL = "S3ContentLength";
var _SCOO = "S3CopyObjectOperation";
var _SCe = "SelectionCriteria";
var _SCu = "SuspendedCause";
var _SD = "SuspendedDate";
var _SDOT = "S3DeleteObjectTagging";
var _SDOTO = "S3DeleteObjectTaggingOperation";
var _SEID = "S3ExpirationInDays";
var _SG = "S3Grant";
var _SGJT = "S3GlacierJobTier";
var _SGTI = "S3GranteeTypeIdentifier";
var _SGr = "S3Grantee";
var _SIRO = "S3InitiateRestoreObject";
var _SIROO = "S3InitiateRestoreObjectOperation";
var _SJMG = "S3JobManifestGenerator";
var _SK = "SSE-KMS";
var _SKAS = "S3KeyArnString";
var _SKEO = "SseKmsEncryptedObjects";
var _SKEOS = "SseKmsEncryptedObjectsStatus";
var _SLA = "StorageLensArn";
var _SLAO = "StorageLensAwsOrg";
var _SLC = "StorageLensConfiguration";
var _SLCL = "StorageLensConfigurationList";
var _SLDE = "StorageLensDataExport";
var _SLDEE = "StorageLensDataExportEncryption";
var _SLG = "StorageLensGroup";
var _SLGA = "StorageLensGroupArn";
var _SLGAO = "StorageLensGroupAndOperator";
var _SLGF = "StorageLensGroupFilter";
var _SLGL = "StorageLensGroupList";
var _SLGLSC = "StorageLensGroupLevelSelectionCriteria";
var _SLGLt = "StorageLensGroupLevel";
var _SLGN = "StorageLensGroupName";
var _SLGOO = "StorageLensGroupOrOperator";
var _SLPLD = "StorageLensPrefixLevelDelimiter";
var _SLPLMD = "StorageLensPrefixLevelMaxDepth";
var _SLT = "StorageLensTag";
var _SM = "StorageMetrics";
var _SMD = "S3MetadataDirective";
var _SMOL = "S3ManifestOutputLocation";
var _SMRAPRR = "SubmitMultiRegionAccessPointRoutesRequest";
var _SOLLH = "S3ObjectLockLegalHold";
var _SOLLHS = "S3ObjectLockLegalHoldStatus";
var _SOLM = "S3ObjectLockMode";
var _SOLRM = "S3ObjectLockRetentionMode";
var _SOM = "S3ObjectMetadata";
var _SOO = "S3ObjectOwner";
var _SOVI = "S3ObjectVersionId";
var _SP = "S3Prefix";
var _SPOA = "S3PutObjectAcl";
var _SPOC = "S3PutObjectCopy";
var _SPOLH = "S3PutObjectLegalHold";
var _SPOR = "S3PutObjectRetention";
var _SPOT = "S3PutObjectTagging";
var _SPT = "S3PrefixType";
var _SPe = "S3Permission";
var _SR = "S3Retention";
var _SRO = "S3ReplicateObject";
var _SROO = "S3ReplicateObjectOperation";
var _SROSEBAS = "S3RegionalOrS3ExpressBucketArnString";
var _SS = "SSE-S3";
var _SSC = "SourceSelectionCriteria";
var _SSCt = "S3StorageClass";
var _SSEA = "SSEAlgorithm";
var _SSEAKKI = "SSEAwsKmsKeyId";
var _SSEKMS = "SSEKMS";
var _SSEKMSKI = "SSEKMSKeyId";
var _SSES = "SSES3";
var _SSOAO = "S3SetObjectAclOperation";
var _SSOLHO = "S3SetObjectLegalHoldOperation";
var _SSORO = "S3SetObjectRetentionOperation";
var _SSOTO = "S3SetObjectTaggingOperation";
var _SSP = "S3SubPrefix";
var _SSSEA = "S3SSEAlgorithm";
var _ST = "S3Tag";
var _STe = "SessionToken";
var _SUR = "StatusUpdateReason";
var _Se = "Setting";
var _Sp = "Spec";
var _Su = "Suffix";
var _T = "Tags";
var _TC = "TransformationConfigurations";
var _TCr = "TransformationConfiguration";
var _TD = "TerminationDate";
var _TDP = "TrafficDialPercentage";
var _TI = "TypeIdentifier";
var _TK = "TagKeys";
var _TKP = "TargetKeyPrefix";
var _TKS = "TagKeyString";
var _TNOT = "TotalNumberOfTasks";
var _TR = "TargetResource";
var _TRR = "TagResourceRequest";
var _TS = "TagSet";
var _TSC = "TransitionStorageClass";
var _TSi = "TimeStamp";
var _TT = "TargetType";
var _TVS = "TagValueString";
var _Ta = "Target";
var _Tag = "Tag";
var _Tagg = "Tagging";
var _Ti = "Time";
var _Tim = "Timers";
var _Tr = "Transitions";
var _Tra = "Transition";
var _UA = "UserArguments";
var _UAGLR = "UpdateAccessGrantsLocationRequest";
var _UM = "UserMetadata";
var _UMSC = "UnModifiedSinceConstraint";
var _USLGR = "UpdateStorageLensGroupRequest";
var _V = "Value";
var _VC = "VpcConfiguration";
var _VCe = "VersioningConfiguration";
var _VI = "VpcId";
var _aa = "application_arn";
var _b = "bucket";
var _dS = "durationSeconds";
var _e = "entry";
var _g = "granteetype";
var _gr = "granteeidentifier";
var _gra = "grantscope";
var _jS = "jobStatuses";
var _l = "locationscope";
var _lo = "location";
var _m = "member";
var _mR = "maxResults";
var _nT = "nextToken";
var _p = "permission";
var _pr = "privilege";
var _pri = "priority";
var _rJS = "requestedJobStatus";
var _s = "s3prefix";
var _sUR = "statusUpdateReason";
var _t = "target";
var _tK = "tagKeys";
var _tT = "targetType";
var _v = "value";
var _ve = '<?xml version="1.0" encoding="UTF-8"?>';
var _xaa = "x-amz-acl";
var _xaai = "x-amz-account-id";
var _xabole = "x-amz-bucket-object-lock-enabled";
var _xacrsba = "x-amz-confirm-remove-self-bucket-access";
var _xagfc = "x-amz-grant-full-control";
var _xagr = "x-amz-grant-read";
var _xagra = "x-amz-grant-read-acp";
var _xagw = "x-amz-grant-write";
var _xagwa = "x-amz-grant-write-acp";
var _xam = "x-amz-mfa";
var _xaoi = "x-amz-outpost-id";
var parseBody = /* @__PURE__ */ __name((streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
  if (encoded.length) {
    const parser = new import_fast_xml_parser.XMLParser({
      attributeNamePrefix: "",
      htmlEntities: true,
      ignoreAttributes: false,
      ignoreDeclaration: true,
      parseTagValue: false,
      trimValues: false,
      tagValueProcessor: (_, val) => val.trim() === "" && val.includes("\n") ? "" : void 0
    });
    parser.addEntity("#xD", "\r");
    parser.addEntity("#10", "\n");
    const parsedObj = parser.parse(encoded);
    const textNodeName = "#text";
    const key = Object.keys(parsedObj)[0];
    const parsedObjToReturn = parsedObj[key];
    if (parsedObjToReturn[textNodeName]) {
      parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
      delete parsedObjToReturn[textNodeName];
    }
    return (0, import_smithy_client.getValueFromTextNode)(parsedObjToReturn);
  }
  return {};
}), "parseBody");
var parseErrorBody = /* @__PURE__ */ __name(async (errorBody, context) => {
  const value = await parseBody(errorBody, context);
  if (value.Error) {
    value.Error.message = value.Error.message ?? value.Error.Message;
  }
  return value;
}, "parseErrorBody");
var loadRestXmlErrorCode = /* @__PURE__ */ __name((output, data) => {
  var _a;
  if (((_a = data.Error) == null ? void 0 : _a.Code) !== void 0) {
    return data.Error.Code;
  }
  if (output.statusCode == 404) {
    return "NotFound";
  }
}, "loadRestXmlErrorCode");

// src/commands/AssociateAccessGrantsIdentityCenterCommand.ts
var _AssociateAccessGrantsIdentityCenterCommand = class _AssociateAccessGrantsIdentityCenterCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control2.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "AssociateAccessGrantsIdentityCenter", {}).n("S3ControlClient", "AssociateAccessGrantsIdentityCenterCommand").f(void 0, void 0).ser(se_AssociateAccessGrantsIdentityCenterCommand).de(de_AssociateAccessGrantsIdentityCenterCommand).build() {
};
__name(_AssociateAccessGrantsIdentityCenterCommand, "AssociateAccessGrantsIdentityCenterCommand");
var AssociateAccessGrantsIdentityCenterCommand = _AssociateAccessGrantsIdentityCenterCommand;

// src/commands/CreateAccessGrantCommand.ts
var import_middleware_sdk_s3_control3 = require("@aws-sdk/middleware-sdk-s3-control");





var _CreateAccessGrantCommand = class _CreateAccessGrantCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control3.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "CreateAccessGrant", {}).n("S3ControlClient", "CreateAccessGrantCommand").f(void 0, void 0).ser(se_CreateAccessGrantCommand).de(de_CreateAccessGrantCommand).build() {
};
__name(_CreateAccessGrantCommand, "CreateAccessGrantCommand");
var CreateAccessGrantCommand = _CreateAccessGrantCommand;

// src/commands/CreateAccessGrantsInstanceCommand.ts
var import_middleware_sdk_s3_control4 = require("@aws-sdk/middleware-sdk-s3-control");





var _CreateAccessGrantsInstanceCommand = class _CreateAccessGrantsInstanceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control4.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "CreateAccessGrantsInstance", {}).n("S3ControlClient", "CreateAccessGrantsInstanceCommand").f(void 0, void 0).ser(se_CreateAccessGrantsInstanceCommand).de(de_CreateAccessGrantsInstanceCommand).build() {
};
__name(_CreateAccessGrantsInstanceCommand, "CreateAccessGrantsInstanceCommand");
var CreateAccessGrantsInstanceCommand = _CreateAccessGrantsInstanceCommand;

// src/commands/CreateAccessGrantsLocationCommand.ts
var import_middleware_sdk_s3_control5 = require("@aws-sdk/middleware-sdk-s3-control");





var _CreateAccessGrantsLocationCommand = class _CreateAccessGrantsLocationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control5.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "CreateAccessGrantsLocation", {}).n("S3ControlClient", "CreateAccessGrantsLocationCommand").f(void 0, void 0).ser(se_CreateAccessGrantsLocationCommand).de(de_CreateAccessGrantsLocationCommand).build() {
};
__name(_CreateAccessGrantsLocationCommand, "CreateAccessGrantsLocationCommand");
var CreateAccessGrantsLocationCommand = _CreateAccessGrantsLocationCommand;

// src/commands/CreateAccessPointCommand.ts
var import_middleware_sdk_s3_control6 = require("@aws-sdk/middleware-sdk-s3-control");




var _CreateAccessPointCommand = class _CreateAccessPointCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" },
  Bucket: { type: "contextParams", name: "Bucket" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control6.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "CreateAccessPoint", {}).n("S3ControlClient", "CreateAccessPointCommand").f(void 0, void 0).ser(se_CreateAccessPointCommand).de(de_CreateAccessPointCommand).build() {
};
__name(_CreateAccessPointCommand, "CreateAccessPointCommand");
var CreateAccessPointCommand = _CreateAccessPointCommand;

// src/commands/CreateAccessPointForObjectLambdaCommand.ts
var import_middleware_sdk_s3_control7 = require("@aws-sdk/middleware-sdk-s3-control");




var _CreateAccessPointForObjectLambdaCommand = class _CreateAccessPointForObjectLambdaCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control7.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "CreateAccessPointForObjectLambda", {}).n("S3ControlClient", "CreateAccessPointForObjectLambdaCommand").f(void 0, void 0).ser(se_CreateAccessPointForObjectLambdaCommand).de(de_CreateAccessPointForObjectLambdaCommand).build() {
};
__name(_CreateAccessPointForObjectLambdaCommand, "CreateAccessPointForObjectLambdaCommand");
var CreateAccessPointForObjectLambdaCommand = _CreateAccessPointForObjectLambdaCommand;

// src/commands/CreateBucketCommand.ts
var import_middleware_sdk_s3_control8 = require("@aws-sdk/middleware-sdk-s3-control");





var _CreateBucketCommand = class _CreateBucketCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  OutpostId: { type: "contextParams", name: "OutpostId" },
  Bucket: { type: "contextParams", name: "Bucket" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control8.getRedirectFromPostIdPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "CreateBucket", {}).n("S3ControlClient", "CreateBucketCommand").f(void 0, void 0).ser(se_CreateBucketCommand).de(de_CreateBucketCommand).build() {
};
__name(_CreateBucketCommand, "CreateBucketCommand");
var CreateBucketCommand = _CreateBucketCommand;

// src/commands/CreateJobCommand.ts
var import_middleware_sdk_s3_control9 = require("@aws-sdk/middleware-sdk-s3-control");




var _CreateJobCommand = class _CreateJobCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control9.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "CreateJob", {}).n("S3ControlClient", "CreateJobCommand").f(void 0, void 0).ser(se_CreateJobCommand).de(de_CreateJobCommand).build() {
};
__name(_CreateJobCommand, "CreateJobCommand");
var CreateJobCommand = _CreateJobCommand;

// src/commands/CreateMultiRegionAccessPointCommand.ts
var import_middleware_sdk_s3_control10 = require("@aws-sdk/middleware-sdk-s3-control");





var _CreateMultiRegionAccessPointCommand = class _CreateMultiRegionAccessPointCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control10.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "CreateMultiRegionAccessPoint", {}).n("S3ControlClient", "CreateMultiRegionAccessPointCommand").f(void 0, void 0).ser(se_CreateMultiRegionAccessPointCommand).de(de_CreateMultiRegionAccessPointCommand).build() {
};
__name(_CreateMultiRegionAccessPointCommand, "CreateMultiRegionAccessPointCommand");
var CreateMultiRegionAccessPointCommand = _CreateMultiRegionAccessPointCommand;

// src/commands/CreateStorageLensGroupCommand.ts
var import_middleware_sdk_s3_control11 = require("@aws-sdk/middleware-sdk-s3-control");




var _CreateStorageLensGroupCommand = class _CreateStorageLensGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control11.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "CreateStorageLensGroup", {}).n("S3ControlClient", "CreateStorageLensGroupCommand").f(void 0, void 0).ser(se_CreateStorageLensGroupCommand).de(de_CreateStorageLensGroupCommand).build() {
};
__name(_CreateStorageLensGroupCommand, "CreateStorageLensGroupCommand");
var CreateStorageLensGroupCommand = _CreateStorageLensGroupCommand;

// src/commands/DeleteAccessGrantCommand.ts
var import_middleware_sdk_s3_control12 = require("@aws-sdk/middleware-sdk-s3-control");





var _DeleteAccessGrantCommand = class _DeleteAccessGrantCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control12.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "DeleteAccessGrant", {}).n("S3ControlClient", "DeleteAccessGrantCommand").f(void 0, void 0).ser(se_DeleteAccessGrantCommand).de(de_DeleteAccessGrantCommand).build() {
};
__name(_DeleteAccessGrantCommand, "DeleteAccessGrantCommand");
var DeleteAccessGrantCommand = _DeleteAccessGrantCommand;

// src/commands/DeleteAccessGrantsInstanceCommand.ts
var import_middleware_sdk_s3_control13 = require("@aws-sdk/middleware-sdk-s3-control");





var _DeleteAccessGrantsInstanceCommand = class _DeleteAccessGrantsInstanceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control13.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "DeleteAccessGrantsInstance", {}).n("S3ControlClient", "DeleteAccessGrantsInstanceCommand").f(void 0, void 0).ser(se_DeleteAccessGrantsInstanceCommand).de(de_DeleteAccessGrantsInstanceCommand).build() {
};
__name(_DeleteAccessGrantsInstanceCommand, "DeleteAccessGrantsInstanceCommand");
var DeleteAccessGrantsInstanceCommand = _DeleteAccessGrantsInstanceCommand;

// src/commands/DeleteAccessGrantsInstanceResourcePolicyCommand.ts
var import_middleware_sdk_s3_control14 = require("@aws-sdk/middleware-sdk-s3-control");





var _DeleteAccessGrantsInstanceResourcePolicyCommand = class _DeleteAccessGrantsInstanceResourcePolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control14.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "DeleteAccessGrantsInstanceResourcePolicy", {}).n("S3ControlClient", "DeleteAccessGrantsInstanceResourcePolicyCommand").f(void 0, void 0).ser(se_DeleteAccessGrantsInstanceResourcePolicyCommand).de(de_DeleteAccessGrantsInstanceResourcePolicyCommand).build() {
};
__name(_DeleteAccessGrantsInstanceResourcePolicyCommand, "DeleteAccessGrantsInstanceResourcePolicyCommand");
var DeleteAccessGrantsInstanceResourcePolicyCommand = _DeleteAccessGrantsInstanceResourcePolicyCommand;

// src/commands/DeleteAccessGrantsLocationCommand.ts
var import_middleware_sdk_s3_control15 = require("@aws-sdk/middleware-sdk-s3-control");





var _DeleteAccessGrantsLocationCommand = class _DeleteAccessGrantsLocationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control15.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "DeleteAccessGrantsLocation", {}).n("S3ControlClient", "DeleteAccessGrantsLocationCommand").f(void 0, void 0).ser(se_DeleteAccessGrantsLocationCommand).de(de_DeleteAccessGrantsLocationCommand).build() {
};
__name(_DeleteAccessGrantsLocationCommand, "DeleteAccessGrantsLocationCommand");
var DeleteAccessGrantsLocationCommand = _DeleteAccessGrantsLocationCommand;

// src/commands/DeleteAccessPointCommand.ts
var import_middleware_sdk_s3_control16 = require("@aws-sdk/middleware-sdk-s3-control");




var _DeleteAccessPointCommand = class _DeleteAccessPointCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccessPointName: { type: "contextParams", name: "AccessPointName" },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control16.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "DeleteAccessPoint", {}).n("S3ControlClient", "DeleteAccessPointCommand").f(void 0, void 0).ser(se_DeleteAccessPointCommand).de(de_DeleteAccessPointCommand).build() {
};
__name(_DeleteAccessPointCommand, "DeleteAccessPointCommand");
var DeleteAccessPointCommand = _DeleteAccessPointCommand;

// src/commands/DeleteAccessPointForObjectLambdaCommand.ts
var import_middleware_sdk_s3_control17 = require("@aws-sdk/middleware-sdk-s3-control");




var _DeleteAccessPointForObjectLambdaCommand = class _DeleteAccessPointForObjectLambdaCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control17.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "DeleteAccessPointForObjectLambda", {}).n("S3ControlClient", "DeleteAccessPointForObjectLambdaCommand").f(void 0, void 0).ser(se_DeleteAccessPointForObjectLambdaCommand).de(de_DeleteAccessPointForObjectLambdaCommand).build() {
};
__name(_DeleteAccessPointForObjectLambdaCommand, "DeleteAccessPointForObjectLambdaCommand");
var DeleteAccessPointForObjectLambdaCommand = _DeleteAccessPointForObjectLambdaCommand;

// src/commands/DeleteAccessPointPolicyCommand.ts
var import_middleware_sdk_s3_control18 = require("@aws-sdk/middleware-sdk-s3-control");




var _DeleteAccessPointPolicyCommand = class _DeleteAccessPointPolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccessPointName: { type: "contextParams", name: "AccessPointName" },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control18.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "DeleteAccessPointPolicy", {}).n("S3ControlClient", "DeleteAccessPointPolicyCommand").f(void 0, void 0).ser(se_DeleteAccessPointPolicyCommand).de(de_DeleteAccessPointPolicyCommand).build() {
};
__name(_DeleteAccessPointPolicyCommand, "DeleteAccessPointPolicyCommand");
var DeleteAccessPointPolicyCommand = _DeleteAccessPointPolicyCommand;

// src/commands/DeleteAccessPointPolicyForObjectLambdaCommand.ts
var import_middleware_sdk_s3_control19 = require("@aws-sdk/middleware-sdk-s3-control");




var _DeleteAccessPointPolicyForObjectLambdaCommand = class _DeleteAccessPointPolicyForObjectLambdaCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control19.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "DeleteAccessPointPolicyForObjectLambda", {}).n("S3ControlClient", "DeleteAccessPointPolicyForObjectLambdaCommand").f(void 0, void 0).ser(se_DeleteAccessPointPolicyForObjectLambdaCommand).de(de_DeleteAccessPointPolicyForObjectLambdaCommand).build() {
};
__name(_DeleteAccessPointPolicyForObjectLambdaCommand, "DeleteAccessPointPolicyForObjectLambdaCommand");
var DeleteAccessPointPolicyForObjectLambdaCommand = _DeleteAccessPointPolicyForObjectLambdaCommand;

// src/commands/DeleteBucketCommand.ts
var import_middleware_sdk_s3_control20 = require("@aws-sdk/middleware-sdk-s3-control");




var _DeleteBucketCommand = class _DeleteBucketCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" },
  Bucket: { type: "contextParams", name: "Bucket" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control20.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "DeleteBucket", {}).n("S3ControlClient", "DeleteBucketCommand").f(void 0, void 0).ser(se_DeleteBucketCommand).de(de_DeleteBucketCommand).build() {
};
__name(_DeleteBucketCommand, "DeleteBucketCommand");
var DeleteBucketCommand = _DeleteBucketCommand;

// src/commands/DeleteBucketLifecycleConfigurationCommand.ts
var import_middleware_sdk_s3_control21 = require("@aws-sdk/middleware-sdk-s3-control");




var _DeleteBucketLifecycleConfigurationCommand = class _DeleteBucketLifecycleConfigurationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" },
  Bucket: { type: "contextParams", name: "Bucket" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control21.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "DeleteBucketLifecycleConfiguration", {}).n("S3ControlClient", "DeleteBucketLifecycleConfigurationCommand").f(void 0, void 0).ser(se_DeleteBucketLifecycleConfigurationCommand).de(de_DeleteBucketLifecycleConfigurationCommand).build() {
};
__name(_DeleteBucketLifecycleConfigurationCommand, "DeleteBucketLifecycleConfigurationCommand");
var DeleteBucketLifecycleConfigurationCommand = _DeleteBucketLifecycleConfigurationCommand;

// src/commands/DeleteBucketPolicyCommand.ts
var import_middleware_sdk_s3_control22 = require("@aws-sdk/middleware-sdk-s3-control");




var _DeleteBucketPolicyCommand = class _DeleteBucketPolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" },
  Bucket: { type: "contextParams", name: "Bucket" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control22.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "DeleteBucketPolicy", {}).n("S3ControlClient", "DeleteBucketPolicyCommand").f(void 0, void 0).ser(se_DeleteBucketPolicyCommand).de(de_DeleteBucketPolicyCommand).build() {
};
__name(_DeleteBucketPolicyCommand, "DeleteBucketPolicyCommand");
var DeleteBucketPolicyCommand = _DeleteBucketPolicyCommand;

// src/commands/DeleteBucketReplicationCommand.ts
var import_middleware_sdk_s3_control23 = require("@aws-sdk/middleware-sdk-s3-control");




var _DeleteBucketReplicationCommand = class _DeleteBucketReplicationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" },
  Bucket: { type: "contextParams", name: "Bucket" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control23.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "DeleteBucketReplication", {}).n("S3ControlClient", "DeleteBucketReplicationCommand").f(void 0, void 0).ser(se_DeleteBucketReplicationCommand).de(de_DeleteBucketReplicationCommand).build() {
};
__name(_DeleteBucketReplicationCommand, "DeleteBucketReplicationCommand");
var DeleteBucketReplicationCommand = _DeleteBucketReplicationCommand;

// src/commands/DeleteBucketTaggingCommand.ts
var import_middleware_sdk_s3_control24 = require("@aws-sdk/middleware-sdk-s3-control");




var _DeleteBucketTaggingCommand = class _DeleteBucketTaggingCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" },
  Bucket: { type: "contextParams", name: "Bucket" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control24.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "DeleteBucketTagging", {}).n("S3ControlClient", "DeleteBucketTaggingCommand").f(void 0, void 0).ser(se_DeleteBucketTaggingCommand).de(de_DeleteBucketTaggingCommand).build() {
};
__name(_DeleteBucketTaggingCommand, "DeleteBucketTaggingCommand");
var DeleteBucketTaggingCommand = _DeleteBucketTaggingCommand;

// src/commands/DeleteJobTaggingCommand.ts
var import_middleware_sdk_s3_control25 = require("@aws-sdk/middleware-sdk-s3-control");




var _DeleteJobTaggingCommand = class _DeleteJobTaggingCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control25.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "DeleteJobTagging", {}).n("S3ControlClient", "DeleteJobTaggingCommand").f(void 0, void 0).ser(se_DeleteJobTaggingCommand).de(de_DeleteJobTaggingCommand).build() {
};
__name(_DeleteJobTaggingCommand, "DeleteJobTaggingCommand");
var DeleteJobTaggingCommand = _DeleteJobTaggingCommand;

// src/commands/DeleteMultiRegionAccessPointCommand.ts
var import_middleware_sdk_s3_control26 = require("@aws-sdk/middleware-sdk-s3-control");





var _DeleteMultiRegionAccessPointCommand = class _DeleteMultiRegionAccessPointCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control26.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "DeleteMultiRegionAccessPoint", {}).n("S3ControlClient", "DeleteMultiRegionAccessPointCommand").f(void 0, void 0).ser(se_DeleteMultiRegionAccessPointCommand).de(de_DeleteMultiRegionAccessPointCommand).build() {
};
__name(_DeleteMultiRegionAccessPointCommand, "DeleteMultiRegionAccessPointCommand");
var DeleteMultiRegionAccessPointCommand = _DeleteMultiRegionAccessPointCommand;

// src/commands/DeletePublicAccessBlockCommand.ts
var import_middleware_sdk_s3_control27 = require("@aws-sdk/middleware-sdk-s3-control");




var _DeletePublicAccessBlockCommand = class _DeletePublicAccessBlockCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control27.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "DeletePublicAccessBlock", {}).n("S3ControlClient", "DeletePublicAccessBlockCommand").f(void 0, void 0).ser(se_DeletePublicAccessBlockCommand).de(de_DeletePublicAccessBlockCommand).build() {
};
__name(_DeletePublicAccessBlockCommand, "DeletePublicAccessBlockCommand");
var DeletePublicAccessBlockCommand = _DeletePublicAccessBlockCommand;

// src/commands/DeleteStorageLensConfigurationCommand.ts
var import_middleware_sdk_s3_control28 = require("@aws-sdk/middleware-sdk-s3-control");




var _DeleteStorageLensConfigurationCommand = class _DeleteStorageLensConfigurationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control28.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "DeleteStorageLensConfiguration", {}).n("S3ControlClient", "DeleteStorageLensConfigurationCommand").f(void 0, void 0).ser(se_DeleteStorageLensConfigurationCommand).de(de_DeleteStorageLensConfigurationCommand).build() {
};
__name(_DeleteStorageLensConfigurationCommand, "DeleteStorageLensConfigurationCommand");
var DeleteStorageLensConfigurationCommand = _DeleteStorageLensConfigurationCommand;

// src/commands/DeleteStorageLensConfigurationTaggingCommand.ts
var import_middleware_sdk_s3_control29 = require("@aws-sdk/middleware-sdk-s3-control");




var _DeleteStorageLensConfigurationTaggingCommand = class _DeleteStorageLensConfigurationTaggingCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control29.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "DeleteStorageLensConfigurationTagging", {}).n("S3ControlClient", "DeleteStorageLensConfigurationTaggingCommand").f(void 0, void 0).ser(se_DeleteStorageLensConfigurationTaggingCommand).de(de_DeleteStorageLensConfigurationTaggingCommand).build() {
};
__name(_DeleteStorageLensConfigurationTaggingCommand, "DeleteStorageLensConfigurationTaggingCommand");
var DeleteStorageLensConfigurationTaggingCommand = _DeleteStorageLensConfigurationTaggingCommand;

// src/commands/DeleteStorageLensGroupCommand.ts
var import_middleware_sdk_s3_control30 = require("@aws-sdk/middleware-sdk-s3-control");




var _DeleteStorageLensGroupCommand = class _DeleteStorageLensGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control30.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "DeleteStorageLensGroup", {}).n("S3ControlClient", "DeleteStorageLensGroupCommand").f(void 0, void 0).ser(se_DeleteStorageLensGroupCommand).de(de_DeleteStorageLensGroupCommand).build() {
};
__name(_DeleteStorageLensGroupCommand, "DeleteStorageLensGroupCommand");
var DeleteStorageLensGroupCommand = _DeleteStorageLensGroupCommand;

// src/commands/DescribeJobCommand.ts
var import_middleware_sdk_s3_control31 = require("@aws-sdk/middleware-sdk-s3-control");




var _DescribeJobCommand = class _DescribeJobCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control31.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "DescribeJob", {}).n("S3ControlClient", "DescribeJobCommand").f(void 0, void 0).ser(se_DescribeJobCommand).de(de_DescribeJobCommand).build() {
};
__name(_DescribeJobCommand, "DescribeJobCommand");
var DescribeJobCommand = _DescribeJobCommand;

// src/commands/DescribeMultiRegionAccessPointOperationCommand.ts
var import_middleware_sdk_s3_control32 = require("@aws-sdk/middleware-sdk-s3-control");





var _DescribeMultiRegionAccessPointOperationCommand = class _DescribeMultiRegionAccessPointOperationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control32.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "DescribeMultiRegionAccessPointOperation", {}).n("S3ControlClient", "DescribeMultiRegionAccessPointOperationCommand").f(void 0, void 0).ser(se_DescribeMultiRegionAccessPointOperationCommand).de(de_DescribeMultiRegionAccessPointOperationCommand).build() {
};
__name(_DescribeMultiRegionAccessPointOperationCommand, "DescribeMultiRegionAccessPointOperationCommand");
var DescribeMultiRegionAccessPointOperationCommand = _DescribeMultiRegionAccessPointOperationCommand;

// src/commands/DissociateAccessGrantsIdentityCenterCommand.ts
var import_middleware_sdk_s3_control33 = require("@aws-sdk/middleware-sdk-s3-control");





var _DissociateAccessGrantsIdentityCenterCommand = class _DissociateAccessGrantsIdentityCenterCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control33.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "DissociateAccessGrantsIdentityCenter", {}).n("S3ControlClient", "DissociateAccessGrantsIdentityCenterCommand").f(void 0, void 0).ser(se_DissociateAccessGrantsIdentityCenterCommand).de(de_DissociateAccessGrantsIdentityCenterCommand).build() {
};
__name(_DissociateAccessGrantsIdentityCenterCommand, "DissociateAccessGrantsIdentityCenterCommand");
var DissociateAccessGrantsIdentityCenterCommand = _DissociateAccessGrantsIdentityCenterCommand;

// src/commands/GetAccessGrantCommand.ts
var import_middleware_sdk_s3_control34 = require("@aws-sdk/middleware-sdk-s3-control");





var _GetAccessGrantCommand = class _GetAccessGrantCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control34.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "GetAccessGrant", {}).n("S3ControlClient", "GetAccessGrantCommand").f(void 0, void 0).ser(se_GetAccessGrantCommand).de(de_GetAccessGrantCommand).build() {
};
__name(_GetAccessGrantCommand, "GetAccessGrantCommand");
var GetAccessGrantCommand = _GetAccessGrantCommand;

// src/commands/GetAccessGrantsInstanceCommand.ts
var import_middleware_sdk_s3_control35 = require("@aws-sdk/middleware-sdk-s3-control");





var _GetAccessGrantsInstanceCommand = class _GetAccessGrantsInstanceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control35.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "GetAccessGrantsInstance", {}).n("S3ControlClient", "GetAccessGrantsInstanceCommand").f(void 0, void 0).ser(se_GetAccessGrantsInstanceCommand).de(de_GetAccessGrantsInstanceCommand).build() {
};
__name(_GetAccessGrantsInstanceCommand, "GetAccessGrantsInstanceCommand");
var GetAccessGrantsInstanceCommand = _GetAccessGrantsInstanceCommand;

// src/commands/GetAccessGrantsInstanceForPrefixCommand.ts
var import_middleware_sdk_s3_control36 = require("@aws-sdk/middleware-sdk-s3-control");





var _GetAccessGrantsInstanceForPrefixCommand = class _GetAccessGrantsInstanceForPrefixCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control36.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "GetAccessGrantsInstanceForPrefix", {}).n("S3ControlClient", "GetAccessGrantsInstanceForPrefixCommand").f(void 0, void 0).ser(se_GetAccessGrantsInstanceForPrefixCommand).de(de_GetAccessGrantsInstanceForPrefixCommand).build() {
};
__name(_GetAccessGrantsInstanceForPrefixCommand, "GetAccessGrantsInstanceForPrefixCommand");
var GetAccessGrantsInstanceForPrefixCommand = _GetAccessGrantsInstanceForPrefixCommand;

// src/commands/GetAccessGrantsInstanceResourcePolicyCommand.ts
var import_middleware_sdk_s3_control37 = require("@aws-sdk/middleware-sdk-s3-control");





var _GetAccessGrantsInstanceResourcePolicyCommand = class _GetAccessGrantsInstanceResourcePolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control37.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "GetAccessGrantsInstanceResourcePolicy", {}).n("S3ControlClient", "GetAccessGrantsInstanceResourcePolicyCommand").f(void 0, void 0).ser(se_GetAccessGrantsInstanceResourcePolicyCommand).de(de_GetAccessGrantsInstanceResourcePolicyCommand).build() {
};
__name(_GetAccessGrantsInstanceResourcePolicyCommand, "GetAccessGrantsInstanceResourcePolicyCommand");
var GetAccessGrantsInstanceResourcePolicyCommand = _GetAccessGrantsInstanceResourcePolicyCommand;

// src/commands/GetAccessGrantsLocationCommand.ts
var import_middleware_sdk_s3_control38 = require("@aws-sdk/middleware-sdk-s3-control");





var _GetAccessGrantsLocationCommand = class _GetAccessGrantsLocationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control38.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "GetAccessGrantsLocation", {}).n("S3ControlClient", "GetAccessGrantsLocationCommand").f(void 0, void 0).ser(se_GetAccessGrantsLocationCommand).de(de_GetAccessGrantsLocationCommand).build() {
};
__name(_GetAccessGrantsLocationCommand, "GetAccessGrantsLocationCommand");
var GetAccessGrantsLocationCommand = _GetAccessGrantsLocationCommand;

// src/commands/GetAccessPointCommand.ts
var import_middleware_sdk_s3_control39 = require("@aws-sdk/middleware-sdk-s3-control");




var _GetAccessPointCommand = class _GetAccessPointCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccessPointName: { type: "contextParams", name: "AccessPointName" },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control39.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "GetAccessPoint", {}).n("S3ControlClient", "GetAccessPointCommand").f(void 0, void 0).ser(se_GetAccessPointCommand).de(de_GetAccessPointCommand).build() {
};
__name(_GetAccessPointCommand, "GetAccessPointCommand");
var GetAccessPointCommand = _GetAccessPointCommand;

// src/commands/GetAccessPointConfigurationForObjectLambdaCommand.ts
var import_middleware_sdk_s3_control40 = require("@aws-sdk/middleware-sdk-s3-control");




var _GetAccessPointConfigurationForObjectLambdaCommand = class _GetAccessPointConfigurationForObjectLambdaCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control40.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "GetAccessPointConfigurationForObjectLambda", {}).n("S3ControlClient", "GetAccessPointConfigurationForObjectLambdaCommand").f(void 0, void 0).ser(se_GetAccessPointConfigurationForObjectLambdaCommand).de(de_GetAccessPointConfigurationForObjectLambdaCommand).build() {
};
__name(_GetAccessPointConfigurationForObjectLambdaCommand, "GetAccessPointConfigurationForObjectLambdaCommand");
var GetAccessPointConfigurationForObjectLambdaCommand = _GetAccessPointConfigurationForObjectLambdaCommand;

// src/commands/GetAccessPointForObjectLambdaCommand.ts
var import_middleware_sdk_s3_control41 = require("@aws-sdk/middleware-sdk-s3-control");




var _GetAccessPointForObjectLambdaCommand = class _GetAccessPointForObjectLambdaCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control41.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "GetAccessPointForObjectLambda", {}).n("S3ControlClient", "GetAccessPointForObjectLambdaCommand").f(void 0, void 0).ser(se_GetAccessPointForObjectLambdaCommand).de(de_GetAccessPointForObjectLambdaCommand).build() {
};
__name(_GetAccessPointForObjectLambdaCommand, "GetAccessPointForObjectLambdaCommand");
var GetAccessPointForObjectLambdaCommand = _GetAccessPointForObjectLambdaCommand;

// src/commands/GetAccessPointPolicyCommand.ts
var import_middleware_sdk_s3_control42 = require("@aws-sdk/middleware-sdk-s3-control");




var _GetAccessPointPolicyCommand = class _GetAccessPointPolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccessPointName: { type: "contextParams", name: "AccessPointName" },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control42.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "GetAccessPointPolicy", {}).n("S3ControlClient", "GetAccessPointPolicyCommand").f(void 0, void 0).ser(se_GetAccessPointPolicyCommand).de(de_GetAccessPointPolicyCommand).build() {
};
__name(_GetAccessPointPolicyCommand, "GetAccessPointPolicyCommand");
var GetAccessPointPolicyCommand = _GetAccessPointPolicyCommand;

// src/commands/GetAccessPointPolicyForObjectLambdaCommand.ts
var import_middleware_sdk_s3_control43 = require("@aws-sdk/middleware-sdk-s3-control");




var _GetAccessPointPolicyForObjectLambdaCommand = class _GetAccessPointPolicyForObjectLambdaCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control43.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "GetAccessPointPolicyForObjectLambda", {}).n("S3ControlClient", "GetAccessPointPolicyForObjectLambdaCommand").f(void 0, void 0).ser(se_GetAccessPointPolicyForObjectLambdaCommand).de(de_GetAccessPointPolicyForObjectLambdaCommand).build() {
};
__name(_GetAccessPointPolicyForObjectLambdaCommand, "GetAccessPointPolicyForObjectLambdaCommand");
var GetAccessPointPolicyForObjectLambdaCommand = _GetAccessPointPolicyForObjectLambdaCommand;

// src/commands/GetAccessPointPolicyStatusCommand.ts
var import_middleware_sdk_s3_control44 = require("@aws-sdk/middleware-sdk-s3-control");




var _GetAccessPointPolicyStatusCommand = class _GetAccessPointPolicyStatusCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccessPointName: { type: "contextParams", name: "AccessPointName" },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control44.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "GetAccessPointPolicyStatus", {}).n("S3ControlClient", "GetAccessPointPolicyStatusCommand").f(void 0, void 0).ser(se_GetAccessPointPolicyStatusCommand).de(de_GetAccessPointPolicyStatusCommand).build() {
};
__name(_GetAccessPointPolicyStatusCommand, "GetAccessPointPolicyStatusCommand");
var GetAccessPointPolicyStatusCommand = _GetAccessPointPolicyStatusCommand;

// src/commands/GetAccessPointPolicyStatusForObjectLambdaCommand.ts
var import_middleware_sdk_s3_control45 = require("@aws-sdk/middleware-sdk-s3-control");




var _GetAccessPointPolicyStatusForObjectLambdaCommand = class _GetAccessPointPolicyStatusForObjectLambdaCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control45.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "GetAccessPointPolicyStatusForObjectLambda", {}).n("S3ControlClient", "GetAccessPointPolicyStatusForObjectLambdaCommand").f(void 0, void 0).ser(se_GetAccessPointPolicyStatusForObjectLambdaCommand).de(de_GetAccessPointPolicyStatusForObjectLambdaCommand).build() {
};
__name(_GetAccessPointPolicyStatusForObjectLambdaCommand, "GetAccessPointPolicyStatusForObjectLambdaCommand");
var GetAccessPointPolicyStatusForObjectLambdaCommand = _GetAccessPointPolicyStatusForObjectLambdaCommand;

// src/commands/GetBucketCommand.ts
var import_middleware_sdk_s3_control46 = require("@aws-sdk/middleware-sdk-s3-control");




var _GetBucketCommand = class _GetBucketCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" },
  Bucket: { type: "contextParams", name: "Bucket" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control46.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "GetBucket", {}).n("S3ControlClient", "GetBucketCommand").f(void 0, void 0).ser(se_GetBucketCommand).de(de_GetBucketCommand).build() {
};
__name(_GetBucketCommand, "GetBucketCommand");
var GetBucketCommand = _GetBucketCommand;

// src/commands/GetBucketLifecycleConfigurationCommand.ts
var import_middleware_sdk_s3_control47 = require("@aws-sdk/middleware-sdk-s3-control");




var _GetBucketLifecycleConfigurationCommand = class _GetBucketLifecycleConfigurationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" },
  Bucket: { type: "contextParams", name: "Bucket" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control47.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "GetBucketLifecycleConfiguration", {}).n("S3ControlClient", "GetBucketLifecycleConfigurationCommand").f(void 0, void 0).ser(se_GetBucketLifecycleConfigurationCommand).de(de_GetBucketLifecycleConfigurationCommand).build() {
};
__name(_GetBucketLifecycleConfigurationCommand, "GetBucketLifecycleConfigurationCommand");
var GetBucketLifecycleConfigurationCommand = _GetBucketLifecycleConfigurationCommand;

// src/commands/GetBucketPolicyCommand.ts
var import_middleware_sdk_s3_control48 = require("@aws-sdk/middleware-sdk-s3-control");




var _GetBucketPolicyCommand = class _GetBucketPolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" },
  Bucket: { type: "contextParams", name: "Bucket" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control48.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "GetBucketPolicy", {}).n("S3ControlClient", "GetBucketPolicyCommand").f(void 0, void 0).ser(se_GetBucketPolicyCommand).de(de_GetBucketPolicyCommand).build() {
};
__name(_GetBucketPolicyCommand, "GetBucketPolicyCommand");
var GetBucketPolicyCommand = _GetBucketPolicyCommand;

// src/commands/GetBucketReplicationCommand.ts
var import_middleware_sdk_s3_control49 = require("@aws-sdk/middleware-sdk-s3-control");




var _GetBucketReplicationCommand = class _GetBucketReplicationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" },
  Bucket: { type: "contextParams", name: "Bucket" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control49.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "GetBucketReplication", {}).n("S3ControlClient", "GetBucketReplicationCommand").f(void 0, void 0).ser(se_GetBucketReplicationCommand).de(de_GetBucketReplicationCommand).build() {
};
__name(_GetBucketReplicationCommand, "GetBucketReplicationCommand");
var GetBucketReplicationCommand = _GetBucketReplicationCommand;

// src/commands/GetBucketTaggingCommand.ts
var import_middleware_sdk_s3_control50 = require("@aws-sdk/middleware-sdk-s3-control");




var _GetBucketTaggingCommand = class _GetBucketTaggingCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" },
  Bucket: { type: "contextParams", name: "Bucket" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control50.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "GetBucketTagging", {}).n("S3ControlClient", "GetBucketTaggingCommand").f(void 0, void 0).ser(se_GetBucketTaggingCommand).de(de_GetBucketTaggingCommand).build() {
};
__name(_GetBucketTaggingCommand, "GetBucketTaggingCommand");
var GetBucketTaggingCommand = _GetBucketTaggingCommand;

// src/commands/GetBucketVersioningCommand.ts
var import_middleware_sdk_s3_control51 = require("@aws-sdk/middleware-sdk-s3-control");




var _GetBucketVersioningCommand = class _GetBucketVersioningCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" },
  Bucket: { type: "contextParams", name: "Bucket" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control51.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "GetBucketVersioning", {}).n("S3ControlClient", "GetBucketVersioningCommand").f(void 0, void 0).ser(se_GetBucketVersioningCommand).de(de_GetBucketVersioningCommand).build() {
};
__name(_GetBucketVersioningCommand, "GetBucketVersioningCommand");
var GetBucketVersioningCommand = _GetBucketVersioningCommand;

// src/commands/GetDataAccessCommand.ts
var import_middleware_sdk_s3_control52 = require("@aws-sdk/middleware-sdk-s3-control");





var _GetDataAccessCommand = class _GetDataAccessCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control52.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "GetDataAccess", {}).n("S3ControlClient", "GetDataAccessCommand").f(void 0, GetDataAccessResultFilterSensitiveLog).ser(se_GetDataAccessCommand).de(de_GetDataAccessCommand).build() {
};
__name(_GetDataAccessCommand, "GetDataAccessCommand");
var GetDataAccessCommand = _GetDataAccessCommand;

// src/commands/GetJobTaggingCommand.ts
var import_middleware_sdk_s3_control53 = require("@aws-sdk/middleware-sdk-s3-control");




var _GetJobTaggingCommand = class _GetJobTaggingCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control53.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "GetJobTagging", {}).n("S3ControlClient", "GetJobTaggingCommand").f(void 0, void 0).ser(se_GetJobTaggingCommand).de(de_GetJobTaggingCommand).build() {
};
__name(_GetJobTaggingCommand, "GetJobTaggingCommand");
var GetJobTaggingCommand = _GetJobTaggingCommand;

// src/commands/GetMultiRegionAccessPointCommand.ts
var import_middleware_sdk_s3_control54 = require("@aws-sdk/middleware-sdk-s3-control");





var _GetMultiRegionAccessPointCommand = class _GetMultiRegionAccessPointCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control54.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "GetMultiRegionAccessPoint", {}).n("S3ControlClient", "GetMultiRegionAccessPointCommand").f(void 0, void 0).ser(se_GetMultiRegionAccessPointCommand).de(de_GetMultiRegionAccessPointCommand).build() {
};
__name(_GetMultiRegionAccessPointCommand, "GetMultiRegionAccessPointCommand");
var GetMultiRegionAccessPointCommand = _GetMultiRegionAccessPointCommand;

// src/commands/GetMultiRegionAccessPointPolicyCommand.ts
var import_middleware_sdk_s3_control55 = require("@aws-sdk/middleware-sdk-s3-control");





var _GetMultiRegionAccessPointPolicyCommand = class _GetMultiRegionAccessPointPolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control55.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "GetMultiRegionAccessPointPolicy", {}).n("S3ControlClient", "GetMultiRegionAccessPointPolicyCommand").f(void 0, void 0).ser(se_GetMultiRegionAccessPointPolicyCommand).de(de_GetMultiRegionAccessPointPolicyCommand).build() {
};
__name(_GetMultiRegionAccessPointPolicyCommand, "GetMultiRegionAccessPointPolicyCommand");
var GetMultiRegionAccessPointPolicyCommand = _GetMultiRegionAccessPointPolicyCommand;

// src/commands/GetMultiRegionAccessPointPolicyStatusCommand.ts
var import_middleware_sdk_s3_control56 = require("@aws-sdk/middleware-sdk-s3-control");





var _GetMultiRegionAccessPointPolicyStatusCommand = class _GetMultiRegionAccessPointPolicyStatusCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control56.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "GetMultiRegionAccessPointPolicyStatus", {}).n("S3ControlClient", "GetMultiRegionAccessPointPolicyStatusCommand").f(void 0, void 0).ser(se_GetMultiRegionAccessPointPolicyStatusCommand).de(de_GetMultiRegionAccessPointPolicyStatusCommand).build() {
};
__name(_GetMultiRegionAccessPointPolicyStatusCommand, "GetMultiRegionAccessPointPolicyStatusCommand");
var GetMultiRegionAccessPointPolicyStatusCommand = _GetMultiRegionAccessPointPolicyStatusCommand;

// src/commands/GetMultiRegionAccessPointRoutesCommand.ts
var import_middleware_sdk_s3_control57 = require("@aws-sdk/middleware-sdk-s3-control");





var _GetMultiRegionAccessPointRoutesCommand = class _GetMultiRegionAccessPointRoutesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control57.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "GetMultiRegionAccessPointRoutes", {}).n("S3ControlClient", "GetMultiRegionAccessPointRoutesCommand").f(void 0, void 0).ser(se_GetMultiRegionAccessPointRoutesCommand).de(de_GetMultiRegionAccessPointRoutesCommand).build() {
};
__name(_GetMultiRegionAccessPointRoutesCommand, "GetMultiRegionAccessPointRoutesCommand");
var GetMultiRegionAccessPointRoutesCommand = _GetMultiRegionAccessPointRoutesCommand;

// src/commands/GetPublicAccessBlockCommand.ts
var import_middleware_sdk_s3_control58 = require("@aws-sdk/middleware-sdk-s3-control");




var _GetPublicAccessBlockCommand = class _GetPublicAccessBlockCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control58.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "GetPublicAccessBlock", {}).n("S3ControlClient", "GetPublicAccessBlockCommand").f(void 0, void 0).ser(se_GetPublicAccessBlockCommand).de(de_GetPublicAccessBlockCommand).build() {
};
__name(_GetPublicAccessBlockCommand, "GetPublicAccessBlockCommand");
var GetPublicAccessBlockCommand = _GetPublicAccessBlockCommand;

// src/commands/GetStorageLensConfigurationCommand.ts
var import_middleware_sdk_s3_control59 = require("@aws-sdk/middleware-sdk-s3-control");




var _GetStorageLensConfigurationCommand = class _GetStorageLensConfigurationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control59.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "GetStorageLensConfiguration", {}).n("S3ControlClient", "GetStorageLensConfigurationCommand").f(void 0, void 0).ser(se_GetStorageLensConfigurationCommand).de(de_GetStorageLensConfigurationCommand).build() {
};
__name(_GetStorageLensConfigurationCommand, "GetStorageLensConfigurationCommand");
var GetStorageLensConfigurationCommand = _GetStorageLensConfigurationCommand;

// src/commands/GetStorageLensConfigurationTaggingCommand.ts
var import_middleware_sdk_s3_control60 = require("@aws-sdk/middleware-sdk-s3-control");




var _GetStorageLensConfigurationTaggingCommand = class _GetStorageLensConfigurationTaggingCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control60.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "GetStorageLensConfigurationTagging", {}).n("S3ControlClient", "GetStorageLensConfigurationTaggingCommand").f(void 0, void 0).ser(se_GetStorageLensConfigurationTaggingCommand).de(de_GetStorageLensConfigurationTaggingCommand).build() {
};
__name(_GetStorageLensConfigurationTaggingCommand, "GetStorageLensConfigurationTaggingCommand");
var GetStorageLensConfigurationTaggingCommand = _GetStorageLensConfigurationTaggingCommand;

// src/commands/GetStorageLensGroupCommand.ts
var import_middleware_sdk_s3_control61 = require("@aws-sdk/middleware-sdk-s3-control");




var _GetStorageLensGroupCommand = class _GetStorageLensGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control61.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "GetStorageLensGroup", {}).n("S3ControlClient", "GetStorageLensGroupCommand").f(void 0, void 0).ser(se_GetStorageLensGroupCommand).de(de_GetStorageLensGroupCommand).build() {
};
__name(_GetStorageLensGroupCommand, "GetStorageLensGroupCommand");
var GetStorageLensGroupCommand = _GetStorageLensGroupCommand;

// src/commands/ListAccessGrantsCommand.ts
var import_middleware_sdk_s3_control62 = require("@aws-sdk/middleware-sdk-s3-control");





var _ListAccessGrantsCommand = class _ListAccessGrantsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control62.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "ListAccessGrants", {}).n("S3ControlClient", "ListAccessGrantsCommand").f(void 0, void 0).ser(se_ListAccessGrantsCommand).de(de_ListAccessGrantsCommand).build() {
};
__name(_ListAccessGrantsCommand, "ListAccessGrantsCommand");
var ListAccessGrantsCommand = _ListAccessGrantsCommand;

// src/commands/ListAccessGrantsInstancesCommand.ts
var import_middleware_sdk_s3_control63 = require("@aws-sdk/middleware-sdk-s3-control");





var _ListAccessGrantsInstancesCommand = class _ListAccessGrantsInstancesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control63.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "ListAccessGrantsInstances", {}).n("S3ControlClient", "ListAccessGrantsInstancesCommand").f(void 0, void 0).ser(se_ListAccessGrantsInstancesCommand).de(de_ListAccessGrantsInstancesCommand).build() {
};
__name(_ListAccessGrantsInstancesCommand, "ListAccessGrantsInstancesCommand");
var ListAccessGrantsInstancesCommand = _ListAccessGrantsInstancesCommand;

// src/commands/ListAccessGrantsLocationsCommand.ts
var import_middleware_sdk_s3_control64 = require("@aws-sdk/middleware-sdk-s3-control");





var _ListAccessGrantsLocationsCommand = class _ListAccessGrantsLocationsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control64.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "ListAccessGrantsLocations", {}).n("S3ControlClient", "ListAccessGrantsLocationsCommand").f(void 0, void 0).ser(se_ListAccessGrantsLocationsCommand).de(de_ListAccessGrantsLocationsCommand).build() {
};
__name(_ListAccessGrantsLocationsCommand, "ListAccessGrantsLocationsCommand");
var ListAccessGrantsLocationsCommand = _ListAccessGrantsLocationsCommand;

// src/commands/ListAccessPointsCommand.ts
var import_middleware_sdk_s3_control65 = require("@aws-sdk/middleware-sdk-s3-control");




var _ListAccessPointsCommand = class _ListAccessPointsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" },
  Bucket: { type: "contextParams", name: "Bucket" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control65.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "ListAccessPoints", {}).n("S3ControlClient", "ListAccessPointsCommand").f(void 0, void 0).ser(se_ListAccessPointsCommand).de(de_ListAccessPointsCommand).build() {
};
__name(_ListAccessPointsCommand, "ListAccessPointsCommand");
var ListAccessPointsCommand = _ListAccessPointsCommand;

// src/commands/ListAccessPointsForObjectLambdaCommand.ts
var import_middleware_sdk_s3_control66 = require("@aws-sdk/middleware-sdk-s3-control");




var _ListAccessPointsForObjectLambdaCommand = class _ListAccessPointsForObjectLambdaCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control66.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "ListAccessPointsForObjectLambda", {}).n("S3ControlClient", "ListAccessPointsForObjectLambdaCommand").f(void 0, void 0).ser(se_ListAccessPointsForObjectLambdaCommand).de(de_ListAccessPointsForObjectLambdaCommand).build() {
};
__name(_ListAccessPointsForObjectLambdaCommand, "ListAccessPointsForObjectLambdaCommand");
var ListAccessPointsForObjectLambdaCommand = _ListAccessPointsForObjectLambdaCommand;

// src/commands/ListJobsCommand.ts
var import_middleware_sdk_s3_control67 = require("@aws-sdk/middleware-sdk-s3-control");




var _ListJobsCommand = class _ListJobsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control67.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "ListJobs", {}).n("S3ControlClient", "ListJobsCommand").f(void 0, void 0).ser(se_ListJobsCommand).de(de_ListJobsCommand).build() {
};
__name(_ListJobsCommand, "ListJobsCommand");
var ListJobsCommand = _ListJobsCommand;

// src/commands/ListMultiRegionAccessPointsCommand.ts
var import_middleware_sdk_s3_control68 = require("@aws-sdk/middleware-sdk-s3-control");





var _ListMultiRegionAccessPointsCommand = class _ListMultiRegionAccessPointsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control68.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "ListMultiRegionAccessPoints", {}).n("S3ControlClient", "ListMultiRegionAccessPointsCommand").f(void 0, void 0).ser(se_ListMultiRegionAccessPointsCommand).de(de_ListMultiRegionAccessPointsCommand).build() {
};
__name(_ListMultiRegionAccessPointsCommand, "ListMultiRegionAccessPointsCommand");
var ListMultiRegionAccessPointsCommand = _ListMultiRegionAccessPointsCommand;

// src/commands/ListRegionalBucketsCommand.ts
var import_middleware_sdk_s3_control69 = require("@aws-sdk/middleware-sdk-s3-control");




var _ListRegionalBucketsCommand = class _ListRegionalBucketsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  OutpostId: { type: "contextParams", name: "OutpostId" },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control69.getRedirectFromPostIdPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "ListRegionalBuckets", {}).n("S3ControlClient", "ListRegionalBucketsCommand").f(void 0, void 0).ser(se_ListRegionalBucketsCommand).de(de_ListRegionalBucketsCommand).build() {
};
__name(_ListRegionalBucketsCommand, "ListRegionalBucketsCommand");
var ListRegionalBucketsCommand = _ListRegionalBucketsCommand;

// src/commands/ListStorageLensConfigurationsCommand.ts
var import_middleware_sdk_s3_control70 = require("@aws-sdk/middleware-sdk-s3-control");




var _ListStorageLensConfigurationsCommand = class _ListStorageLensConfigurationsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control70.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "ListStorageLensConfigurations", {}).n("S3ControlClient", "ListStorageLensConfigurationsCommand").f(void 0, void 0).ser(se_ListStorageLensConfigurationsCommand).de(de_ListStorageLensConfigurationsCommand).build() {
};
__name(_ListStorageLensConfigurationsCommand, "ListStorageLensConfigurationsCommand");
var ListStorageLensConfigurationsCommand = _ListStorageLensConfigurationsCommand;

// src/commands/ListStorageLensGroupsCommand.ts
var import_middleware_sdk_s3_control71 = require("@aws-sdk/middleware-sdk-s3-control");




var _ListStorageLensGroupsCommand = class _ListStorageLensGroupsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control71.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "ListStorageLensGroups", {}).n("S3ControlClient", "ListStorageLensGroupsCommand").f(void 0, void 0).ser(se_ListStorageLensGroupsCommand).de(de_ListStorageLensGroupsCommand).build() {
};
__name(_ListStorageLensGroupsCommand, "ListStorageLensGroupsCommand");
var ListStorageLensGroupsCommand = _ListStorageLensGroupsCommand;

// src/commands/ListTagsForResourceCommand.ts
var import_middleware_sdk_s3_control72 = require("@aws-sdk/middleware-sdk-s3-control");




var _ListTagsForResourceCommand = class _ListTagsForResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control72.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "ListTagsForResource", {}).n("S3ControlClient", "ListTagsForResourceCommand").f(void 0, void 0).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
};
__name(_ListTagsForResourceCommand, "ListTagsForResourceCommand");
var ListTagsForResourceCommand = _ListTagsForResourceCommand;

// src/commands/PutAccessGrantsInstanceResourcePolicyCommand.ts
var import_middleware_sdk_s3_control73 = require("@aws-sdk/middleware-sdk-s3-control");





var _PutAccessGrantsInstanceResourcePolicyCommand = class _PutAccessGrantsInstanceResourcePolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control73.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "PutAccessGrantsInstanceResourcePolicy", {}).n("S3ControlClient", "PutAccessGrantsInstanceResourcePolicyCommand").f(void 0, void 0).ser(se_PutAccessGrantsInstanceResourcePolicyCommand).de(de_PutAccessGrantsInstanceResourcePolicyCommand).build() {
};
__name(_PutAccessGrantsInstanceResourcePolicyCommand, "PutAccessGrantsInstanceResourcePolicyCommand");
var PutAccessGrantsInstanceResourcePolicyCommand = _PutAccessGrantsInstanceResourcePolicyCommand;

// src/commands/PutAccessPointConfigurationForObjectLambdaCommand.ts
var import_middleware_sdk_s3_control74 = require("@aws-sdk/middleware-sdk-s3-control");




var _PutAccessPointConfigurationForObjectLambdaCommand = class _PutAccessPointConfigurationForObjectLambdaCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control74.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "PutAccessPointConfigurationForObjectLambda", {}).n("S3ControlClient", "PutAccessPointConfigurationForObjectLambdaCommand").f(void 0, void 0).ser(se_PutAccessPointConfigurationForObjectLambdaCommand).de(de_PutAccessPointConfigurationForObjectLambdaCommand).build() {
};
__name(_PutAccessPointConfigurationForObjectLambdaCommand, "PutAccessPointConfigurationForObjectLambdaCommand");
var PutAccessPointConfigurationForObjectLambdaCommand = _PutAccessPointConfigurationForObjectLambdaCommand;

// src/commands/PutAccessPointPolicyCommand.ts
var import_middleware_sdk_s3_control75 = require("@aws-sdk/middleware-sdk-s3-control");




var _PutAccessPointPolicyCommand = class _PutAccessPointPolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccessPointName: { type: "contextParams", name: "AccessPointName" },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control75.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "PutAccessPointPolicy", {}).n("S3ControlClient", "PutAccessPointPolicyCommand").f(void 0, void 0).ser(se_PutAccessPointPolicyCommand).de(de_PutAccessPointPolicyCommand).build() {
};
__name(_PutAccessPointPolicyCommand, "PutAccessPointPolicyCommand");
var PutAccessPointPolicyCommand = _PutAccessPointPolicyCommand;

// src/commands/PutAccessPointPolicyForObjectLambdaCommand.ts
var import_middleware_sdk_s3_control76 = require("@aws-sdk/middleware-sdk-s3-control");




var _PutAccessPointPolicyForObjectLambdaCommand = class _PutAccessPointPolicyForObjectLambdaCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control76.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "PutAccessPointPolicyForObjectLambda", {}).n("S3ControlClient", "PutAccessPointPolicyForObjectLambdaCommand").f(void 0, void 0).ser(se_PutAccessPointPolicyForObjectLambdaCommand).de(de_PutAccessPointPolicyForObjectLambdaCommand).build() {
};
__name(_PutAccessPointPolicyForObjectLambdaCommand, "PutAccessPointPolicyForObjectLambdaCommand");
var PutAccessPointPolicyForObjectLambdaCommand = _PutAccessPointPolicyForObjectLambdaCommand;

// src/commands/PutBucketLifecycleConfigurationCommand.ts
var import_middleware_sdk_s3_control77 = require("@aws-sdk/middleware-sdk-s3-control");





var _PutBucketLifecycleConfigurationCommand = class _PutBucketLifecycleConfigurationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" },
  Bucket: { type: "contextParams", name: "Bucket" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control77.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "PutBucketLifecycleConfiguration", {}).n("S3ControlClient", "PutBucketLifecycleConfigurationCommand").f(void 0, void 0).ser(se_PutBucketLifecycleConfigurationCommand).de(de_PutBucketLifecycleConfigurationCommand).build() {
};
__name(_PutBucketLifecycleConfigurationCommand, "PutBucketLifecycleConfigurationCommand");
var PutBucketLifecycleConfigurationCommand = _PutBucketLifecycleConfigurationCommand;

// src/commands/PutBucketPolicyCommand.ts
var import_middleware_sdk_s3_control78 = require("@aws-sdk/middleware-sdk-s3-control");





var _PutBucketPolicyCommand = class _PutBucketPolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" },
  Bucket: { type: "contextParams", name: "Bucket" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control78.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "PutBucketPolicy", {}).n("S3ControlClient", "PutBucketPolicyCommand").f(void 0, void 0).ser(se_PutBucketPolicyCommand).de(de_PutBucketPolicyCommand).build() {
};
__name(_PutBucketPolicyCommand, "PutBucketPolicyCommand");
var PutBucketPolicyCommand = _PutBucketPolicyCommand;

// src/commands/PutBucketReplicationCommand.ts
var import_middleware_sdk_s3_control79 = require("@aws-sdk/middleware-sdk-s3-control");





var _PutBucketReplicationCommand = class _PutBucketReplicationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" },
  Bucket: { type: "contextParams", name: "Bucket" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control79.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "PutBucketReplication", {}).n("S3ControlClient", "PutBucketReplicationCommand").f(void 0, void 0).ser(se_PutBucketReplicationCommand).de(de_PutBucketReplicationCommand).build() {
};
__name(_PutBucketReplicationCommand, "PutBucketReplicationCommand");
var PutBucketReplicationCommand = _PutBucketReplicationCommand;

// src/commands/PutBucketTaggingCommand.ts
var import_middleware_sdk_s3_control80 = require("@aws-sdk/middleware-sdk-s3-control");





var _PutBucketTaggingCommand = class _PutBucketTaggingCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" },
  Bucket: { type: "contextParams", name: "Bucket" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control80.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "PutBucketTagging", {}).n("S3ControlClient", "PutBucketTaggingCommand").f(void 0, void 0).ser(se_PutBucketTaggingCommand).de(de_PutBucketTaggingCommand).build() {
};
__name(_PutBucketTaggingCommand, "PutBucketTaggingCommand");
var PutBucketTaggingCommand = _PutBucketTaggingCommand;

// src/commands/PutBucketVersioningCommand.ts
var import_middleware_sdk_s3_control81 = require("@aws-sdk/middleware-sdk-s3-control");





var _PutBucketVersioningCommand = class _PutBucketVersioningCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" },
  Bucket: { type: "contextParams", name: "Bucket" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control81.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "PutBucketVersioning", {}).n("S3ControlClient", "PutBucketVersioningCommand").f(void 0, void 0).ser(se_PutBucketVersioningCommand).de(de_PutBucketVersioningCommand).build() {
};
__name(_PutBucketVersioningCommand, "PutBucketVersioningCommand");
var PutBucketVersioningCommand = _PutBucketVersioningCommand;

// src/commands/PutJobTaggingCommand.ts
var import_middleware_sdk_s3_control82 = require("@aws-sdk/middleware-sdk-s3-control");




var _PutJobTaggingCommand = class _PutJobTaggingCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control82.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "PutJobTagging", {}).n("S3ControlClient", "PutJobTaggingCommand").f(void 0, void 0).ser(se_PutJobTaggingCommand).de(de_PutJobTaggingCommand).build() {
};
__name(_PutJobTaggingCommand, "PutJobTaggingCommand");
var PutJobTaggingCommand = _PutJobTaggingCommand;

// src/commands/PutMultiRegionAccessPointPolicyCommand.ts
var import_middleware_sdk_s3_control83 = require("@aws-sdk/middleware-sdk-s3-control");





var _PutMultiRegionAccessPointPolicyCommand = class _PutMultiRegionAccessPointPolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control83.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "PutMultiRegionAccessPointPolicy", {}).n("S3ControlClient", "PutMultiRegionAccessPointPolicyCommand").f(void 0, void 0).ser(se_PutMultiRegionAccessPointPolicyCommand).de(de_PutMultiRegionAccessPointPolicyCommand).build() {
};
__name(_PutMultiRegionAccessPointPolicyCommand, "PutMultiRegionAccessPointPolicyCommand");
var PutMultiRegionAccessPointPolicyCommand = _PutMultiRegionAccessPointPolicyCommand;

// src/commands/PutPublicAccessBlockCommand.ts
var import_middleware_sdk_s3_control84 = require("@aws-sdk/middleware-sdk-s3-control");




var _PutPublicAccessBlockCommand = class _PutPublicAccessBlockCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control84.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "PutPublicAccessBlock", {}).n("S3ControlClient", "PutPublicAccessBlockCommand").f(void 0, void 0).ser(se_PutPublicAccessBlockCommand).de(de_PutPublicAccessBlockCommand).build() {
};
__name(_PutPublicAccessBlockCommand, "PutPublicAccessBlockCommand");
var PutPublicAccessBlockCommand = _PutPublicAccessBlockCommand;

// src/commands/PutStorageLensConfigurationCommand.ts
var import_middleware_sdk_s3_control85 = require("@aws-sdk/middleware-sdk-s3-control");




var _PutStorageLensConfigurationCommand = class _PutStorageLensConfigurationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control85.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "PutStorageLensConfiguration", {}).n("S3ControlClient", "PutStorageLensConfigurationCommand").f(void 0, void 0).ser(se_PutStorageLensConfigurationCommand).de(de_PutStorageLensConfigurationCommand).build() {
};
__name(_PutStorageLensConfigurationCommand, "PutStorageLensConfigurationCommand");
var PutStorageLensConfigurationCommand = _PutStorageLensConfigurationCommand;

// src/commands/PutStorageLensConfigurationTaggingCommand.ts
var import_middleware_sdk_s3_control86 = require("@aws-sdk/middleware-sdk-s3-control");




var _PutStorageLensConfigurationTaggingCommand = class _PutStorageLensConfigurationTaggingCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control86.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "PutStorageLensConfigurationTagging", {}).n("S3ControlClient", "PutStorageLensConfigurationTaggingCommand").f(void 0, void 0).ser(se_PutStorageLensConfigurationTaggingCommand).de(de_PutStorageLensConfigurationTaggingCommand).build() {
};
__name(_PutStorageLensConfigurationTaggingCommand, "PutStorageLensConfigurationTaggingCommand");
var PutStorageLensConfigurationTaggingCommand = _PutStorageLensConfigurationTaggingCommand;

// src/commands/SubmitMultiRegionAccessPointRoutesCommand.ts
var import_middleware_sdk_s3_control87 = require("@aws-sdk/middleware-sdk-s3-control");





var _SubmitMultiRegionAccessPointRoutesCommand = class _SubmitMultiRegionAccessPointRoutesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control87.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "SubmitMultiRegionAccessPointRoutes", {}).n("S3ControlClient", "SubmitMultiRegionAccessPointRoutesCommand").f(void 0, void 0).ser(se_SubmitMultiRegionAccessPointRoutesCommand).de(de_SubmitMultiRegionAccessPointRoutesCommand).build() {
};
__name(_SubmitMultiRegionAccessPointRoutesCommand, "SubmitMultiRegionAccessPointRoutesCommand");
var SubmitMultiRegionAccessPointRoutesCommand = _SubmitMultiRegionAccessPointRoutesCommand;

// src/commands/TagResourceCommand.ts
var import_middleware_sdk_s3_control88 = require("@aws-sdk/middleware-sdk-s3-control");




var _TagResourceCommand = class _TagResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control88.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "TagResource", {}).n("S3ControlClient", "TagResourceCommand").f(void 0, void 0).ser(se_TagResourceCommand).de(de_TagResourceCommand).build() {
};
__name(_TagResourceCommand, "TagResourceCommand");
var TagResourceCommand = _TagResourceCommand;

// src/commands/UntagResourceCommand.ts
var import_middleware_sdk_s3_control89 = require("@aws-sdk/middleware-sdk-s3-control");




var _UntagResourceCommand = class _UntagResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control89.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "UntagResource", {}).n("S3ControlClient", "UntagResourceCommand").f(void 0, void 0).ser(se_UntagResourceCommand).de(de_UntagResourceCommand).build() {
};
__name(_UntagResourceCommand, "UntagResourceCommand");
var UntagResourceCommand = _UntagResourceCommand;

// src/commands/UpdateAccessGrantsLocationCommand.ts
var import_middleware_sdk_s3_control90 = require("@aws-sdk/middleware-sdk-s3-control");





var _UpdateAccessGrantsLocationCommand = class _UpdateAccessGrantsLocationCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control90.getProcessArnablesPlugin)(config),
    (0, import_middleware_apply_body_checksum.getApplyMd5BodyChecksumPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "UpdateAccessGrantsLocation", {}).n("S3ControlClient", "UpdateAccessGrantsLocationCommand").f(void 0, void 0).ser(se_UpdateAccessGrantsLocationCommand).de(de_UpdateAccessGrantsLocationCommand).build() {
};
__name(_UpdateAccessGrantsLocationCommand, "UpdateAccessGrantsLocationCommand");
var UpdateAccessGrantsLocationCommand = _UpdateAccessGrantsLocationCommand;

// src/commands/UpdateJobPriorityCommand.ts
var import_middleware_sdk_s3_control91 = require("@aws-sdk/middleware-sdk-s3-control");




var _UpdateJobPriorityCommand = class _UpdateJobPriorityCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control91.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "UpdateJobPriority", {}).n("S3ControlClient", "UpdateJobPriorityCommand").f(void 0, void 0).ser(se_UpdateJobPriorityCommand).de(de_UpdateJobPriorityCommand).build() {
};
__name(_UpdateJobPriorityCommand, "UpdateJobPriorityCommand");
var UpdateJobPriorityCommand = _UpdateJobPriorityCommand;

// src/commands/UpdateJobStatusCommand.ts
var import_middleware_sdk_s3_control92 = require("@aws-sdk/middleware-sdk-s3-control");




var _UpdateJobStatusCommand = class _UpdateJobStatusCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control92.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "UpdateJobStatus", {}).n("S3ControlClient", "UpdateJobStatusCommand").f(void 0, void 0).ser(se_UpdateJobStatusCommand).de(de_UpdateJobStatusCommand).build() {
};
__name(_UpdateJobStatusCommand, "UpdateJobStatusCommand");
var UpdateJobStatusCommand = _UpdateJobStatusCommand;

// src/commands/UpdateStorageLensGroupCommand.ts
var import_middleware_sdk_s3_control93 = require("@aws-sdk/middleware-sdk-s3-control");




var _UpdateStorageLensGroupCommand = class _UpdateStorageLensGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams,
  RequiresAccountId: { type: "staticContextParams", value: true },
  AccountId: { type: "contextParams", name: "AccountId" }
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions()),
    (0, import_middleware_sdk_s3_control93.getProcessArnablesPlugin)(config)
  ];
}).s("AWSS3ControlServiceV20180820", "UpdateStorageLensGroup", {}).n("S3ControlClient", "UpdateStorageLensGroupCommand").f(void 0, void 0).ser(se_UpdateStorageLensGroupCommand).de(de_UpdateStorageLensGroupCommand).build() {
};
__name(_UpdateStorageLensGroupCommand, "UpdateStorageLensGroupCommand");
var UpdateStorageLensGroupCommand = _UpdateStorageLensGroupCommand;

// src/S3Control.ts
var commands = {
  AssociateAccessGrantsIdentityCenterCommand,
  CreateAccessGrantCommand,
  CreateAccessGrantsInstanceCommand,
  CreateAccessGrantsLocationCommand,
  CreateAccessPointCommand,
  CreateAccessPointForObjectLambdaCommand,
  CreateBucketCommand,
  CreateJobCommand,
  CreateMultiRegionAccessPointCommand,
  CreateStorageLensGroupCommand,
  DeleteAccessGrantCommand,
  DeleteAccessGrantsInstanceCommand,
  DeleteAccessGrantsInstanceResourcePolicyCommand,
  DeleteAccessGrantsLocationCommand,
  DeleteAccessPointCommand,
  DeleteAccessPointForObjectLambdaCommand,
  DeleteAccessPointPolicyCommand,
  DeleteAccessPointPolicyForObjectLambdaCommand,
  DeleteBucketCommand,
  DeleteBucketLifecycleConfigurationCommand,
  DeleteBucketPolicyCommand,
  DeleteBucketReplicationCommand,
  DeleteBucketTaggingCommand,
  DeleteJobTaggingCommand,
  DeleteMultiRegionAccessPointCommand,
  DeletePublicAccessBlockCommand,
  DeleteStorageLensConfigurationCommand,
  DeleteStorageLensConfigurationTaggingCommand,
  DeleteStorageLensGroupCommand,
  DescribeJobCommand,
  DescribeMultiRegionAccessPointOperationCommand,
  DissociateAccessGrantsIdentityCenterCommand,
  GetAccessGrantCommand,
  GetAccessGrantsInstanceCommand,
  GetAccessGrantsInstanceForPrefixCommand,
  GetAccessGrantsInstanceResourcePolicyCommand,
  GetAccessGrantsLocationCommand,
  GetAccessPointCommand,
  GetAccessPointConfigurationForObjectLambdaCommand,
  GetAccessPointForObjectLambdaCommand,
  GetAccessPointPolicyCommand,
  GetAccessPointPolicyForObjectLambdaCommand,
  GetAccessPointPolicyStatusCommand,
  GetAccessPointPolicyStatusForObjectLambdaCommand,
  GetBucketCommand,
  GetBucketLifecycleConfigurationCommand,
  GetBucketPolicyCommand,
  GetBucketReplicationCommand,
  GetBucketTaggingCommand,
  GetBucketVersioningCommand,
  GetDataAccessCommand,
  GetJobTaggingCommand,
  GetMultiRegionAccessPointCommand,
  GetMultiRegionAccessPointPolicyCommand,
  GetMultiRegionAccessPointPolicyStatusCommand,
  GetMultiRegionAccessPointRoutesCommand,
  GetPublicAccessBlockCommand,
  GetStorageLensConfigurationCommand,
  GetStorageLensConfigurationTaggingCommand,
  GetStorageLensGroupCommand,
  ListAccessGrantsCommand,
  ListAccessGrantsInstancesCommand,
  ListAccessGrantsLocationsCommand,
  ListAccessPointsCommand,
  ListAccessPointsForObjectLambdaCommand,
  ListJobsCommand,
  ListMultiRegionAccessPointsCommand,
  ListRegionalBucketsCommand,
  ListStorageLensConfigurationsCommand,
  ListStorageLensGroupsCommand,
  ListTagsForResourceCommand,
  PutAccessGrantsInstanceResourcePolicyCommand,
  PutAccessPointConfigurationForObjectLambdaCommand,
  PutAccessPointPolicyCommand,
  PutAccessPointPolicyForObjectLambdaCommand,
  PutBucketLifecycleConfigurationCommand,
  PutBucketPolicyCommand,
  PutBucketReplicationCommand,
  PutBucketTaggingCommand,
  PutBucketVersioningCommand,
  PutJobTaggingCommand,
  PutMultiRegionAccessPointPolicyCommand,
  PutPublicAccessBlockCommand,
  PutStorageLensConfigurationCommand,
  PutStorageLensConfigurationTaggingCommand,
  SubmitMultiRegionAccessPointRoutesCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateAccessGrantsLocationCommand,
  UpdateJobPriorityCommand,
  UpdateJobStatusCommand,
  UpdateStorageLensGroupCommand
};
var _S3Control = class _S3Control extends S3ControlClient {
};
__name(_S3Control, "S3Control");
var S3Control = _S3Control;
(0, import_smithy_client.createAggregatedClient)(commands, S3Control);

// src/pagination/ListAccessGrantsInstancesPaginator.ts

var paginateListAccessGrantsInstances = (0, import_core.createPaginator)(S3ControlClient, ListAccessGrantsInstancesCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListAccessGrantsLocationsPaginator.ts

var paginateListAccessGrantsLocations = (0, import_core.createPaginator)(S3ControlClient, ListAccessGrantsLocationsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListAccessGrantsPaginator.ts

var paginateListAccessGrants = (0, import_core.createPaginator)(S3ControlClient, ListAccessGrantsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListAccessPointsForObjectLambdaPaginator.ts

var paginateListAccessPointsForObjectLambda = (0, import_core.createPaginator)(S3ControlClient, ListAccessPointsForObjectLambdaCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListAccessPointsPaginator.ts

var paginateListAccessPoints = (0, import_core.createPaginator)(S3ControlClient, ListAccessPointsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListJobsPaginator.ts

var paginateListJobs = (0, import_core.createPaginator)(S3ControlClient, ListJobsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListMultiRegionAccessPointsPaginator.ts

var paginateListMultiRegionAccessPoints = (0, import_core.createPaginator)(S3ControlClient, ListMultiRegionAccessPointsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListRegionalBucketsPaginator.ts

var paginateListRegionalBuckets = (0, import_core.createPaginator)(S3ControlClient, ListRegionalBucketsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListStorageLensConfigurationsPaginator.ts

var paginateListStorageLensConfigurations = (0, import_core.createPaginator)(S3ControlClient, ListStorageLensConfigurationsCommand, "NextToken", "NextToken", "");

// src/pagination/ListStorageLensGroupsPaginator.ts

var paginateListStorageLensGroups = (0, import_core.createPaginator)(S3ControlClient, ListStorageLensGroupsCommand, "NextToken", "NextToken", "");

// src/index.ts
var import_util_endpoints = require("@aws-sdk/util-endpoints");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  S3ControlServiceException,
  __Client,
  S3ControlClient,
  S3Control,
  $Command,
  AssociateAccessGrantsIdentityCenterCommand,
  CreateAccessGrantCommand,
  CreateAccessGrantsInstanceCommand,
  CreateAccessGrantsLocationCommand,
  CreateAccessPointCommand,
  CreateAccessPointForObjectLambdaCommand,
  CreateBucketCommand,
  CreateJobCommand,
  CreateMultiRegionAccessPointCommand,
  CreateStorageLensGroupCommand,
  DeleteAccessGrantCommand,
  DeleteAccessGrantsInstanceCommand,
  DeleteAccessGrantsInstanceResourcePolicyCommand,
  DeleteAccessGrantsLocationCommand,
  DeleteAccessPointCommand,
  DeleteAccessPointForObjectLambdaCommand,
  DeleteAccessPointPolicyCommand,
  DeleteAccessPointPolicyForObjectLambdaCommand,
  DeleteBucketCommand,
  DeleteBucketLifecycleConfigurationCommand,
  DeleteBucketPolicyCommand,
  DeleteBucketReplicationCommand,
  DeleteBucketTaggingCommand,
  DeleteJobTaggingCommand,
  DeleteMultiRegionAccessPointCommand,
  DeletePublicAccessBlockCommand,
  DeleteStorageLensConfigurationCommand,
  DeleteStorageLensConfigurationTaggingCommand,
  DeleteStorageLensGroupCommand,
  DescribeJobCommand,
  DescribeMultiRegionAccessPointOperationCommand,
  DissociateAccessGrantsIdentityCenterCommand,
  GetAccessGrantCommand,
  GetAccessGrantsInstanceCommand,
  GetAccessGrantsInstanceForPrefixCommand,
  GetAccessGrantsInstanceResourcePolicyCommand,
  GetAccessGrantsLocationCommand,
  GetAccessPointCommand,
  GetAccessPointConfigurationForObjectLambdaCommand,
  GetAccessPointForObjectLambdaCommand,
  GetAccessPointPolicyCommand,
  GetAccessPointPolicyForObjectLambdaCommand,
  GetAccessPointPolicyStatusCommand,
  GetAccessPointPolicyStatusForObjectLambdaCommand,
  GetBucketCommand,
  GetBucketLifecycleConfigurationCommand,
  GetBucketPolicyCommand,
  GetBucketReplicationCommand,
  GetBucketTaggingCommand,
  GetBucketVersioningCommand,
  GetDataAccessCommand,
  GetJobTaggingCommand,
  GetMultiRegionAccessPointCommand,
  GetMultiRegionAccessPointPolicyCommand,
  GetMultiRegionAccessPointPolicyStatusCommand,
  GetMultiRegionAccessPointRoutesCommand,
  GetPublicAccessBlockCommand,
  GetStorageLensConfigurationCommand,
  GetStorageLensConfigurationTaggingCommand,
  GetStorageLensGroupCommand,
  ListAccessGrantsCommand,
  ListAccessGrantsInstancesCommand,
  ListAccessGrantsLocationsCommand,
  ListAccessPointsCommand,
  ListAccessPointsForObjectLambdaCommand,
  ListJobsCommand,
  ListMultiRegionAccessPointsCommand,
  ListRegionalBucketsCommand,
  ListStorageLensConfigurationsCommand,
  ListStorageLensGroupsCommand,
  ListTagsForResourceCommand,
  PutAccessGrantsInstanceResourcePolicyCommand,
  PutAccessPointConfigurationForObjectLambdaCommand,
  PutAccessPointPolicyCommand,
  PutAccessPointPolicyForObjectLambdaCommand,
  PutBucketLifecycleConfigurationCommand,
  PutBucketPolicyCommand,
  PutBucketReplicationCommand,
  PutBucketTaggingCommand,
  PutBucketVersioningCommand,
  PutJobTaggingCommand,
  PutMultiRegionAccessPointPolicyCommand,
  PutPublicAccessBlockCommand,
  PutStorageLensConfigurationCommand,
  PutStorageLensConfigurationTaggingCommand,
  SubmitMultiRegionAccessPointRoutesCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateAccessGrantsLocationCommand,
  UpdateJobPriorityCommand,
  UpdateJobStatusCommand,
  UpdateStorageLensGroupCommand,
  paginateListAccessGrantsInstances,
  paginateListAccessGrantsLocations,
  paginateListAccessGrants,
  paginateListAccessPointsForObjectLambda,
  paginateListAccessPoints,
  paginateListJobs,
  paginateListMultiRegionAccessPoints,
  paginateListRegionalBuckets,
  paginateListStorageLensConfigurations,
  paginateListStorageLensGroups,
  OwnerOverride,
  GranteeType,
  Permission,
  NetworkOrigin,
  AsyncOperationName,
  S3PrefixType,
  ObjectLambdaAllowedFeature,
  ObjectLambdaTransformationConfigurationAction,
  ObjectLambdaContentTransformation,
  ObjectLambdaAccessPointAliasStatus,
  BucketAlreadyExists,
  BucketAlreadyOwnedByYou,
  BucketCannedACL,
  BucketLocationConstraint,
  BadRequestException,
  JobManifestFieldName,
  JobManifestFormat,
  S3StorageClass,
  ReplicationStatus,
  GeneratedManifestFormat,
  JobManifestGenerator,
  S3GlacierJobTier,
  S3GranteeTypeIdentifier,
  S3Permission,
  S3CannedAccessControlList,
  S3ChecksumAlgorithm,
  S3MetadataDirective,
  S3SSEAlgorithm,
  S3ObjectLockLegalHoldStatus,
  S3ObjectLockMode,
  S3ObjectLockRetentionMode,
  JobReportFormat,
  JobReportScope,
  IdempotencyException,
  InternalServiceException,
  TooManyRequestsException,
  NotFoundException,
  JobStatus,
  TransitionStorageClass,
  ExpirationStatus,
  DeleteMarkerReplicationStatus,
  MetricsStatus,
  ReplicationTimeStatus,
  ReplicationStorageClass,
  ExistingObjectReplicationStatus,
  ReplicaModificationsStatus,
  SseKmsEncryptedObjectsStatus,
  ReplicationRuleStatus,
  MFADeleteStatus,
  BucketVersioningStatus,
  Privilege,
  MultiRegionAccessPointStatus,
  NoSuchPublicAccessBlockConfiguration,
  Format,
  OutputSchemaVersion,
  InvalidNextTokenException,
  InvalidRequestException,
  OperationName,
  CredentialsFilterSensitiveLog,
  GetDataAccessResultFilterSensitiveLog,
  MFADelete,
  TooManyTagsException,
  JobStatusException,
  RequestedJobStatus
});

