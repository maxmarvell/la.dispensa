var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  NODE_USE_ARN_REGION_CONFIG_OPTIONS: () => import_middleware_bucket_endpoint.NODE_USE_ARN_REGION_CONFIG_OPTIONS,
  getHostPrefixDeduplicationPlugin: () => getHostPrefixDeduplicationPlugin,
  getProcessArnablesPlugin: () => getProcessArnablesPlugin,
  getRedirectFromPostIdPlugin: () => getRedirectFromPostIdPlugin,
  hostPrefixDeduplicationMiddleware: () => hostPrefixDeduplicationMiddleware,
  hostPrefixDeduplicationMiddlewareOptions: () => hostPrefixDeduplicationMiddlewareOptions,
  parseOutpostArnablesMiddleaware: () => parseOutpostArnablesMiddleaware,
  parseOutpostArnablesMiddleawareOptions: () => parseOutpostArnablesMiddleawareOptions,
  redirectFromPostIdMiddleware: () => redirectFromPostIdMiddleware,
  redirectFromPostIdMiddlewareOptions: () => redirectFromPostIdMiddlewareOptions,
  resolveS3ControlConfig: () => resolveS3ControlConfig,
  updateArnablesRequestMiddleware: () => updateArnablesRequestMiddleware,
  updateArnablesRequestMiddlewareOptions: () => updateArnablesRequestMiddlewareOptions
});
module.exports = __toCommonJS(src_exports);

// src/configurations.ts
var import_middleware_bucket_endpoint = require("@aws-sdk/middleware-bucket-endpoint");
function resolveS3ControlConfig(input) {
  const { useArnRegion = false } = input;
  return {
    ...input,
    useArnRegion: typeof useArnRegion === "function" ? useArnRegion : () => Promise.resolve(useArnRegion)
  };
}
__name(resolveS3ControlConfig, "resolveS3ControlConfig");

// src/process-arnables-plugin/parse-outpost-arnables.ts

var import_util_arn_parser = require("@aws-sdk/util-arn-parser");
var import_util_endpoints = require("@aws-sdk/util-endpoints");

// src/constants.ts
var CONTEXT_OUTPOST_ID = "outpost_id";
var CONTEXT_ACCOUNT_ID = "account_id";
var CONTEXT_ARN_REGION = "outpost_arn_region";
var CONTEXT_SIGNING_SERVICE = "signing_service";
var CONTEXT_SIGNING_REGION = "signing_region";

// src/process-arnables-plugin/parse-outpost-arnables.ts
var parseOutpostArnablesMiddleaware = /* @__PURE__ */ __name((options) => (next, context) => async (args) => {
  var _a, _b, _c, _d;
  const { input } = args;
  const parameter = input.Name && (0, import_util_arn_parser.validate)(input.Name) ? "Name" : input.Bucket && (0, import_util_arn_parser.validate)(input.Bucket) ? "Bucket" : void 0;
  if (!parameter)
    return next(args);
  const clientRegion = await options.region();
  const useArnRegion = await options.useArnRegion();
  const useFipsEndpoint = await options.useFipsEndpoint();
  const useDualstackEndpoint = await options.useDualstackEndpoint();
  const baseRegion = clientRegion;
  let clientPartition;
  let signingRegion;
  if (options.regionInfoProvider) {
    ({ partition: clientPartition, signingRegion = baseRegion } = await options.regionInfoProvider(baseRegion, {
      useFipsEndpoint,
      useDualstackEndpoint
    }));
  } else {
    signingRegion = ((_d = (_c = (_b = (_a = context.endpointV2) == null ? void 0 : _a.properties) == null ? void 0 : _b.authSchemes) == null ? void 0 : _c[0]) == null ? void 0 : _d.signingRegion) || baseRegion;
    clientPartition = (0, import_util_endpoints.partition)(signingRegion).name;
  }
  const validatorOptions = {
    useFipsEndpoint,
    useDualstackEndpoint,
    clientRegion,
    clientPartition,
    signingRegion,
    useArnRegion
  };
  let arn;
  if (parameter === "Name") {
    arn = (0, import_util_arn_parser.parse)(input.Name);
    validateOutpostsArn(arn, validatorOptions);
    const { outpostId, accesspointName } = parseOutpostsAccessPointArnResource(arn.resource);
    input.Name = accesspointName;
    context[CONTEXT_OUTPOST_ID] = outpostId;
  } else {
    arn = (0, import_util_arn_parser.parse)(input.Bucket);
    validateOutpostsArn(arn, validatorOptions);
    const { outpostId, bucketName } = parseOutpostBucketArnResource(arn.resource);
    input.Bucket = bucketName;
    context[CONTEXT_OUTPOST_ID] = outpostId;
  }
  context[CONTEXT_SIGNING_SERVICE] = arn.service;
  context[CONTEXT_SIGNING_REGION] = useArnRegion ? arn.region : signingRegion;
  if (!input.AccountId) {
    input.AccountId = arn.accountId;
  } else if (input.AccountId !== arn.accountId) {
    throw new Error(`AccountId is incompatible with account id inferred from ${parameter}`);
  }
  if (useArnRegion)
    context[CONTEXT_ARN_REGION] = arn.region;
  return next(args);
}, "parseOutpostArnablesMiddleaware");
var parseOutpostArnablesMiddleawareOptions = {
  step: "initialize",
  tags: ["CONVERT_ARN", "OUTPOST_BUCKET_ARN", "OUTPOST_ACCESS_POINT_ARN", "OUTPOST"],
  name: "parseOutpostArnablesMiddleaware"
};
var validateOutpostsArn = /* @__PURE__ */ __name((arn, {
  clientRegion,
  signingRegion,
  clientPartition,
  useArnRegion,
  useFipsEndpoint,
  useDualstackEndpoint
}) => {
  const { service, partition: partition2, accountId, region } = arn;
  (0, import_middleware_bucket_endpoint.validateOutpostService)(service);
  (0, import_middleware_bucket_endpoint.validatePartition)(partition2, { clientPartition });
  (0, import_middleware_bucket_endpoint.validateAccountId)(accountId);
  (0, import_middleware_bucket_endpoint.validateRegion)(region, {
    useArnRegion,
    clientRegion,
    clientSigningRegion: signingRegion,
    useFipsEndpoint,
    allowFipsRegion: true
  });
  (0, import_middleware_bucket_endpoint.validateNoDualstack)(useDualstackEndpoint);
}, "validateOutpostsArn");
var parseOutpostsAccessPointArnResource = /* @__PURE__ */ __name((resource) => {
  const { outpostId, accesspointName } = (0, import_middleware_bucket_endpoint.getArnResources)(resource);
  if (!outpostId) {
    throw new Error("ARN resource should begin with 'outpost'");
  }
  return {
    outpostId,
    accesspointName
  };
}, "parseOutpostsAccessPointArnResource");
var parseOutpostBucketArnResource = /* @__PURE__ */ __name((resource) => {
  const delimiter = resource.includes(":") ? ":" : "/";
  const [resourceType, ...rest] = resource.split(delimiter);
  if (resourceType === "outpost") {
    if (!rest[0] || rest[1] !== "bucket" || !rest[2] || rest.length !== 3) {
      throw new Error(
        `Outpost Bucket ARN should have resource outpost${delimiter}{outpostId}${delimiter}bucket${delimiter}{bucketName}`
      );
    }
    const [outpostId, _, bucketName] = rest;
    return { outpostId, bucketName };
  } else {
    throw new Error(`ARN resource should begin with 'outpost${delimiter}'`);
  }
}, "parseOutpostBucketArnResource");

// src/process-arnables-plugin/update-arnables-request.ts
var import_protocol_http = require("@smithy/protocol-http");

// src/process-arnables-plugin/getOutpostEndpoint.ts
var REGEX_S3CONTROL_HOSTNAME = /^(.+\.)?s3-control(-fips)?[.-]([a-z0-9-]+)\./;
var getOutpostEndpoint = /* @__PURE__ */ __name((hostname, { isCustomEndpoint, regionOverride, useFipsEndpoint }) => {
  if (isCustomEndpoint) {
    return hostname;
  }
  const match = hostname.match(REGEX_S3CONTROL_HOSTNAME);
  if (!match) {
    return hostname;
  }
  const [matched, prefix, fips, region] = hostname.match(REGEX_S3CONTROL_HOSTNAME);
  return [
    `s3-outposts${useFipsEndpoint ? "-fips" : ""}`,
    regionOverride || region,
    hostname.replace(new RegExp(`^${matched}`), "")
  ].filter((part) => part !== void 0).join(".");
}, "getOutpostEndpoint");

// src/process-arnables-plugin/update-arnables-request.ts
var ACCOUNT_ID_HEADER = "x-amz-account-id";
var OUTPOST_ID_HEADER = "x-amz-outpost-id";
var updateArnablesRequestMiddleware = /* @__PURE__ */ __name((config) => (next, context) => async (args) => {
  const { request } = args;
  if (!import_protocol_http.HttpRequest.isInstance(request))
    return next(args);
  if (context[CONTEXT_ACCOUNT_ID])
    request.headers[ACCOUNT_ID_HEADER] = context[CONTEXT_ACCOUNT_ID];
  if (context[CONTEXT_OUTPOST_ID]) {
    const { isCustomEndpoint } = config;
    const useFipsEndpoint = await config.useFipsEndpoint();
    request.headers[OUTPOST_ID_HEADER] = context[CONTEXT_OUTPOST_ID];
    request.hostname = getOutpostEndpoint(request.hostname, {
      isCustomEndpoint,
      regionOverride: context[CONTEXT_ARN_REGION],
      useFipsEndpoint
    });
  }
  return next(args);
}, "updateArnablesRequestMiddleware");
var updateArnablesRequestMiddlewareOptions = {
  step: "build",
  name: "updateArnablesRequestMiddleware",
  tags: ["ACCOUNT_ID", "OUTPOST_ID", "OUTPOST"]
};

// src/process-arnables-plugin/getProcessArnablesPlugin.ts
var getProcessArnablesPlugin = /* @__PURE__ */ __name((options) => ({
  applyToStack: (clientStack) => {
    clientStack.add(parseOutpostArnablesMiddleaware(options), parseOutpostArnablesMiddleawareOptions);
    clientStack.add(updateArnablesRequestMiddleware(options), updateArnablesRequestMiddlewareOptions);
  }
}), "getProcessArnablesPlugin");

// src/host-prefix-deduplication/deduplicateHostPrefix.ts
var import_util_endpoints2 = require("@smithy/util-endpoints");
var deduplicateHostPrefix = /* @__PURE__ */ __name((hostname) => {
  const [p1, p2, p3, p4, ...rest] = hostname.split(".");
  if ((0, import_util_endpoints2.isIpAddress)(`${p1}.${p2}.${p3}.${parseInt(p4, 10)}`)) {
    return hostname;
  }
  if (p1 === p2) {
    return [p2, p3, p4, ...rest].join(".");
  }
  return hostname;
}, "deduplicateHostPrefix");

// src/host-prefix-deduplication/hostPrefixDeduplicationMiddleware.ts
var hostPrefixDeduplicationMiddleware = /* @__PURE__ */ __name(() => {
  return (next, context) => async (args) => {
    const httpRequest = args.request ?? {};
    if (httpRequest == null ? void 0 : httpRequest.hostname) {
      httpRequest.hostname = deduplicateHostPrefix(httpRequest.hostname);
    }
    return next(args);
  };
}, "hostPrefixDeduplicationMiddleware");
var hostPrefixDeduplicationMiddlewareOptions = {
  tags: ["HOST_PREFIX_DEDUPLICATION", "ENDPOINT_V2", "ENDPOINT"],
  toMiddleware: "serializerMiddleware",
  relation: "after",
  name: "hostPrefixDeduplicationMiddleware",
  override: true
};
var getHostPrefixDeduplicationPlugin = /* @__PURE__ */ __name((config) => ({
  applyToStack: (clientStack) => {
    clientStack.addRelativeTo(hostPrefixDeduplicationMiddleware(), hostPrefixDeduplicationMiddlewareOptions);
  }
}), "getHostPrefixDeduplicationPlugin");

// src/redirect-from-postid.ts

var redirectFromPostIdMiddleware = /* @__PURE__ */ __name((config) => (next, context) => async (args) => {
  const { input, request } = args;
  if (!import_protocol_http.HttpRequest.isInstance(request))
    return next(args);
  if (input.OutpostId) {
    const { isCustomEndpoint } = config;
    const useFipsEndpoint = await config.useFipsEndpoint();
    request.hostname = getOutpostEndpoint(request.hostname, { isCustomEndpoint, useFipsEndpoint });
    context[CONTEXT_SIGNING_SERVICE] = "s3-outposts";
  }
  return next(args);
}, "redirectFromPostIdMiddleware");
var redirectFromPostIdMiddlewareOptions = {
  step: "build",
  name: "redirectFromPostIdMiddleware",
  tags: ["OUTPOST"],
  override: true
};
var getRedirectFromPostIdPlugin = /* @__PURE__ */ __name((options) => ({
  applyToStack: (clientStack) => {
    clientStack.add(redirectFromPostIdMiddleware(options), redirectFromPostIdMiddlewareOptions);
  }
}), "getRedirectFromPostIdPlugin");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  parseOutpostArnablesMiddleaware,
  parseOutpostArnablesMiddleawareOptions,
  updateArnablesRequestMiddleware,
  updateArnablesRequestMiddlewareOptions,
  getProcessArnablesPlugin,
  NODE_USE_ARN_REGION_CONFIG_OPTIONS,
  resolveS3ControlConfig,
  hostPrefixDeduplicationMiddleware,
  hostPrefixDeduplicationMiddlewareOptions,
  getHostPrefixDeduplicationPlugin,
  redirectFromPostIdMiddleware,
  redirectFromPostIdMiddlewareOptions,
  getRedirectFromPostIdPlugin
});

